{
    "messages": [
        {
            "type": "error",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "unrecognized-option",
            "message": "Unrecognized option found: no-space-check",
            "message-id": "E0015"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'print-statement' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'parameter-unpacking' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'unpacking-in-except' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'old-raise-syntax' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'backtick' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'import-star-module-level' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'apply-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'basestring-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'buffer-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'cmp-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'coerce-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'execfile-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'file-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'long-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'raw_input-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'reduce-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'standarderror-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'unicode-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'xrange-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'coerce-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'delslice-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'getslice-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'setslice-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'no-absolute-import' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'old-division' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'dict-iter-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'dict-view-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'next-method-called' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'metaclass-assignment' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'indexing-exception' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'raising-string' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'reload-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'oct-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'hex-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'nonzero-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'cmp-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'input-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'round-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'intern-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'unichr-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'map-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'zip-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'range-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'filter-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'using-cmp-argument' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'div-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'idiv-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'rdiv-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'exception-message-attribute' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'invalid-str-codec' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'sys-max-int' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'bad-python3-import' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'deprecated-string-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'deprecated-str-translate-call' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'deprecated-itertools-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'deprecated-types-field' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'next-method-defined' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'dict-items-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'dict-keys-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "refactor",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "useless-option-value",
            "message": "Useless option value for '--disable', 'dict-values-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942.",
            "message-id": "R0022"
        },
        {
            "type": "warning",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "unknown-option-value",
            "message": "Unknown option value for '--disable', expected a valid pylint message and got 'long-suffix'",
            "message-id": "W0012"
        },
        {
            "type": "warning",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "unknown-option-value",
            "message": "Unknown option value for '--disable', expected a valid pylint message and got 'old-ne-operator'",
            "message-id": "W0012"
        },
        {
            "type": "warning",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "unknown-option-value",
            "message": "Unknown option value for '--disable', expected a valid pylint message and got 'old-octal-literal'",
            "message-id": "W0012"
        },
        {
            "type": "warning",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "unknown-option-value",
            "message": "Unknown option value for '--disable', expected a valid pylint message and got 'non-ascii-bytes-literal'",
            "message-id": "W0012"
        },
        {
            "type": "warning",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "unknown-option-value",
            "message": "Unknown option value for '--disable', expected a valid pylint message and got 'locally-enabled'",
            "message-id": "W0012"
        },
        {
            "type": "warning",
            "module": "/home/runner/work/TEASER/TEASER/pylintrc",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "pylintrc",
            "symbol": "unknown-option-value",
            "message": "Unknown option value for '--disable', expected a valid pylint message and got 'eq-without-hash'",
            "message-id": "W0012"
        },
        {
            "type": "convention",
            "module": "teaser",
            "obj": "read_file",
            "line": 18,
            "column": 4,
            "path": "teaser/__init__.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser",
            "obj": "read_file",
            "line": 19,
            "column": 8,
            "path": "teaser/__init__.py",
            "symbol": "invalid-name",
            "message": "Variable name \"fp\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser",
            "obj": "read_file",
            "line": 19,
            "column": 13,
            "path": "teaser/__init__.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "refactor",
            "module": "teaser",
            "obj": "read_file",
            "line": 19,
            "column": 13,
            "path": "teaser/__init__.py",
            "symbol": "consider-using-with",
            "message": "Consider using 'with' for resource-allocating operations",
            "message-id": "R1732"
        },
        {
            "type": "error",
            "module": "teaser",
            "obj": "",
            "line": 26,
            "column": 4,
            "path": "teaser/__init__.py",
            "symbol": "import-error",
            "message": "Unable to import 'mako.util'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 365,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (102/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 371,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (108/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 530,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (102/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 535,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (108/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 780,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (107/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 891,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (108/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 894,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (114/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 896,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (116/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 900,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (102/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 913,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (119/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 915,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (112/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 934,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (114/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 942,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (114/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 943,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (101/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 1108,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "line-too-long",
            "message": "Line too long (114/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.project",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (1262/1000)",
            "message-id": "C0302"
        },
        {
            "type": "fatal",
            "module": "teaser.project",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/project.py",
            "symbol": "astroid-error",
            "message": "teaser/project.py: Fatal error while checking 'teaser/project.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-07-23-10-07-08.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e7_retrofit",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "teaser/examples/e7_retrofit.py",
            "symbol": "line-too-long",
            "message": "Line too long (137/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e7_retrofit",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/e7_retrofit.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "line-too-long",
            "message": "Line too long (137/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 11,
            "column": 0,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (38/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 17,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.project.Project)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 18,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.data.utilities.ConstructionData)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 19,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.data.dataclass.DataClass)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 34,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.building.Building)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 49,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.thermalzone.ThermalZone)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 51,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 58,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.useconditions.UseConditions)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 72,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.buildingphysics.rooftop.Rooftop)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 99,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.buildingphysics.layer.Layer)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 106,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.buildingphysics.material.Material)",
            "message-id": "C0415"
        },
        {
            "type": "warning",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 130,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "reimported",
            "message": "Reimport 'Material' (imported line 106)",
            "message-id": "W0404"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 130,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.buildingphysics.material.Material)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 158,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.buildingphysics.outerwall.OuterWall)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 169,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.buildingphysics.innerwall.InnerWall)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 204,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.buildingphysics.groundfloor.GroundFloor)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 218,
            "column": 4,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.buildingphysics.window.Window)",
            "message-id": "C0415"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e6_generate_building",
            "obj": "example_create_building",
            "line": 11,
            "column": 0,
            "path": "teaser/examples/e6_generate_building.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (117/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e5_load",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "teaser/examples/e5_load.py",
            "symbol": "line-too-long",
            "message": "Line too long (137/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e5_load",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/e5_load.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e5_load",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "teaser/examples/e5_load.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e5_load",
            "obj": "example_load",
            "line": 24,
            "column": 4,
            "path": "teaser/examples/e5_load.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.project.Project)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e5_load",
            "obj": "example_load",
            "line": 40,
            "column": 4,
            "path": "teaser/examples/e5_load.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (pickle)",
            "message-id": "C0415"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e5_load",
            "obj": "example_load",
            "line": 44,
            "column": 29,
            "path": "teaser/examples/e5_load.py",
            "symbol": "consider-using-with",
            "message": "Consider using 'with' for resource-allocating operations",
            "message-id": "R1732"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e5_load",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "teaser/examples/e5_load.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"import teaser.logic.utilities as utilities\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e3_export_ibpsa_models",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "teaser/examples/e3_export_ibpsa_models.py",
            "symbol": "line-too-long",
            "message": "Line too long (137/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e3_export_ibpsa_models",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/e3_export_ibpsa_models.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e3_export_ibpsa_models",
            "obj": "",
            "line": 11,
            "column": 0,
            "path": "teaser/examples/e3_export_ibpsa_models.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e3_export_ibpsa_models",
            "obj": "",
            "line": 12,
            "column": 0,
            "path": "teaser/examples/e3_export_ibpsa_models.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"import teaser.examples.e1_generate_archetype as e1\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e4_save",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "teaser/examples/e4_save.py",
            "symbol": "line-too-long",
            "message": "Line too long (137/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e4_save",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/e4_save.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e4_save",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "teaser/examples/e4_save.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e4_save",
            "obj": "example_save",
            "line": 35,
            "column": 4,
            "path": "teaser/examples/e4_save.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (pickle)",
            "message-id": "C0415"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e4_save",
            "obj": "example_save",
            "line": 39,
            "column": 21,
            "path": "teaser/examples/e4_save.py",
            "symbol": "consider-using-with",
            "message": "Consider using 'with' for resource-allocating operations",
            "message-id": "R1732"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e4_save",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "teaser/examples/e4_save.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"import teaser.examples.e1_generate_archetype as e1\"",
            "message-id": "C0411"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "",
            "line": 32,
            "column": 0,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 37,
            "column": 0,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (30/15)",
            "message-id": "R0914"
        },
        {
            "type": "warning",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 53,
            "column": 16,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 75,
            "column": 12,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.buildingphysics.interzonalceiling.InterzonalCeiling)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 114,
            "column": 12,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.buildingphysics.interzonalfloor.InterzonalFloor)",
            "message-id": "C0415"
        },
        {
            "type": "warning",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 150,
            "column": 16,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 158,
            "column": 16,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 161,
            "column": 20,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"el\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 174,
            "column": 20,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"el\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 184,
            "column": 20,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"el\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 187,
            "column": 20,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"el\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 191,
            "column": 12,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 194,
            "column": 16,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"el\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 196,
            "column": 16,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"el\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 198,
            "column": 16,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"el\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 207,
            "column": 16,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"el\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 244,
            "column": 18,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 246,
            "column": 15,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "consider-using-in",
            "message": "Consider merging these comparisons with 'in' by using 'tzno in (0, 1)'. Use a set instead if elements are hashable.",
            "message-id": "R1714"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 253,
            "column": 20,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"iw\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 260,
            "column": 19,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"iw\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 263,
            "column": 19,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"iw\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 266,
            "column": 19,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"iw\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 295,
            "column": 12,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 303,
            "column": 16,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"el\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 37,
            "column": 0,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (34/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_single_building",
            "line": 37,
            "column": 0,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (128/50)",
            "message-id": "R0915"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_ashrae_960",
            "line": 333,
            "column": 0,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (36/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_ashrae_960",
            "line": 404,
            "column": 4,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ks\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_ashrae_960",
            "line": 429,
            "column": 8,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ks\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_ashrae_960",
            "line": 460,
            "column": 8,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ks\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_ashrae_960",
            "line": 496,
            "column": 4,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ks\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_ashrae_960",
            "line": 521,
            "column": 8,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ks\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_ashrae_960",
            "line": 552,
            "column": 8,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ks\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_ashrae_960",
            "line": 333,
            "column": 0,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (13/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_ashrae_960",
            "line": 333,
            "column": 0,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (235/50)",
            "message-id": "R0915"
        },
        {
            "type": "warning",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "example_interzonal_ashrae_960",
            "line": 644,
            "column": 4,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'export_path'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "",
            "line": 33,
            "column": 0,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"from teaser.project import Project\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
            "obj": "",
            "line": 34,
            "column": 0,
            "path": "teaser/examples/e12_include_adjacent_zones_and_varying_soil_temps.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import shutil\" should be placed before \"from teaser.project import Project\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e10_adjust_schedules",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/e10_adjust_schedules.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "warning",
            "module": "teaser.examples.e10_adjust_schedules",
            "obj": "example_adjust_schedules",
            "line": 15,
            "column": 4,
            "path": "teaser/examples/e10_adjust_schedules.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'prj' from outer scope (line 65)",
            "message-id": "W0621"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e10_adjust_schedules",
            "obj": "example_adjust_schedules",
            "line": 29,
            "column": 4,
            "path": "teaser/examples/e10_adjust_schedules.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "",
            "line": 273,
            "column": 0,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "line-too-long",
            "message": "Line too long (111/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "",
            "line": 298,
            "column": 0,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "line-too-long",
            "message": "Line too long (112/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "",
            "line": 300,
            "column": 0,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "line-too-long",
            "message": "Line too long (103/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "",
            "line": 302,
            "column": 0,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "line-too-long",
            "message": "Line too long (111/100)",
            "message-id": "C0301"
        },
        {
            "type": "error",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "",
            "line": 62,
            "column": 0,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "",
            "line": 63,
            "column": 0,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_data",
            "line": 93,
            "column": 7,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "unidiomatic-typecheck",
            "message": "Use isinstance() rather than type() for a typecheck.",
            "message-id": "C0123"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_data.<lambda>",
            "line": 104,
            "column": 48,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "unidiomatic-typecheck",
            "message": "Use isinstance() rather than type() for a typecheck.",
            "message-id": "C0123"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "get_list_of_present_entries",
            "line": 127,
            "column": 4,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "invalid-name",
            "message": "Variable name \"_List\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "zoning_example",
            "line": 199,
            "column": 16,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "zoning_example",
            "line": 220,
            "column": 16,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "zoning_example",
            "line": 138,
            "column": 0,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (14/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_building_from_excel",
            "line": 269,
            "column": 0,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (35/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_building_from_excel.warn_constructiontype",
            "line": 298,
            "column": 16,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_building_from_excel",
            "line": 351,
            "column": 10,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_building_from_excel",
            "line": 358,
            "column": 10,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_building_from_excel",
            "line": 367,
            "column": 8,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_building_from_excel",
            "line": 414,
            "column": 20,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_building_from_excel",
            "line": 455,
            "column": 20,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_building_from_excel",
            "line": 505,
            "column": 20,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_building_from_excel",
            "line": 554,
            "column": 20,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_building_from_excel",
            "line": 582,
            "column": 20,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_building_from_excel",
            "line": 598,
            "column": 8,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "consider-using-dict-items",
            "message": "Consider iterating with .items()",
            "message-id": "C0206"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_building_from_excel",
            "line": 605,
            "column": 16,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_building_from_excel",
            "line": 269,
            "column": 0,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (28/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "import_building_from_excel",
            "line": 269,
            "column": 0,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (123/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e9_building_data_import_from_excel",
            "obj": "",
            "line": 652,
            "column": 10,
            "path": "teaser/examples/e9_building_data_import_from_excel.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e1_generate_archetype",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "teaser/examples/e1_generate_archetype.py",
            "symbol": "line-too-long",
            "message": "Line too long (137/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e1_generate_archetype",
            "obj": "",
            "line": 17,
            "column": 0,
            "path": "teaser/examples/e1_generate_archetype.py",
            "symbol": "line-too-long",
            "message": "Line too long (117/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e1_generate_archetype",
            "obj": "",
            "line": 80,
            "column": 0,
            "path": "teaser/examples/e1_generate_archetype.py",
            "symbol": "line-too-long",
            "message": "Line too long (109/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e1_generate_archetype",
            "obj": "",
            "line": 81,
            "column": 0,
            "path": "teaser/examples/e1_generate_archetype.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e1_generate_archetype",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/e1_generate_archetype.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "warning",
            "module": "teaser.examples.e1_generate_archetype",
            "obj": "example_generate_archetype",
            "line": 19,
            "column": 4,
            "path": "teaser/examples/e1_generate_archetype.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'prj' from outer scope (line 115)",
            "message-id": "W0621"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e1_generate_archetype",
            "obj": "example_generate_archetype",
            "line": 14,
            "column": 4,
            "path": "teaser/examples/e1_generate_archetype.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.project.Project)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "",
            "line": 11,
            "column": 0,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "line-too-long",
            "message": "Line too long (102/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "",
            "line": 81,
            "column": 0,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "line-too-long",
            "message": "Line too long (113/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "",
            "line": 97,
            "column": 0,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "line-too-long",
            "message": "Line too long (111/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "",
            "line": 109,
            "column": 0,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "line-too-long",
            "message": "Line too long (118/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "",
            "line": 140,
            "column": 0,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "line-too-long",
            "message": "Line too long (114/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "",
            "line": 165,
            "column": 0,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "line-too-long",
            "message": "Line too long (111/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "",
            "line": 173,
            "column": 0,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "line-too-long",
            "message": "Line too long (118/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "",
            "line": 184,
            "column": 0,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "line-too-long",
            "message": "Line too long (116/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "",
            "line": 192,
            "column": 0,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "line-too-long",
            "message": "Line too long (110/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "",
            "line": 193,
            "column": 0,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "",
            "line": 14,
            "column": 0,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "example_export_besmod",
            "line": 48,
            "column": 4,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "invalid-name",
            "message": "Variable name \"THydSup_nominal\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "example_export_besmod",
            "line": 51,
            "column": 4,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "invalid-name",
            "message": "Variable name \"THydSup_nominal\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "example_export_besmod",
            "line": 68,
            "column": 4,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "invalid-name",
            "message": "Variable name \"THydSup_nominal\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "example_export_besmod",
            "line": 110,
            "column": 4,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "invalid-name",
            "message": "Variable name \"QBuiOld_flow_design\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e11_export_besmod_models",
            "obj": "",
            "line": 15,
            "column": 0,
            "path": "teaser/examples/e11_export_besmod_models.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"import teaser.examples.e1_generate_archetype as e1\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e2_export_aixlib_models",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "teaser/examples/e2_export_aixlib_models.py",
            "symbol": "line-too-long",
            "message": "Line too long (137/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e2_export_aixlib_models",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/e2_export_aixlib_models.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.e2_export_aixlib_models",
            "obj": "",
            "line": 12,
            "column": 0,
            "path": "teaser/examples/e2_export_aixlib_models.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.examples.e2_export_aixlib_models",
            "obj": "",
            "line": 13,
            "column": 0,
            "path": "teaser/examples/e2_export_aixlib_models.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"import teaser.examples.e1_generate_archetype as e1\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_VDI_6007_room1",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/verification/verification_VDI_6007_room1.py",
            "symbol": "invalid-name",
            "message": "Module name \"verification_VDI_6007_room1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_VDI_6007_room1",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "teaser/examples/verification/verification_VDI_6007_room1.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_VDI_6007_room1",
            "obj": "parameter_room1",
            "line": 10,
            "column": 0,
            "path": "teaser/examples/verification/verification_VDI_6007_room1.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.examples.verification.verification_VDI_6007_room1",
            "obj": "parameter_room1",
            "line": 12,
            "column": 4,
            "path": "teaser/examples/verification/verification_VDI_6007_room1.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'prj' from outer scope (line 27)",
            "message-id": "W0621"
        },
        {
            "type": "warning",
            "module": "teaser.examples.verification.verification_VDI_6007_room1",
            "obj": "",
            "line": 44,
            "column": 4,
            "path": "teaser/examples/verification/verification_VDI_6007_room1.py",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "message-id": "W0105"
        },
        {
            "type": "warning",
            "module": "teaser.examples.verification.verification_VDI_6007_room1",
            "obj": "",
            "line": 60,
            "column": 0,
            "path": "teaser/examples/verification/verification_VDI_6007_room1.py",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "message-id": "W1404"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_ASHRAE_140_600",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_600.py",
            "symbol": "invalid-name",
            "message": "Module name \"verification_ASHRAE_140_600\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_ASHRAE_140_600",
            "obj": "",
            "line": 23,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_600.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_ASHRAE_140_600",
            "obj": "main",
            "line": 26,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_600.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_ASHRAE_140_600",
            "obj": "from_scratch",
            "line": 45,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_600.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (55/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_ASHRAE_140_600",
            "obj": "from_scratch",
            "line": 74,
            "column": 4,
            "path": "teaser/examples/verification/verification_ASHRAE_140_600.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_ASHRAE_140_600",
            "obj": "from_scratch",
            "line": 45,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_600.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (253/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_VDI_6007_room3",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/verification/verification_VDI_6007_room3.py",
            "symbol": "invalid-name",
            "message": "Module name \"verification_VDI_6007_room3\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_VDI_6007_room3",
            "obj": "",
            "line": 10,
            "column": 0,
            "path": "teaser/examples/verification/verification_VDI_6007_room3.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_VDI_6007_room3",
            "obj": "parameter_room3",
            "line": 13,
            "column": 0,
            "path": "teaser/examples/verification/verification_VDI_6007_room3.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.examples.verification.verification_VDI_6007_room3",
            "obj": "parameter_room3",
            "line": 15,
            "column": 4,
            "path": "teaser/examples/verification/verification_VDI_6007_room3.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'prj' from outer scope (line 30)",
            "message-id": "W0621"
        },
        {
            "type": "warning",
            "module": "teaser.examples.verification.verification_VDI_6007_room3",
            "obj": "",
            "line": 46,
            "column": 4,
            "path": "teaser/examples/verification/verification_VDI_6007_room3.py",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "message-id": "W0105"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_ASHRAE_140_620",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_620.py",
            "symbol": "invalid-name",
            "message": "Module name \"verification_ASHRAE_140_620\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_ASHRAE_140_620",
            "obj": "",
            "line": 24,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_620.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_ASHRAE_140_620",
            "obj": "main",
            "line": 27,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_620.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_ASHRAE_140_620",
            "obj": "from_scratch",
            "line": 46,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_620.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (55/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_ASHRAE_140_620",
            "obj": "from_scratch",
            "line": 75,
            "column": 4,
            "path": "teaser/examples/verification/verification_ASHRAE_140_620.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_ASHRAE_140_620",
            "obj": "from_scratch",
            "line": 46,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_620.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (253/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_ASHRAE_140_900",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_900.py",
            "symbol": "invalid-name",
            "message": "Module name \"verification_ASHRAE_140_900\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_ASHRAE_140_900",
            "obj": "",
            "line": 23,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_900.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_ASHRAE_140_900",
            "obj": "main",
            "line": 26,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_900.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_ASHRAE_140_900",
            "obj": "from_scratch",
            "line": 45,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_900.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (55/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_ASHRAE_140_900",
            "obj": "from_scratch",
            "line": 74,
            "column": 4,
            "path": "teaser/examples/verification/verification_ASHRAE_140_900.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_ASHRAE_140_900",
            "obj": "from_scratch",
            "line": 45,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_900.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (253/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_VDI_6007_room8",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/verification/verification_VDI_6007_room8.py",
            "symbol": "invalid-name",
            "message": "Module name \"verification_VDI_6007_room8\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_VDI_6007_room8",
            "obj": "",
            "line": 10,
            "column": 0,
            "path": "teaser/examples/verification/verification_VDI_6007_room8.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_VDI_6007_room8",
            "obj": "parameter_room8",
            "line": 13,
            "column": 0,
            "path": "teaser/examples/verification/verification_VDI_6007_room8.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.examples.verification.verification_VDI_6007_room8",
            "obj": "parameter_room8",
            "line": 15,
            "column": 4,
            "path": "teaser/examples/verification/verification_VDI_6007_room8.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'prj' from outer scope (line 30)",
            "message-id": "W0621"
        },
        {
            "type": "warning",
            "module": "teaser.examples.verification.verification_VDI_6007_room8",
            "obj": "",
            "line": 46,
            "column": 4,
            "path": "teaser/examples/verification/verification_VDI_6007_room8.py",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "message-id": "W0105"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_ASHRAE_140_920",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_920.py",
            "symbol": "invalid-name",
            "message": "Module name \"verification_ASHRAE_140_920\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_ASHRAE_140_920",
            "obj": "",
            "line": 23,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_920.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_ASHRAE_140_920",
            "obj": "main",
            "line": 26,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_920.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_ASHRAE_140_920",
            "obj": "from_scratch",
            "line": 45,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_920.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (55/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "teaser.examples.verification.verification_ASHRAE_140_920",
            "obj": "from_scratch",
            "line": 74,
            "column": 4,
            "path": "teaser/examples/verification/verification_ASHRAE_140_920.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.examples.verification.verification_ASHRAE_140_920",
            "obj": "from_scratch",
            "line": 45,
            "column": 0,
            "path": "teaser/examples/verification/verification_ASHRAE_140_920.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (253/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.logic.retrofit",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/retrofit.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.retrofit",
            "obj": "generate_buildings_for_all_element_combinations",
            "line": 80,
            "column": 8,
            "path": "teaser/logic/retrofit.py",
            "symbol": "unnecessary-comprehension",
            "message": "Unnecessary use of a comprehension, use dict(zip(elements, combo)) instead.",
            "message-id": "R1721"
        },
        {
            "type": "convention",
            "module": "teaser.logic.utilities",
            "obj": "",
            "line": 35,
            "column": 0,
            "path": "teaser/logic/utilities.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after 'if' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "teaser.logic.utilities",
            "obj": "celsius_to_kelvin",
            "line": 15,
            "column": 0,
            "path": "teaser/logic/utilities.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.utilities",
            "obj": "create_path",
            "line": 35,
            "column": 4,
            "path": "teaser/logic/utilities.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
            "message-id": "R1705"
        },
        {
            "type": "convention",
            "module": "teaser.logic.utilities",
            "obj": "division_from_json",
            "line": 126,
            "column": 12,
            "path": "teaser/logic/utilities.py",
            "symbol": "invalid-name",
            "message": "Variable name \"op\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.utilities",
            "obj": "division_from_json",
            "line": 127,
            "column": 12,
            "path": "teaser/logic/utilities.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
            "message-id": "R1705"
        },
        {
            "type": "warning",
            "module": "teaser.logic.utilities",
            "obj": "division_from_json",
            "line": 131,
            "column": 16,
            "path": "teaser/logic/utilities.py",
            "symbol": "raising-format-tuple",
            "message": "Exception arguments suggest string formatting might be intended",
            "message-id": "W0715"
        },
        {
            "type": "warning",
            "module": "teaser.logic.utilities",
            "obj": "division_from_json",
            "line": 133,
            "column": 8,
            "path": "teaser/logic/utilities.py",
            "symbol": "raising-format-tuple",
            "message": "Exception arguments suggest string formatting might be intended",
            "message-id": "W0715"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.nonresidential",
            "obj": "",
            "line": 47,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/nonresidential.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.nonresidential",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/nonresidential.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.nonresidential",
            "obj": "NonResidential.__init__",
            "line": 127,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/nonresidential.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (8/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.nonresidential",
            "obj": "NonResidential.__init__",
            "line": 140,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/nonresidential.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "warning",
            "module": "teaser.logic.archetypebuildings.nonresidential",
            "obj": "NonResidential.generate_archetype",
            "line": 158,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/nonresidential.py",
            "symbol": "unnecessary-pass",
            "message": "Unnecessary pass statement",
            "message-id": "W0107"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.residential",
            "obj": "",
            "line": 47,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/residential.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.residential",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/residential.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.residential",
            "obj": "Residential.__init__",
            "line": 127,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/residential.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (8/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.residential",
            "obj": "Residential.__init__",
            "line": 140,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/residential.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "warning",
            "module": "teaser.logic.archetypebuildings.residential",
            "obj": "Residential.generate_archetype",
            "line": 158,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/residential.py",
            "symbol": "unnecessary-pass",
            "message": "Unnecessary pass statement",
            "message-id": "W0107"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est8a",
            "obj": "",
            "line": 47,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est8a.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est8a",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est8a.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est8a",
            "obj": "EST8a.__init__",
            "line": 79,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est8a.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (13/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est8a",
            "obj": "EST8a.__init__",
            "line": 95,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est8a.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1b",
            "obj": "",
            "line": 47,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1b.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1b",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1b.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1b",
            "obj": "EST1b.__init__",
            "line": 79,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1b.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (13/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1b",
            "obj": "EST1b.__init__",
            "line": 97,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1b.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est4b",
            "obj": "",
            "line": 47,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est4b.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est4b",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est4b.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est4b",
            "obj": "EST4b.__init__",
            "line": 79,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est4b.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (13/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est4b",
            "obj": "EST4b.__init__",
            "line": 97,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est4b.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est7",
            "obj": "",
            "line": 47,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est7.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est7",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est7.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est7",
            "obj": "EST7.__init__",
            "line": 79,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est7.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (13/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est7",
            "obj": "EST7.__init__",
            "line": 95,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est7.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est4a",
            "obj": "",
            "line": 47,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est4a.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est4a",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est4a.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est4a",
            "obj": "EST4a.__init__",
            "line": 79,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est4a.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (13/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est4a",
            "obj": "EST4a.__init__",
            "line": 95,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est4a.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est8b",
            "obj": "",
            "line": 47,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est8b.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est8b",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est8b.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est8b",
            "obj": "EST8b.__init__",
            "line": 79,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est8b.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (13/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est8b",
            "obj": "EST8b.__init__",
            "line": 95,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est8b.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est5",
            "obj": "",
            "line": 47,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est5.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est5",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est5.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est5",
            "obj": "EST5.__init__",
            "line": 79,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est5.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (13/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est5",
            "obj": "EST5.__init__",
            "line": 97,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est5.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est3",
            "obj": "",
            "line": 47,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est3.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est3",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est3.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est3",
            "obj": "EST3.__init__",
            "line": 79,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est3.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (13/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est3",
            "obj": "EST3.__init__",
            "line": 97,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est3.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est2",
            "obj": "",
            "line": 47,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est2.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est2",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est2.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est2",
            "obj": "EST2.__init__",
            "line": 79,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est2.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (13/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est2",
            "obj": "EST2.__init__",
            "line": 97,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est2.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "",
            "line": 60,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "",
            "line": 223,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "",
            "line": 226,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a",
            "line": 19,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (27/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.__init__",
            "line": 134,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (12/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.__init__",
            "line": 151,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.generate_archetype",
            "line": 287,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "warning",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.generate_archetype",
            "line": 308,
            "column": 12,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "message-id": "W0105"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.generate_archetype",
            "line": 312,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.generate_archetype",
            "line": 326,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.generate_archetype",
            "line": 338,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.generate_archetype",
            "line": 348,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.generate_archetype",
            "line": 361,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.generate_archetype",
            "line": 372,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.generate_archetype",
            "line": 388,
            "column": 20,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.generate_archetype",
            "line": 231,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (26/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.generate_archetype",
            "line": 231,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (75/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.construction_data",
            "line": 393,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.neighbour_buildings",
            "line": 401,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est1a",
            "obj": "EST1a.number_of_apartments",
            "line": 412,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est1a.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est6",
            "obj": "",
            "line": 47,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est6.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est6",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est6.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est6",
            "obj": "EST6.__init__",
            "line": 79,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est6.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (13/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.urbanrenet.est6",
            "obj": "EST6.__init__",
            "line": 97,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/urbanrenet/est6.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling",
            "line": 16,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (50/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.__init__",
            "line": 185,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (16/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.__init__",
            "line": 185,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (16/15)",
            "message-id": "R0914"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.__init__",
            "line": 206,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.__init__",
            "line": 185,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (16/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.__init__",
            "line": 185,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (88/50)",
            "message-id": "R0915"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.generate_archetype",
            "line": 436,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "warning",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.generate_archetype",
            "line": 458,
            "column": 12,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "message-id": "W0105"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.generate_archetype",
            "line": 462,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.generate_archetype",
            "line": 482,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.generate_archetype",
            "line": 497,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.generate_archetype",
            "line": 510,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.generate_archetype",
            "line": 526,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.generate_archetype",
            "line": 540,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.generate_archetype",
            "line": 559,
            "column": 20,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.generate_archetype",
            "line": 349,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (27/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.generate_archetype",
            "line": 349,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (84/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.residential_layout",
            "line": 564,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.neighbour_buildings",
            "line": 575,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.attic",
            "line": 586,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.cellar",
            "line": 597,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.dormer",
            "line": 608,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.construction_data",
            "line": 619,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.generate_archetype",
            "line": 379,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute '_top_floor_area' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
            "obj": "SingleFamilyDwelling.generate_archetype",
            "line": 384,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/bmvbs/singlefamilydwelling.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute '_est_facade_area' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "",
            "line": 86,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office",
            "line": 20,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (33/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.__init__",
            "line": 177,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (13/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.__init__",
            "line": 194,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.__init__",
            "line": 286,
            "column": 11,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "consider-using-in",
            "message": "Consider merging these comparisons with 'in' by using 'self.office_layout in (0, 1)'. Use a set instead if elements are hashable.",
            "message-id": "R1714"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.__init__",
            "line": 177,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (65/50)",
            "message-id": "R0915"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.generate_archetype",
            "line": 385,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "warning",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.generate_archetype",
            "line": 411,
            "column": 12,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "pointless-string-statement",
            "message": "String statement has no effect",
            "message-id": "W0105"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.generate_archetype",
            "line": 415,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "warning",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "",
            "line": 419,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "message-id": "W1404"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.generate_archetype",
            "line": 430,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.generate_archetype",
            "line": 445,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.generate_archetype",
            "line": 458,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.generate_archetype",
            "line": 473,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.generate_archetype",
            "line": 487,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.generate_archetype",
            "line": 505,
            "column": 20,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.generate_archetype",
            "line": 318,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (28/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.generate_archetype",
            "line": 318,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (81/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.office_layout",
            "line": 510,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.window_layout",
            "line": 521,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.office",
            "obj": "Office.construction_data",
            "line": 532,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/office.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.custom.institute8",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/bmvbs/custom/institute8.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.custom.institute8",
            "obj": "Institute8.__init__",
            "line": 158,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/custom/institute8.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (13/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.custom.institute8",
            "obj": "Institute8.__init__",
            "line": 177,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/bmvbs/custom/institute8.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.custom.institute4",
            "obj": "",
            "line": 68,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/bmvbs/custom/institute4.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.custom.institute4",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/bmvbs/custom/institute4.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.custom.institute4",
            "obj": "Institute4.__init__",
            "line": 158,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/custom/institute4.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (13/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.custom.institute4",
            "obj": "Institute4.__init__",
            "line": 177,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/bmvbs/custom/institute4.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.custom.institute",
            "obj": "",
            "line": 67,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/bmvbs/custom/institute.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.bmvbs.custom.institute",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/bmvbs/custom/institute.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.custom.institute",
            "obj": "Institute.__init__",
            "line": 156,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/bmvbs/custom/institute.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (13/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.bmvbs.custom.institute",
            "obj": "Institute.__init__",
            "line": 177,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/bmvbs/custom/institute.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.terracedhouse",
            "obj": "",
            "line": 59,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/terracedhouse.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.terracedhouse",
            "obj": "",
            "line": 279,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/terracedhouse.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.terracedhouse",
            "obj": "",
            "line": 280,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/terracedhouse.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.terracedhouse",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/terracedhouse.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.de.terracedhouse",
            "obj": "TerracedHouse",
            "line": 8,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/terracedhouse.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (20/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.de.terracedhouse",
            "obj": "TerracedHouse.__init__",
            "line": 88,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/tabula/de/terracedhouse.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (11/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.de.terracedhouse",
            "obj": "TerracedHouse.__init__",
            "line": 101,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/tabula/de/terracedhouse.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.multifamilyhouse",
            "obj": "",
            "line": 60,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/multifamilyhouse.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.multifamilyhouse",
            "obj": "",
            "line": 300,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/multifamilyhouse.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.multifamilyhouse",
            "obj": "",
            "line": 301,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/multifamilyhouse.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.multifamilyhouse",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/multifamilyhouse.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.de.multifamilyhouse",
            "obj": "MultiFamilyHouse",
            "line": 8,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/multifamilyhouse.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (20/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.de.multifamilyhouse",
            "obj": "MultiFamilyHouse.__init__",
            "line": 91,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/tabula/de/multifamilyhouse.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (11/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.de.multifamilyhouse",
            "obj": "MultiFamilyHouse.__init__",
            "line": 104,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/tabula/de/multifamilyhouse.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "",
            "line": 88,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse",
            "line": 17,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (24/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.__init__",
            "line": 117,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (11/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.__init__",
            "line": 131,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "warning",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "",
            "line": 367,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "message-id": "W1404"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 402,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 419,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 436,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 458,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 481,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 482,
            "column": 20,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "invalid-name",
            "message": "Variable name \"gf\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 499,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 500,
            "column": 20,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "invalid-name",
            "message": "Variable name \"gf\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 517,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 518,
            "column": 20,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "invalid-name",
            "message": "Variable name \"rt\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 535,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 536,
            "column": 20,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "invalid-name",
            "message": "Variable name \"rt\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 553,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 570,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 592,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 612,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 630,
            "column": 20,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 370,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (44/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 370,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (112/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
            "obj": "SingleFamilyHouse.construction_data",
            "line": 635,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/tabula/de/singlefamilyhouse.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.apartmentblock",
            "obj": "",
            "line": 60,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/apartmentblock.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.apartmentblock",
            "obj": "",
            "line": 228,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/apartmentblock.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.apartmentblock",
            "obj": "",
            "line": 229,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/apartmentblock.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.de.apartmentblock",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/apartmentblock.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.de.apartmentblock",
            "obj": "ApartmentBlock",
            "line": 8,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/de/apartmentblock.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (20/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.de.apartmentblock",
            "obj": "ApartmentBlock.__init__",
            "line": 89,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/tabula/de/apartmentblock.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (11/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.de.apartmentblock",
            "obj": "ApartmentBlock.__init__",
            "line": 102,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/tabula/de/apartmentblock.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.terracedhouse",
            "obj": "",
            "line": 59,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/dk/terracedhouse.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.terracedhouse",
            "obj": "",
            "line": 259,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/dk/terracedhouse.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.terracedhouse",
            "obj": "",
            "line": 260,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/dk/terracedhouse.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.terracedhouse",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/dk/terracedhouse.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.dk.terracedhouse",
            "obj": "TerracedHouse",
            "line": 8,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/dk/terracedhouse.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (20/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.dk.terracedhouse",
            "obj": "TerracedHouse.__init__",
            "line": 88,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/tabula/dk/terracedhouse.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (11/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.dk.terracedhouse",
            "obj": "TerracedHouse.__init__",
            "line": 101,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/tabula/dk/terracedhouse.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "",
            "line": 89,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse",
            "line": 18,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (23/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.__init__",
            "line": 118,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (11/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.__init__",
            "line": 132,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "warning",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "",
            "line": 329,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "message-id": "W1404"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 366,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 383,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 400,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 417,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 435,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 436,
            "column": 20,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "invalid-name",
            "message": "Variable name \"gf\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 453,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 454,
            "column": 20,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "invalid-name",
            "message": "Variable name \"gf\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 471,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 472,
            "column": 20,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "invalid-name",
            "message": "Variable name \"rt\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 489,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 490,
            "column": 20,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "invalid-name",
            "message": "Variable name \"rt\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 507,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 524,
            "column": 24,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 539,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 552,
            "column": 28,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 563,
            "column": 20,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.thermal_zones is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 332,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (38/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.generate_archetype",
            "line": 332,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (103/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
            "obj": "SingleFamilyHouse.construction_data",
            "line": 568,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/tabula/dk/singlefamilyhouse.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.apartmentblock",
            "obj": "",
            "line": 60,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/dk/apartmentblock.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.apartmentblock",
            "obj": "",
            "line": 268,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/dk/apartmentblock.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.apartmentblock",
            "obj": "",
            "line": 269,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/dk/apartmentblock.py",
            "symbol": "superfluous-parens",
            "message": "Unnecessary parens after '=' keyword",
            "message-id": "C0325"
        },
        {
            "type": "convention",
            "module": "teaser.logic.archetypebuildings.tabula.dk.apartmentblock",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/dk/apartmentblock.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.dk.apartmentblock",
            "obj": "ApartmentBlock",
            "line": 8,
            "column": 0,
            "path": "teaser/logic/archetypebuildings/tabula/dk/apartmentblock.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (20/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.dk.apartmentblock",
            "obj": "ApartmentBlock.__init__",
            "line": 89,
            "column": 4,
            "path": "teaser/logic/archetypebuildings/tabula/dk/apartmentblock.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (11/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.archetypebuildings.tabula.dk.apartmentblock",
            "obj": "ApartmentBlock.__init__",
            "line": 102,
            "column": 8,
            "path": "teaser/logic/archetypebuildings/tabula/dk/apartmentblock.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.simulation.modelicainfo",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/simulation/modelicainfo.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.simulation.modelicainfo",
            "obj": "ModelicaInfo",
            "line": 5,
            "column": 0,
            "path": "teaser/logic/simulation/modelicainfo.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (10/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.simulation.modelicainfo",
            "obj": "ModelicaInfo",
            "line": 5,
            "column": 0,
            "path": "teaser/logic/simulation/modelicainfo.py",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (0/2)",
            "message-id": "R0903"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "",
            "line": 264,
            "column": 0,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "line-too-long",
            "message": "Line too long (179/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "",
            "line": 821,
            "column": 0,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "line-too-long",
            "message": "Line too long (122/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "",
            "line": 843,
            "column": 0,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "trailing-newlines",
            "message": "Trailing newlines",
            "message-id": "C0305"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "redefined-builtin",
            "message": "Redefining built-in 'ValueError'",
            "message-id": "W0622"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.data.input import usecond_input' instead",
            "message-id": "R0402"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "",
            "line": 10,
            "column": 0,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.data.output import usecond_output' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.__init__",
            "line": 252,
            "column": 8,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "invalid-name",
            "message": "Attribute name \"T_threshold_heating\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.__init__",
            "line": 253,
            "column": 8,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "invalid-name",
            "message": "Attribute name \"T_threshold_cooling\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions",
            "line": 14,
            "column": 0,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'UseConditions' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions",
            "line": 14,
            "column": 0,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (55/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.adjust_profile_by_opening",
            "line": 456,
            "column": 28,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "no-else-break",
            "message": "Unnecessary \"elif\" after \"break\", remove the leading \"el\" from \"elif\"",
            "message-id": "R1723"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.adjust_profile_by_opening",
            "line": 445,
            "column": 8,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "too-many-nested-blocks",
            "message": "Too many nested blocks (6/5)",
            "message-id": "R1702"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.load_use_conditions",
            "line": 533,
            "column": 12,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "self-assigning-variable",
            "message": "Assigning the same variable 'data_class' to itself",
            "message-id": "W0127"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.save_use_conditions",
            "line": 544,
            "column": 12,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "self-assigning-variable",
            "message": "Assigning the same variable 'data_class' to itself",
            "message-id": "W0127"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.is_periodic",
            "line": 561,
            "column": 8,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "simplifiable-if-statement",
            "message": "The if statement can be replaced with 'return bool(test)'",
            "message-id": "R1703"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.is_periodic",
            "line": 561,
            "column": 8,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
            "message-id": "R1705"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.persons",
            "line": 567,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.with_ideal_thresholds",
            "line": 578,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.heating_profile",
            "line": 586,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.cooling_profile",
            "line": 602,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.persons_profile",
            "line": 618,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.machines_profile",
            "line": 634,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.machines_profile",
            "line": 645,
            "column": 16,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.lighting_profile",
            "line": 650,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.lighting_profile",
            "line": 661,
            "column": 16,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.schedules",
            "line": 666,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.adjusted_opening_times",
            "line": 733,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.adjusted_opening_times",
            "line": 738,
            "column": 8,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "no-else-raise",
            "message": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
            "message-id": "R1720"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.set_back_times",
            "line": 749,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.set_back_times",
            "line": 754,
            "column": 8,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "no-else-raise",
            "message": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
            "message-id": "R1720"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.first_saturday_of_year",
            "line": 765,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.first_saturday_of_year",
            "line": 770,
            "column": 8,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "no-else-raise",
            "message": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
            "message-id": "R1720"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.parent",
            "line": 780,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.parent",
            "line": 793,
            "column": 12,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _use_conditions of a client class",
            "message-id": "W0212"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.use_maintained_illuminance",
            "line": 800,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.lighting_power",
            "line": 813,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions.infiltration_rate",
            "line": 827,
            "column": 4,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "UseConditions",
            "line": 14,
            "column": 0,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (21/20)",
            "message-id": "R0904"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from itertools import cycle, islice\" should be placed before \"import pandas as pd\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from collections import OrderedDict\" should be placed before \"import pandas as pd\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.useconditions",
            "obj": "",
            "line": 12,
            "column": 0,
            "path": "teaser/logic/buildingobjects/useconditions.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import warnings\" should be placed before \"import pandas as pd\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "",
            "line": 55,
            "column": 0,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building",
            "line": 17,
            "column": 0,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'Building' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building",
            "line": 17,
            "column": 0,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (48/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.__init__",
            "line": 152,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (8/5)",
            "message-id": "R0913"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.parent",
            "line": 563,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.name",
            "line": 588,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.year_of_construction",
            "line": 608,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.year_of_construction",
            "line": 623,
            "column": 16,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert year of construction to int\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.number_of_floors",
            "line": 626,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.number_of_floors",
            "line": 641,
            "column": 16,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert number of floors to int\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.height_of_floors",
            "line": 644,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.height_of_floors",
            "line": 659,
            "column": 16,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert height of floors to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.net_leased_area",
            "line": 662,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.net_leased_area",
            "line": 677,
            "column": 16,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert net leased area to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.thermal_zones",
            "line": 680,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.outer_area",
            "line": 690,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.window_area",
            "line": 698,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.year_of_retrofit",
            "line": 706,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.with_ahu",
            "line": 717,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.central_ahu",
            "line": 733,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.number_of_elements_calc",
            "line": 750,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.merge_windows_calc",
            "line": 769,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.used_library_calc",
            "line": 788,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building.inner_wall_approximation_approach",
            "line": 812,
            "column": 4,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.building",
            "obj": "Building",
            "line": 17,
            "column": 0,
            "path": "teaser/logic/buildingobjects/building.py",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (27/20)",
            "message-id": "R0904"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone",
            "line": 18,
            "column": 0,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'ThermalZone' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone",
            "line": 18,
            "column": 0,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (39/7)",
            "message-id": "R0902"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.delete",
            "line": 539,
            "column": 19,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.parent",
            "line": 591,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.parent",
            "line": 596,
            "column": 8,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.building.Building)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.parent",
            "line": 597,
            "column": 8,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (inspect)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.name",
            "line": 604,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.name",
            "line": 619,
            "column": 20,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "protected-access",
            "message": "Access to a protected member _name of a client class",
            "message-id": "W0212"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.outer_walls",
            "line": 631,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.doors",
            "line": 640,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.rooftops",
            "line": 649,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.ground_floors",
            "line": 658,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.ceilings",
            "line": 667,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.floors",
            "line": 676,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.inner_walls",
            "line": 685,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.interzonal_walls",
            "line": 695,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.interzonal_ceilings",
            "line": 705,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.interzonal_floors",
            "line": 715,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.interzonal_elements",
            "line": 725,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.windows",
            "line": 730,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.use_conditions",
            "line": 740,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.area",
            "line": 756,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.area",
            "line": 770,
            "column": 16,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert zone area to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.number_of_floors",
            "line": 786,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.number_of_floors",
            "line": 807,
            "column": 16,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except ValueError as exc' and 'raise ValueError(\"Can't convert zone number_of_floors to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.height_of_floors",
            "line": 812,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.height_of_floors",
            "line": 833,
            "column": 16,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except ValueError as exc' and 'raise ValueError(\"Can't convert zone height_of_floors to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.volume",
            "line": 838,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.volume",
            "line": 852,
            "column": 16,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except ValueError as exc' and 'raise ValueError(\"Can't convert zone volume to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.t_inside",
            "line": 866,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.t_inside",
            "line": 880,
            "column": 16,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert temperature to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.t_outside",
            "line": 883,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.t_outside",
            "line": 898,
            "column": 16,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert temperature to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.t_ground",
            "line": 901,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.t_ground",
            "line": 916,
            "column": 16,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert temperature to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.t_ground_amplitude",
            "line": 919,
            "column": 4,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.t_ground_amplitude",
            "line": 934,
            "column": 16,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert temperature to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.calc_zone_parameters",
            "line": 181,
            "column": 12,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'model_attr' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.calc_zone_parameters",
            "line": 188,
            "column": 12,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'model_attr' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.calc_zone_parameters",
            "line": 195,
            "column": 12,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'model_attr' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.calc_zone_parameters",
            "line": 202,
            "column": 12,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'model_attr' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone.calc_zone_parameters",
            "line": 210,
            "column": 12,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'model_attr' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.thermalzone",
            "obj": "ThermalZone",
            "line": 18,
            "column": 0,
            "path": "teaser/logic/buildingobjects/thermalzone.py",
            "symbol": "too-many-public-methods",
            "message": "Too many public methods (35/20)",
            "message-id": "R0904"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "",
            "line": 1034,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "line-too-long",
            "message": "Line too long (104/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (1812/1000)",
            "message-id": "C0302"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "",
            "line": 537,
            "column": 9,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "fixme",
            "message": "TODO: check this value",
            "message-id": "W0511"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "",
            "line": 1737,
            "column": 9,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "fixme",
            "message": "TODO: check this value",
            "message-id": "W0511"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'FourElement' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (123/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement.__init__",
            "line": 385,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (124/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement.calc_attributes",
            "line": 603,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"rt\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement.calc_attributes",
            "line": 606,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"gf\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement.calc_attributes",
            "line": 598,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (17/12)",
            "message-id": "R0912"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._calc_parallel_connection",
            "line": 753,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"r1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._calc_parallel_connection",
            "line": 763,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"c1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "",
            "line": 1322,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "message-id": "W1404"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._calc_wf",
            "line": 1387,
            "column": 16,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"rt\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._calc_wf",
            "line": 1398,
            "column": 16,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"rt\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1479,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(element.area for element in wall_nzb + wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1482,
            "column": 41,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(element.area for element in wall_nzb)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1492,
            "column": 44,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(wall.wf_out for wall in wall_nzb)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1494,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(wall.area for wall in wall_nzb)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1504,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.wf_out for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1507,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1508,
            "column": 50,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1512,
            "column": 50,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1514,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.shading_g_total * win.area / sum([w.area for w in wins]) for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1516,
            "column": 61,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(w.area for w in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1522,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.shading_max_irr * win.area / sum([w.area for w in wins]) for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1524,
            "column": 61,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(w.area for w in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1545,
            "column": 44,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(rt.wf_out for rt in rts)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1546,
            "column": 42,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(rt.area for rt in rts)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._fill_zone_lists",
            "line": 1450,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (14/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement.set_calc_default",
            "line": 1592,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (114/50)",
            "message-id": "R0915"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.four_element",
            "obj": "FourElement._sum_inner_wall_elements",
            "line": 1032,
            "column": 8,
            "path": "teaser/logic/buildingobjects/calculation/four_element.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'ir_emissivity_inner_iw' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (1091/1000)",
            "message-id": "C0302"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "",
            "line": 1037,
            "column": 9,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "fixme",
            "message": "TODO: check this value",
            "message-id": "W0511"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'OneElement' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (67/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement.__init__",
            "line": 236,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (66/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._calc_parallel_connection",
            "line": 445,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"r1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._calc_parallel_connection",
            "line": 455,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"c1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._fill_zone_lists",
            "line": 882,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"gf\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._fill_zone_lists",
            "line": 886,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(element.area for element in wall_rt_nzb + wins + gf)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._fill_zone_lists",
            "line": 890,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(element.area for element in wall_rt_nzb + gf)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._fill_zone_lists",
            "line": 904,
            "column": 25,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(element.area for element in gf)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._fill_zone_lists",
            "line": 907,
            "column": 44,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(wall.wf_out for wall in wall_rt_nzb)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._fill_zone_lists",
            "line": 909,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(wall.area for wall in wall_rt_nzb)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._fill_zone_lists",
            "line": 919,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.wf_out for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._fill_zone_lists",
            "line": 921,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._fill_zone_lists",
            "line": 922,
            "column": 50,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._fill_zone_lists",
            "line": 926,
            "column": 50,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._fill_zone_lists",
            "line": 928,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.shading_g_total * win.area / sum([w.area for w in wins]) for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._fill_zone_lists",
            "line": 930,
            "column": 61,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(w.area for w in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._fill_zone_lists",
            "line": 936,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.shading_max_irr * win.area / sum([w.area for w in wins]) for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._fill_zone_lists",
            "line": 938,
            "column": 61,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(w.area for w in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement.set_calc_default",
            "line": 991,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (58/50)",
            "message-id": "R0915"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement._sum_window_elements",
            "line": 592,
            "column": 8,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'r_total_win' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.one_element",
            "obj": "OneElement.set_calc_default",
            "line": 1038,
            "column": 8,
            "path": "teaser/logic/buildingobjects/calculation/one_element.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'r_rad_ow_iw' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (1483/1000)",
            "message-id": "C0302"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'ThreeElement' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (95/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement.__init__",
            "line": 311,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (96/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement.calc_attributes",
            "line": 487,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"gf\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement.calc_attributes",
            "line": 476,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (14/12)",
            "message-id": "R0912"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._calc_parallel_connection",
            "line": 619,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"r1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._calc_parallel_connection",
            "line": 629,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"c1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._fill_zone_lists",
            "line": 1213,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(element.area for element in wall_rt_nzb + wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._fill_zone_lists",
            "line": 1216,
            "column": 41,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(element.area for element in wall_rt_nzb)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._fill_zone_lists",
            "line": 1226,
            "column": 44,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(wall.wf_out for wall in wall_rt_nzb)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._fill_zone_lists",
            "line": 1228,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(wall.area for wall in wall_rt_nzb)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._fill_zone_lists",
            "line": 1238,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.wf_out for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._fill_zone_lists",
            "line": 1241,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._fill_zone_lists",
            "line": 1242,
            "column": 50,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._fill_zone_lists",
            "line": 1246,
            "column": 50,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._fill_zone_lists",
            "line": 1248,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.shading_g_total * win.area / sum([w.area for w in wins]) for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._fill_zone_lists",
            "line": 1250,
            "column": 61,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(w.area for w in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._fill_zone_lists",
            "line": 1256,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.shading_max_irr * win.area / sum([w.area for w in wins]) for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._fill_zone_lists",
            "line": 1258,
            "column": 61,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(w.area for w in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement.set_calc_default",
            "line": 1310,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (87/50)",
            "message-id": "R0915"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.three_element",
            "obj": "ThreeElement._sum_inner_wall_elements",
            "line": 818,
            "column": 8,
            "path": "teaser/logic/buildingobjects/calculation/three_element.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'ir_emissivity_inner_iw' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'AixLib' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (12/7)",
            "message-id": "R0902"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_set_temp",
            "line": 152,
            "column": 13,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_set_temp",
            "line": 152,
            "column": 32,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_set_temp",
            "line": 155,
            "column": 16,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_set_temp_cool",
            "line": 194,
            "column": 13,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_set_temp_cool",
            "line": 194,
            "column": 32,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_set_temp_cool",
            "line": 197,
            "column": 16,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_AHU_boundary",
            "line": 201,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "invalid-name",
            "message": "Method name \"modelica_AHU_boundary\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_AHU_boundary",
            "line": 254,
            "column": 13,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_AHU_boundary",
            "line": 254,
            "column": 32,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_AHU_boundary",
            "line": 256,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_gains_boundary",
            "line": 299,
            "column": 16,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_gains_boundary",
            "line": 302,
            "column": 16,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_gains_boundary",
            "line": 305,
            "column": 16,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_gains_boundary",
            "line": 310,
            "column": 13,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_gains_boundary",
            "line": 310,
            "column": 32,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "AixLib.modelica_gains_boundary",
            "line": 313,
            "column": 16,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from itertools import cycle, islice\" should be placed before \"import teaser.logic.utilities as utilities\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os\" should be placed before \"import teaser.logic.utilities as utilities\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.aixlib",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/aixlib.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"import pandas as pd\" should be placed before \"import teaser.logic.utilities as utilities\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (2054/1000)",
            "message-id": "C0302"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "",
            "line": 518,
            "column": 9,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "fixme",
            "message": "TODO: check this value",
            "message-id": "W0511"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "",
            "line": 1900,
            "column": 9,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "fixme",
            "message": "TODO: check this value",
            "message-id": "W0511"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement",
            "line": 10,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'FiveElement' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement",
            "line": 10,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (147/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement.__init__",
            "line": 367,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (151/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement.calc_attributes",
            "line": 634,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"rt\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement.calc_attributes",
            "line": 637,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"gf\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement.calc_attributes",
            "line": 628,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (20/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement.calc_attributes",
            "line": 628,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (52/50)",
            "message-id": "R0915"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._calc_parallel_connection",
            "line": 791,
            "column": 19,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-in",
            "message": "Consider merging these comparisons with 'in' by using 'mode in ('ow', 'izw_backwards')'. Use a set instead if elements are hashable.",
            "message-id": "R1714"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._calc_parallel_connection",
            "line": 802,
            "column": 15,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-in",
            "message": "Consider merging these comparisons with 'in' by using 'mode in ('ow', 'izw_backwards')'. Use a set instead if elements are hashable.",
            "message-id": "R1714"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._calc_parallel_connection",
            "line": 807,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"r1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._calc_parallel_connection",
            "line": 814,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"c1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "",
            "line": 1449,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in call",
            "message-id": "W1404"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._calc_interzonal_elements",
            "line": 1509,
            "column": 8,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'any_nzb'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._calc_wf",
            "line": 1559,
            "column": 16,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"rt\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._calc_wf",
            "line": 1570,
            "column": 16,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"rt\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1639,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(element.area for element in walls + wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1642,
            "column": 41,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(element.area for element in walls)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1651,
            "column": 44,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(wall.wf_out for wall in walls)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1652,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(wall.area for wall in walls)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1661,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.wf_out for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1664,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1665,
            "column": 50,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1669,
            "column": 50,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1671,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.shading_g_total * win.area / sum([w.area for w in wins]) for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1673,
            "column": 61,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(w.area for w in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1679,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.shading_max_irr * win.area / sum([w.area for w in wins]) for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1681,
            "column": 61,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(w.area for w in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1702,
            "column": 44,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(rt.wf_out for rt in rts)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1703,
            "column": 42,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(rt.area for rt in rts)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._fill_zone_lists",
            "line": 1618,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (14/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement.set_calc_default",
            "line": 1755,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (137/50)",
            "message-id": "R0915"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._sum_inner_wall_elements",
            "line": 1077,
            "column": 8,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'ir_emissivity_inner_iw' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._calc_heat_load",
            "line": 1739,
            "column": 8,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'heat_load_outside_factor' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "FiveElement._calc_heat_load",
            "line": 1748,
            "column": 8,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'heat_load_ground_factor' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "_lump_sum",
            "line": 2034,
            "column": 16,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "eval-used",
            "message": "Use of eval",
            "message-id": "W0123"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "_lump_sum",
            "line": 2034,
            "column": 21,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "_lump_inverse_sum",
            "line": 2053,
            "column": 24,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "eval-used",
            "message": "Use of eval",
            "message-id": "W0123"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "_lump_inverse_sum",
            "line": 2053,
            "column": 29,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import random\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.five_element",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/five_element.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import warnings\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.ibpsa",
            "obj": "",
            "line": 117,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/ibpsa.py",
            "symbol": "line-too-long",
            "message": "Line too long (101/100)",
            "message-id": "C0301"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.calculation.ibpsa",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/ibpsa.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.ibpsa",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/ibpsa.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.ibpsa",
            "obj": "IBPSA",
            "line": 8,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/ibpsa.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'IBPSA' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.ibpsa",
            "obj": "IBPSA.modelica_gains_boundary",
            "line": 92,
            "column": 15,
            "path": "teaser/logic/buildingobjects/calculation/ibpsa.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.ibpsa",
            "obj": "IBPSA.modelica_gains_boundary",
            "line": 99,
            "column": 15,
            "path": "teaser/logic/buildingobjects/calculation/ibpsa.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.ibpsa",
            "obj": "IBPSA.modelica_gains_boundary",
            "line": 106,
            "column": 15,
            "path": "teaser/logic/buildingobjects/calculation/ibpsa.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.ibpsa",
            "obj": "IBPSA.modelica_gains_boundary",
            "line": 115,
            "column": 13,
            "path": "teaser/logic/buildingobjects/calculation/ibpsa.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.ibpsa",
            "obj": "IBPSA.modelica_gains_boundary",
            "line": 115,
            "column": 32,
            "path": "teaser/logic/buildingobjects/calculation/ibpsa.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.ibpsa",
            "obj": "IBPSA",
            "line": 8,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/ibpsa.py",
            "symbol": "too-few-public-methods",
            "message": "Too few public methods (1/2)",
            "message-id": "R0903"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "too-many-lines",
            "message": "Too many lines in module (1350/1000)",
            "message-id": "C0302"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'TwoElement' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (83/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement.__init__",
            "line": 272,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (82/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._calc_parallel_connection",
            "line": 538,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"r1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._calc_parallel_connection",
            "line": 548,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"c1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._fill_zone_lists",
            "line": 1094,
            "column": 12,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "invalid-name",
            "message": "Variable name \"gf\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._fill_zone_lists",
            "line": 1098,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(element.area for element in wall_rt_nzb + wins + gf)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._fill_zone_lists",
            "line": 1102,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(element.area for element in wall_rt_nzb + gf)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._fill_zone_lists",
            "line": 1116,
            "column": 25,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(element.area for element in gf)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._fill_zone_lists",
            "line": 1119,
            "column": 44,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(wall.wf_out for wall in wall_rt_nzb)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._fill_zone_lists",
            "line": 1121,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(wall.area for wall in wall_rt_nzb)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._fill_zone_lists",
            "line": 1132,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.wf_out for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._fill_zone_lists",
            "line": 1135,
            "column": 45,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._fill_zone_lists",
            "line": 1136,
            "column": 50,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._fill_zone_lists",
            "line": 1140,
            "column": 50,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.area for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._fill_zone_lists",
            "line": 1143,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.shading_g_total * win.area / sum([w.area for w in wins]) for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._fill_zone_lists",
            "line": 1145,
            "column": 61,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(w.area for w in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._fill_zone_lists",
            "line": 1151,
            "column": 20,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(win.shading_max_irr * win.area / sum([w.area for w in wins]) for win in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._fill_zone_lists",
            "line": 1153,
            "column": 61,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "consider-using-generator",
            "message": "Consider using a generator instead 'sum(w.area for w in wins)'",
            "message-id": "R1728"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement.set_calc_default",
            "line": 1206,
            "column": 4,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (73/50)",
            "message-id": "R0915"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._sum_inner_wall_elements",
            "line": 724,
            "column": 8,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'ir_emissivity_inner_iw' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.calculation.two_element",
            "obj": "TwoElement._sum_window_elements",
            "line": 763,
            "column": 8,
            "path": "teaser/logic/buildingobjects/calculation/two_element.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'r_total_win' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "",
            "line": 592,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "missing-final-newline",
            "message": "Final newline missing",
            "message-id": "C0304"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "Wall",
            "line": 10,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (12/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "Wall.__init__",
            "line": 155,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "Wall.calc_equivalent_res",
            "line": 157,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (27/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "Wall.calc_equivalent_res",
            "line": 215,
            "column": 15,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "invalid-name",
            "message": "Variable name \"r\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "Wall.calc_equivalent_res",
            "line": 277,
            "column": 11,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "consider-using-in",
            "message": "Consider merging these comparisons with 'in' by using 'type(self).__name__ in ('OuterWall', 'Rooftop', 'GroundFloor')'. Use a set instead if elements are hashable.",
            "message-id": "R1714"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "Wall.calc_equivalent_res",
            "line": 157,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (54/50)",
            "message-id": "R0915"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "Wall.insulate_wall",
            "line": 282,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (6/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "Wall._interzonal_type_standard_value",
            "line": 464,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (20/12)",
            "message-id": "R0912"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "Wall.other_side",
            "line": 548,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "Wall.interzonal_type_material",
            "line": 564,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "Wall.interzonal_type_material",
            "line": 565,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
            "message-id": "R1705"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "Wall.interzonal_type_export",
            "line": 579,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "Wall.interzonal_type_export",
            "line": 580,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
            "message-id": "R1705"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "Wall.interzonal_type_export",
            "line": 586,
            "column": 15,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "undefined-variable",
            "message": "Undefined variable 'value'",
            "message-id": "E0602"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"import numpy as np\" should be placed before \"from teaser.logic.buildingobjects.buildingphysics.buildingelement import BuildingElement\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.wall",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/wall.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import warnings\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.ceiling",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/ceiling.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.ceiling",
            "obj": "Ceiling",
            "line": 8,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/ceiling.py",
            "symbol": "abstract-method",
            "message": "Method 'retrofit_wall' is abstract in class 'Wall' but is not overridden in child class 'Ceiling'",
            "message-id": "W0223"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.ceiling",
            "obj": "Ceiling.__init__",
            "line": 149,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/ceiling.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalfloor",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalfloor.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalfloor",
            "obj": "InterzonalFloor",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalfloor.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (10/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalfloor",
            "obj": "InterzonalFloor.__init__",
            "line": 152,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalfloor.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalfloor",
            "obj": "InterzonalFloor.retrofit_wall",
            "line": 184,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalfloor.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
            "message-id": "R1705"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.data.output import material_output' instead",
            "message-id": "R0402"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material",
            "line": 11,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'Material' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material",
            "line": 11,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (20/7)",
            "message-id": "R0902"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.load_material_template",
            "line": 93,
            "column": 12,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "self-assigning-variable",
            "message": "Assigning the same variable 'data_class' to itself",
            "message-id": "W0127"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.save_material_template",
            "line": 118,
            "column": 12,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "self-assigning-variable",
            "message": "Assigning the same variable 'data_class' to itself",
            "message-id": "W0127"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.modify_material_template",
            "line": 142,
            "column": 12,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "self-assigning-variable",
            "message": "Assigning the same variable 'data_class' to itself",
            "message-id": "W0127"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.modify_material_template",
            "line": 144,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "no-member",
            "message": "Module 'teaser.data.output.material_output' has no 'modify_material' member",
            "message-id": "E1101"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.material_id",
            "line": 147,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.parent",
            "line": 155,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.name",
            "line": 174,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.thermal_conduc",
            "line": 191,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.thermal_conduc",
            "line": 205,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert thermal conduction to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.density",
            "line": 220,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.density",
            "line": 235,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert density to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.heat_capac",
            "line": 238,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.heat_capac",
            "line": 253,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert heat capacity to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.solar_absorp",
            "line": 256,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.solar_absorp",
            "line": 271,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert solar absorption to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.ir_emissivity",
            "line": 274,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.ir_emissivity",
            "line": 289,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert emissivity to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.transmittance",
            "line": 292,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.transmittance",
            "line": 307,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert transmittance to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.thickness_default",
            "line": 310,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.thickness_default",
            "line": 324,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert thickness to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.thickness_list",
            "line": 327,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.material",
            "obj": "Material.thickness_list",
            "line": 347,
            "column": 24,
            "path": "teaser/logic/buildingobjects/buildingphysics/material.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert entry of thickness_list to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.door",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/door.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.door",
            "obj": "Door",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/door.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (11/7)",
            "message-id": "R0902"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "import-error",
            "message": "Unable to import 'numpy'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.__init__",
            "line": 139,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "invalid-name",
            "message": "Attribute name \"r1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.__init__",
            "line": 140,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "invalid-name",
            "message": "Attribute name \"r2\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.__init__",
            "line": 141,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "invalid-name",
            "message": "Attribute name \"r3\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.__init__",
            "line": 142,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "invalid-name",
            "message": "Attribute name \"c1\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.__init__",
            "line": 143,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "invalid-name",
            "message": "Attribute name \"c2\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement",
            "line": 12,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'BuildingElement' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement",
            "line": 12,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (34/7)",
            "message-id": "R0902"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.calc_ua_value",
            "line": 171,
            "column": 27,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "not-an-iterable",
            "message": "Non-iterable value self.layer is used in an iterating context",
            "message-id": "E1133"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.gather_element_properties",
            "line": 230,
            "column": 25,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "unsubscriptable-object",
            "message": "Value 'self.layer' is unsubscriptable",
            "message-id": "E1136"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.gather_element_properties",
            "line": 231,
            "column": 32,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "unsubscriptable-object",
            "message": "Value 'self.layer' is unsubscriptable",
            "message-id": "E1136"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.gather_element_properties",
            "line": 232,
            "column": 28,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "unsubscriptable-object",
            "message": "Value 'self.layer' is unsubscriptable",
            "message-id": "E1136"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.gather_element_properties",
            "line": 233,
            "column": 27,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "unsubscriptable-object",
            "message": "Value 'self.layer' is unsubscriptable",
            "message-id": "E1136"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.load_type_element",
            "line": 277,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (7/5)",
            "message-id": "R0913"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.load_type_element",
            "line": 328,
            "column": 12,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "self-assigning-variable",
            "message": "Assigning the same variable 'data_class' to itself",
            "message-id": "W0127"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.save_type_element",
            "line": 382,
            "column": 12,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "self-assigning-variable",
            "message": "Assigning the same variable 'data_class' to itself",
            "message-id": "W0127"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.save_type_element",
            "line": 384,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.data.output import buildingelement_output' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.save_type_element",
            "line": 384,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.data.output.buildingelement_output)",
            "message-id": "C0415"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.delete_type_element",
            "line": 415,
            "column": 12,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "self-assigning-variable",
            "message": "Assigning the same variable 'data_class' to itself",
            "message-id": "W0127"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.delete_type_element",
            "line": 417,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.data.output import buildingelement_output' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.delete_type_element",
            "line": 417,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.data.output.buildingelement_output)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.name",
            "line": 442,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.year_of_retrofit",
            "line": 466,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.year_of_retrofit",
            "line": 480,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert year of retrofit to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.orientation",
            "line": 489,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.layer",
            "line": 506,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.inner_convection",
            "line": 521,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.inner_convection",
            "line": 535,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert inner convection to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.inner_radiation",
            "line": 545,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.inner_radiation",
            "line": 559,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert inner radiation to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.outer_convection",
            "line": 569,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.outer_convection",
            "line": 583,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert outer convection to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.outer_radiation",
            "line": 593,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.outer_radiation",
            "line": 607,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert outer radiation to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.area",
            "line": 617,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.area",
            "line": 631,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert element area to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.area",
            "line": 635,
            "column": 11,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "consider-using-in",
            "message": "Consider merging these comparisons with 'in' by using 'type(self).__name__ in ('OuterWall', 'Rooftop', 'GroundFloor')'. Use a set instead if elements are hashable.",
            "message-id": "R1714"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.tilt",
            "line": 650,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.tilt",
            "line": 665,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert tilt to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.year_of_construction",
            "line": 668,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.year_of_construction",
            "line": 685,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert year to int\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.construction_data",
            "line": 688,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "BuildingElement.calc_ua_value",
            "line": 192,
            "column": 12,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "attribute-defined-outside-init",
            "message": "Attribute 'u_value' defined outside __init__",
            "message-id": "W0201"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"import numpy as np\" should be placed before \"from teaser.logic.buildingobjects.buildingphysics.layer import Layer\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import random\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.buildingelement",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/buildingelement.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import re\" should be placed before \"import numpy as np\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.groundfloor",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/groundfloor.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.groundfloor",
            "obj": "GroundFloor",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/groundfloor.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (14/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.groundfloor",
            "obj": "GroundFloor.__init__",
            "line": 148,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/groundfloor.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.groundfloor",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/groundfloor.py",
            "symbol": "unused-import",
            "message": "Unused import warnings",
            "message-id": "W0611"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalwall",
            "obj": "",
            "line": 337,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalwall.py",
            "symbol": "missing-final-newline",
            "message": "Final newline missing",
            "message-id": "C0304"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalwall",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalwall.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalwall",
            "obj": "InterzonalWall",
            "line": 11,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalwall.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (15/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalwall",
            "obj": "InterzonalWall.__init__",
            "line": 153,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalwall.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalwall",
            "obj": "InterzonalWall.load_type_element",
            "line": 161,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalwall.py",
            "symbol": "signature-differs",
            "message": "Signature differs from overridden 'load_type_element' method",
            "message-id": "W0222"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalwall",
            "obj": "InterzonalWall.load_type_element",
            "line": 161,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalwall.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (7/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalwall",
            "obj": "InterzonalWall.load_type_element",
            "line": 161,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalwall.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (16/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalwall",
            "obj": "InterzonalWall.retrofit_wall",
            "line": 276,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalwall.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
            "message-id": "R1705"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalwall",
            "obj": "InterzonalWall.parent",
            "line": 308,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalwall.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.layer",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/layer.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.layer",
            "obj": "Layer.__init__",
            "line": 39,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/layer.py",
            "symbol": "invalid-name",
            "message": "Attribute name \"id\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.layer",
            "obj": "Layer",
            "line": 8,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/layer.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'Layer' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.layer",
            "obj": "Layer",
            "line": 8,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/layer.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (8/7)",
            "message-id": "R0902"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.layer",
            "obj": "Layer.__init__",
            "line": 32,
            "column": 36,
            "path": "teaser/logic/buildingobjects/buildingphysics/layer.py",
            "symbol": "invalid-name",
            "message": "Argument name \"id\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.layer",
            "obj": "Layer.__init__",
            "line": 32,
            "column": 36,
            "path": "teaser/logic/buildingobjects/buildingphysics/layer.py",
            "symbol": "redefined-builtin",
            "message": "Redefining built-in 'id'",
            "message-id": "W0622"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.layer",
            "obj": "Layer.parent",
            "line": 44,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/layer.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.layer",
            "obj": "Layer.parent",
            "line": 50,
            "column": 11,
            "path": "teaser/logic/buildingobjects/buildingphysics/layer.py",
            "symbol": "unidiomatic-typecheck",
            "message": "Use isinstance() rather than type() for a typecheck.",
            "message-id": "C0123"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.layer",
            "obj": "Layer.parent",
            "line": 60,
            "column": 19,
            "path": "teaser/logic/buildingobjects/buildingphysics/layer.py",
            "symbol": "consider-using-in",
            "message": "Consider merging these comparisons with 'in' by using 'type(value).__name__ in ('OuterWall', 'Rooftop', 'GroundFloor', 'InnerWall', 'Ceiling', 'Floor', 'InterzonalWall', 'InterzonalCeiling', 'InterzonalFloor', 'Door', 'Window')'. Use a set instead if elements are hashable.",
            "message-id": "R1714"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.layer",
            "obj": "Layer.material",
            "line": 79,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/layer.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.layer",
            "obj": "Layer.thickness",
            "line": 91,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/layer.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.layer",
            "obj": "Layer.thickness",
            "line": 105,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/layer.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert thickness to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.buildingphysics.layer",
            "obj": "Layer.thickness",
            "line": 112,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/layer.py",
            "symbol": "no-member",
            "message": "Instance of 'tuple' has no 'calc_ua_value' member",
            "message-id": "E1101"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.window",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/window.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.window",
            "obj": "Window",
            "line": 10,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/window.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (26/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.window",
            "obj": "Window.__init__",
            "line": 161,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/window.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.window",
            "obj": "Window.calc_equivalent_res",
            "line": 184,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/window.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'number_of_layer'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.window",
            "obj": "Window.parent",
            "line": 226,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/window.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.window",
            "obj": "Window.g_value",
            "line": 254,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/window.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.window",
            "obj": "Window.g_value",
            "line": 269,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/window.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert g value to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.window",
            "obj": "Window.a_conv",
            "line": 272,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/window.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.window",
            "obj": "Window.a_conv",
            "line": 287,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/window.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert a conv to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.window",
            "obj": "Window.shading_g_total",
            "line": 290,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/window.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.window",
            "obj": "Window.shading_g_total",
            "line": 305,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/window.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert shaded g value to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.window",
            "obj": "Window.shading_max_irr",
            "line": 308,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/window.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.window",
            "obj": "Window.shading_max_irr",
            "line": 323,
            "column": 16,
            "path": "teaser/logic/buildingobjects/buildingphysics/window.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValueError(\"Can't convert max irradiation to float\") from exc'",
            "message-id": "W0707"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.window",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/window.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import warnings\" should be placed before \"from teaser.logic.buildingobjects.buildingphysics.buildingelement import BuildingElement\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.outerwall",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/outerwall.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.outerwall",
            "obj": "OuterWall",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/outerwall.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (15/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.outerwall",
            "obj": "OuterWall.__init__",
            "line": 148,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/outerwall.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.outerwall",
            "obj": "OuterWall.parent",
            "line": 157,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/outerwall.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.floor",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/floor.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.floor",
            "obj": "Floor",
            "line": 8,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/floor.py",
            "symbol": "abstract-method",
            "message": "Method 'retrofit_wall' is abstract in class 'Wall' but is not overridden in child class 'Floor'",
            "message-id": "W0223"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.floor",
            "obj": "Floor",
            "line": 8,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/floor.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (8/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.floor",
            "obj": "Floor.__init__",
            "line": 149,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/floor.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.rooftop",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/rooftop.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.rooftop",
            "obj": "Rooftop",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/rooftop.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (14/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.rooftop",
            "obj": "Rooftop.__init__",
            "line": 148,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/rooftop.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalceiling",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalceiling.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalceiling",
            "obj": "InterzonalCeiling",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalceiling.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (10/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalceiling",
            "obj": "InterzonalCeiling.__init__",
            "line": 153,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalceiling.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.interzonalceiling",
            "obj": "InterzonalCeiling.retrofit_wall",
            "line": 185,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/interzonalceiling.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
            "message-id": "R1705"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.innerwall",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/innerwall.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "warning",
            "module": "teaser.logic.buildingobjects.buildingphysics.innerwall",
            "obj": "InnerWall",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/innerwall.py",
            "symbol": "abstract-method",
            "message": "Method 'retrofit_wall' is abstract in class 'Wall' but is not overridden in child class 'InnerWall'",
            "message-id": "W0223"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.innerwall",
            "obj": "InnerWall",
            "line": 9,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingphysics/innerwall.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (11/7)",
            "message-id": "R0902"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingphysics.innerwall",
            "obj": "InnerWall.__init__",
            "line": 149,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingphysics/innerwall.py",
            "symbol": "super-with-arguments",
            "message": "Consider using Python 3 style super() without arguments",
            "message-id": "R1725"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingphysics.innerwall",
            "obj": "InnerWall.parent",
            "line": 158,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingphysics/innerwall.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "error",
            "module": "teaser.logic.buildingobjects.buildingsystems.buildingahu",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingsystems/buildingahu.py",
            "symbol": "import-error",
            "message": "Unable to import 'pandas'",
            "message-id": "E0401"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingsystems.buildingahu",
            "obj": "BuildingAHU",
            "line": 10,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingsystems/buildingahu.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'BuildingAHU' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "refactor",
            "module": "teaser.logic.buildingobjects.buildingsystems.buildingahu",
            "obj": "BuildingAHU",
            "line": 10,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingsystems/buildingahu.py",
            "symbol": "too-many-instance-attributes",
            "message": "Too many instance attributes (28/7)",
            "message-id": "R0902"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingsystems.buildingahu",
            "obj": "BuildingAHU.parent",
            "line": 128,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingsystems/buildingahu.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingsystems.buildingahu",
            "obj": "BuildingAHU.parent",
            "line": 133,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingsystems/buildingahu.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (teaser.logic.buildingobjects.building.Building)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingsystems.buildingahu",
            "obj": "BuildingAHU.parent",
            "line": 134,
            "column": 8,
            "path": "teaser/logic/buildingobjects/buildingsystems/buildingahu.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (inspect)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingsystems.buildingahu",
            "obj": "BuildingAHU.temperature_profile",
            "line": 141,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingsystems/buildingahu.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingsystems.buildingahu",
            "obj": "BuildingAHU.min_relative_humidity_profile",
            "line": 152,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingsystems/buildingahu.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingsystems.buildingahu",
            "obj": "BuildingAHU.max_relative_humidity_profile",
            "line": 165,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingsystems/buildingahu.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingsystems.buildingahu",
            "obj": "BuildingAHU.v_flow_profile",
            "line": 178,
            "column": 4,
            "path": "teaser/logic/buildingobjects/buildingsystems/buildingahu.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.logic.buildingobjects.buildingsystems.buildingahu",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "teaser/logic/buildingobjects/buildingsystems/buildingahu.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"from itertools import cycle, islice\" should be placed before \"import pandas as pd\"",
            "message-id": "C0411"
        },
        {
            "type": "warning",
            "module": "teaser.data.dataclass",
            "obj": "",
            "line": 16,
            "column": 8,
            "path": "teaser/data/dataclass.py",
            "symbol": "redefined-builtin",
            "message": "Redefining built-in 'FileNotFoundError'",
            "message-id": "W0622"
        },
        {
            "type": "error",
            "module": "teaser.data.dataclass",
            "obj": "",
            "line": 14,
            "column": 8,
            "path": "teaser/data/dataclass.py",
            "symbol": "used-before-assignment",
            "message": "Using variable 'FileNotFoundError' before assignment",
            "message-id": "E0601"
        },
        {
            "type": "refactor",
            "module": "teaser.data.dataclass",
            "obj": "DataClass",
            "line": 18,
            "column": 0,
            "path": "teaser/data/dataclass.py",
            "symbol": "useless-object-inheritance",
            "message": "Class 'DataClass' inherits from object, can be safely removed from bases in python3",
            "message-id": "R0205"
        },
        {
            "type": "warning",
            "module": "teaser.data.dataclass",
            "obj": "DataClass.load_tb_binding",
            "line": 96,
            "column": 25,
            "path": "teaser/data/dataclass.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "teaser.data.dataclass",
            "obj": "DataClass.load_tb_binding",
            "line": 96,
            "column": 52,
            "path": "teaser/data/dataclass.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.data.dataclass",
            "obj": "DataClass.load_tb_binding",
            "line": 103,
            "column": 21,
            "path": "teaser/data/dataclass.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "teaser.data.dataclass",
            "obj": "DataClass.load_tb_binding",
            "line": 103,
            "column": 48,
            "path": "teaser/data/dataclass.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.data.dataclass",
            "obj": "DataClass.load_uc_binding",
            "line": 111,
            "column": 25,
            "path": "teaser/data/dataclass.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "teaser.data.dataclass",
            "obj": "DataClass.load_uc_binding",
            "line": 111,
            "column": 52,
            "path": "teaser/data/dataclass.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.data.dataclass",
            "obj": "DataClass.load_uc_binding",
            "line": 116,
            "column": 20,
            "path": "teaser/data/dataclass.py",
            "symbol": "raise-missing-from",
            "message": "Consider explicitly re-raising using 'except Exception as exc' and 'raise IOError('Your UseConditions.json file seems to be broken.') from exc'",
            "message-id": "W0707"
        },
        {
            "type": "warning",
            "module": "teaser.data.dataclass",
            "obj": "DataClass.load_uc_binding",
            "line": 118,
            "column": 21,
            "path": "teaser/data/dataclass.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "teaser.data.dataclass",
            "obj": "DataClass.load_uc_binding",
            "line": 118,
            "column": 48,
            "path": "teaser/data/dataclass.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.data.dataclass",
            "obj": "DataClass.load_mat_binding",
            "line": 126,
            "column": 25,
            "path": "teaser/data/dataclass.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "teaser.data.dataclass",
            "obj": "DataClass.load_mat_binding",
            "line": 126,
            "column": 53,
            "path": "teaser/data/dataclass.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.data.dataclass",
            "obj": "DataClass.load_mat_binding",
            "line": 133,
            "column": 21,
            "path": "teaser/data/dataclass.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "teaser.data.dataclass",
            "obj": "DataClass.load_mat_binding",
            "line": 133,
            "column": 49,
            "path": "teaser/data/dataclass.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.dataclass",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "teaser/data/dataclass.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import json\" should be placed before \"import teaser.logic.utilities as utils\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.data.dataclass",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "teaser/data/dataclass.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import collections\" should be placed before \"import teaser.logic.utilities as utils\"",
            "message-id": "C0411"
        },
        {
            "type": "warning",
            "module": "teaser.data.dataclass",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "teaser/data/dataclass.py",
            "symbol": "unused-import",
            "message": "Unused import warnings",
            "message-id": "W0611"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (111/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 2,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (108/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (117/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (102/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 77,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (101/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 169,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (117/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 170,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (118/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 171,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (117/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 172,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (118/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 173,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (121/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 174,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (122/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 176,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (117/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 178,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (117/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 180,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (121/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 183,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (108/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 184,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (108/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 185,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (108/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 186,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (108/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 187,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (109/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 192,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (111/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 203,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (117/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "",
            "line": 214,
            "column": 0,
            "path": "teaser/data/utilities.py",
            "symbol": "line-too-long",
            "message": "Line too long (117/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 47,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"IwuSingleFamilyDwelling\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 49,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"TabulaDeSingleFamilyHouse\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 50,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"TabulaDeTerracedHouse\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 51,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"TabulaDeMultiFamilyHouse\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 52,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"TabulaDeApartmentBlock\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 54,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"TabulaDkSingleFamilyHouse\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 55,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"TabulaDkTerracedHouse\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 56,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"TabulaDkApartmentBlock\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 58,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"BmvbsOffice\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 59,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"BmvbsInstitute\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 60,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"BmvbsInstitute4\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 61,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"BmvbsInstitute8\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 63,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"UrbanrenetEst1a\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 64,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"UrbanrenetEst1b\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 65,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"UrbanrenetEst2\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 66,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"UrbanrenetEst3\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 67,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"UrbanrenetEst4a\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 68,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"UrbanrenetEst4b\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 69,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"UrbanrenetEst5\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 70,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"UrbanrenetEst6\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 71,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"UrbanrenetEst7\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 72,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"UrbanrenetEst8a\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "GeometryData",
            "line": 73,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"UrbanrenetEst8b\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData",
            "line": 81,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"iwu_heavy\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData",
            "line": 82,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"iwu_light\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData",
            "line": 83,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"tabula_de_standard\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData",
            "line": 84,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"tabula_de_retrofit\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData",
            "line": 85,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"tabula_de_adv_retrofit\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData",
            "line": 86,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"tabula_dk_standard\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData",
            "line": 87,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"tabula_dk_retrofit\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData",
            "line": 88,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"tabula_dk_adv_retrofit\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData",
            "line": 89,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"kfw_40\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData",
            "line": 90,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"kfw_55\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData",
            "line": 91,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"kfw_70\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData",
            "line": 92,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"kfw_85\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData",
            "line": 93,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "invalid-name",
            "message": "Class constant name \"kfw_100\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData.get_prefix",
            "line": 95,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData.get_prefix",
            "line": 97,
            "column": 8,
            "path": "teaser/data/utilities.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
            "message-id": "R1705"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData.is_iwu",
            "line": 103,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData.is_tabula_de",
            "line": 106,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData.is_tabula_dk",
            "line": 109,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.data.utilities",
            "obj": "ConstructionData.is_kfw",
            "line": 112,
            "column": 4,
            "path": "teaser/data/utilities.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "",
            "line": 59,
            "column": 0,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (108/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "",
            "line": 60,
            "column": 0,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (123/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "",
            "line": 61,
            "column": 0,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (114/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "",
            "line": 62,
            "column": 0,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (121/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "",
            "line": 63,
            "column": 0,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (116/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "",
            "line": 96,
            "column": 0,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (128/100)",
            "message-id": "C0301"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "save_teaser_json",
            "line": 8,
            "column": 0,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (20/15)",
            "message-id": "R0914"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "save_teaser_json",
            "line": 22,
            "column": 8,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "self-assigning-variable",
            "message": "Assigning the same variable 'path' to itself",
            "message-id": "W0127"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "save_teaser_json",
            "line": 258,
            "column": 16,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "invalid-name",
            "message": "Variable name \"gf\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "save_teaser_json",
            "line": 266,
            "column": 16,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "invalid-name",
            "message": "Variable name \"iw\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "save_teaser_json",
            "line": 304,
            "column": 9,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "save_teaser_json",
            "line": 8,
            "column": 0,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (17/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "save_teaser_json",
            "line": 8,
            "column": 0,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (151/50)",
            "message-id": "R0915"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "set_basic_data",
            "line": 332,
            "column": 8,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "too-many-boolean-expressions",
            "message": "Too many boolean expressions in if statement (6/5)",
            "message-id": "R0916"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "set_basic_data",
            "line": 332,
            "column": 8,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "consider-using-in",
            "message": "Consider merging these comparisons with 'in' by using 'type(element).__name__ in ('OuterWall', 'Rooftop', 'Door', 'InterzonalWall', 'InterzonalCeiling', 'InterzonalFloor')'. Use a set instead if elements are hashable.",
            "message-id": "R1714"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.teaserjson_output",
            "obj": "set_basic_data",
            "line": 353,
            "column": 8,
            "path": "teaser/data/output/teaserjson_output.py",
            "symbol": "consider-using-in",
            "message": "Consider merging these comparisons with 'in' by using 'type(element).__name__ in ('InterzonalWall', 'InterzonalCeiling', 'InterzonalFloor')'. Use a set instead if elements are hashable.",
            "message-id": "R1714"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.besmod_output",
            "obj": "",
            "line": 41,
            "column": 0,
            "path": "teaser/data/output/besmod_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (110/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.besmod_output",
            "obj": "",
            "line": 43,
            "column": 0,
            "path": "teaser/data/output/besmod_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (112/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.besmod_output",
            "obj": "",
            "line": 60,
            "column": 0,
            "path": "teaser/data/output/besmod_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (115/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.besmod_output",
            "obj": "",
            "line": 250,
            "column": 0,
            "path": "teaser/data/output/besmod_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (101/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.besmod_output",
            "obj": "",
            "line": 266,
            "column": 0,
            "path": "teaser/data/output/besmod_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (108/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.besmod_output",
            "obj": "",
            "line": 282,
            "column": 0,
            "path": "teaser/data/output/besmod_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (109/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.besmod_output",
            "obj": "",
            "line": 311,
            "column": 0,
            "path": "teaser/data/output/besmod_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (105/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.besmod_output",
            "obj": "",
            "line": 316,
            "column": 0,
            "path": "teaser/data/output/besmod_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (106/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.besmod_output",
            "obj": "",
            "line": 322,
            "column": 0,
            "path": "teaser/data/output/besmod_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (103/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.besmod_output",
            "obj": "",
            "line": 324,
            "column": 0,
            "path": "teaser/data/output/besmod_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (117/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.besmod_output",
            "obj": "",
            "line": 326,
            "column": 0,
            "path": "teaser/data/output/besmod_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (105/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.besmod_output",
            "obj": "",
            "line": 327,
            "column": 0,
            "path": "teaser/data/output/besmod_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (105/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.besmod_output",
            "obj": "",
            "line": 363,
            "column": 0,
            "path": "teaser/data/output/besmod_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (115/100)",
            "message-id": "C0301"
        },
        {
            "type": "fatal",
            "module": "teaser.data.output.besmod_output",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/output/besmod_output.py",
            "symbol": "astroid-error",
            "message": "teaser/data/output/besmod_output.py: Fatal error while checking 'teaser/data/output/besmod_output.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-07-23-10-07-15.txt'.",
            "message-id": "F0002"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.material_output",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "teaser/data/output/material_output.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.material_output",
            "obj": "save_material",
            "line": 34,
            "column": 8,
            "path": "teaser/data/output/material_output.py",
            "symbol": "redefined-builtin",
            "message": "Redefining built-in 'id'",
            "message-id": "W0622"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.material_output",
            "obj": "save_material",
            "line": 34,
            "column": 8,
            "path": "teaser/data/output/material_output.py",
            "symbol": "invalid-name",
            "message": "Variable name \"id\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.material_output",
            "obj": "save_material",
            "line": 36,
            "column": 15,
            "path": "teaser/data/output/material_output.py",
            "symbol": "too-many-boolean-expressions",
            "message": "Too many boolean expressions in if statement (6/5)",
            "message-id": "R0916"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.material_output",
            "obj": "save_material",
            "line": 68,
            "column": 9,
            "path": "teaser/data/output/material_output.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.material_output",
            "obj": "save_material",
            "line": 34,
            "column": 8,
            "path": "teaser/data/output/material_output.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'id'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.material_output",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "teaser/data/output/material_output.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import collections\" should be placed before \"import teaser.logic.utilities as utilities\"",
            "message-id": "C0411"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.usecond_output",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "teaser/data/output/usecond_output.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.usecond_output",
            "obj": "save_use_conditions",
            "line": 141,
            "column": 9,
            "path": "teaser/data/output/usecond_output.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "missing-module-docstring",
            "message": "Missing module docstring",
            "message-id": "C0114"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "invalid-name",
            "message": "Module name \"runUnitTests\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_validate_experiment_setup",
            "line": 40,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'retVal' from outer scope (line 217)",
            "message-id": "W0621"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_validate_experiment_setup",
            "line": 37,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (buildingspy.development.validator)",
            "message-id": "C0415"
        },
        {
            "type": "error",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_validate_experiment_setup",
            "line": 37,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "import-error",
            "message": "Unable to import 'buildingspy.development.validator'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_validate_experiment_setup",
            "line": 40,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "invalid-name",
            "message": "Variable name \"retVal\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_validate_html",
            "line": 46,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (buildingspy.development.validator)",
            "message-id": "C0415"
        },
        {
            "type": "error",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_validate_html",
            "line": 46,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "import-error",
            "message": "Unable to import 'buildingspy.development.validator'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_validate_html",
            "line": 49,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "invalid-name",
            "message": "Variable name \"errMsg\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_validate_html",
            "line": 54,
            "column": 16,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_validate_html",
            "line": 61,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "no-else-return",
            "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
            "message-id": "R1705"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_setEnvironmentVariables",
            "line": 67,
            "column": 0,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "invalid-name",
            "message": "Function name \"_setEnvironmentVariables\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_setEnvironmentVariables",
            "line": 70,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'os' from outer scope (line 120)",
            "message-id": "W0621"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_setEnvironmentVariables",
            "line": 71,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'platform' from outer scope (line 118)",
            "message-id": "W0621"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_setEnvironmentVariables",
            "line": 70,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (os)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_setEnvironmentVariables",
            "line": 71,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (platform)",
            "message-id": "C0415"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_runUnitTests",
            "line": 82,
            "column": 0,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "invalid-name",
            "message": "Function name \"_runUnitTests\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_runUnitTests",
            "line": 82,
            "column": 0,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (7/5)",
            "message-id": "R0913"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_runUnitTests",
            "line": 102,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "redefined-outer-name",
            "message": "Redefining name 'retVal' from outer scope (line 217)",
            "message-id": "W0621"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_runUnitTests",
            "line": 83,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "import-outside-toplevel",
            "message": "Import outside toplevel (buildingspy.development.regressiontest)",
            "message-id": "C0415"
        },
        {
            "type": "error",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_runUnitTests",
            "line": 83,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "import-error",
            "message": "Unable to import 'buildingspy.development.regressiontest'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_runUnitTests",
            "line": 85,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ut\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "_runUnitTests",
            "line": 102,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "invalid-name",
            "message": "Variable name \"retVal\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "",
            "line": 204,
            "column": 8,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "invalid-name",
            "message": "Constant name \"ret_val\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.runUnitTests",
            "obj": "",
            "line": 205,
            "column": 8,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "consider-using-sys-exit",
            "message": "Consider using 'sys.exit' instead",
            "message-id": "R1722"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.runUnitTests",
            "obj": "",
            "line": 210,
            "column": 8,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "consider-using-sys-exit",
            "message": "Consider using 'sys.exit' instead",
            "message-id": "R1722"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.runUnitTests",
            "obj": "",
            "line": 215,
            "column": 8,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "invalid-name",
            "message": "Constant name \"single_package\" doesn't conform to UPPER_CASE naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.runUnitTests",
            "obj": "",
            "line": 226,
            "column": 4,
            "path": "teaser/data/output/runUnitTests.py",
            "symbol": "consider-using-sys-exit",
            "message": "Consider using 'sys.exit' instead",
            "message-id": "R1722"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.buildingelement_output",
            "obj": "",
            "line": 3,
            "column": 0,
            "path": "teaser/data/output/buildingelement_output.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.buildingelement_output",
            "obj": "save_type_element",
            "line": 38,
            "column": 16,
            "path": "teaser/data/output/buildingelement_output.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.buildingelement_output",
            "obj": "save_type_element",
            "line": 58,
            "column": 9,
            "path": "teaser/data/output/buildingelement_output.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.buildingelement_output",
            "obj": "delete_type_element",
            "line": 84,
            "column": 16,
            "path": "teaser/data/output/buildingelement_output.py",
            "symbol": "consider-using-f-string",
            "message": "Formatting a regular string which could be a f-string",
            "message-id": "C0209"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.buildingelement_output",
            "obj": "delete_type_element",
            "line": 90,
            "column": 9,
            "path": "teaser/data/output/buildingelement_output.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.buildingelement_output",
            "obj": "_set_basic_data_json",
            "line": 124,
            "column": 8,
            "path": "teaser/data/output/buildingelement_output.py",
            "symbol": "consider-using-in",
            "message": "Consider merging these comparisons with 'in' by using 'type(element).__name__ in ('OuterWall', 'Rooftop', 'Door')'. Use a set instead if elements are hashable.",
            "message-id": "R1714"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.buildingelement_output",
            "obj": "",
            "line": 4,
            "column": 0,
            "path": "teaser/data/output/buildingelement_output.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import warnings\" should be placed before \"import teaser.logic.utilities as utilities\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.buildingelement_output",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "teaser/data/output/buildingelement_output.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import collections\" should be placed before \"import teaser.logic.utilities as utilities\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.buildingelement_output",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "teaser/data/output/buildingelement_output.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import json\" should be placed before \"import teaser.logic.utilities as utilities\"",
            "message-id": "C0411"
        },
        {
            "type": "error",
            "module": "teaser.data.output.aixlib_output",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "teaser/data/output/aixlib_output.py",
            "symbol": "import-error",
            "message": "Unable to import 'mako.template'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "teaser.data.output.aixlib_output",
            "obj": "",
            "line": 7,
            "column": 0,
            "path": "teaser/data/output/aixlib_output.py",
            "symbol": "import-error",
            "message": "Unable to import 'mako.lookup'",
            "message-id": "E0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.aixlib_output",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "teaser/data/output/aixlib_output.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.aixlib_output",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "teaser/data/output/aixlib_output.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.data.output import modelica_output' instead",
            "message-id": "R0402"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.aixlib_output",
            "obj": "export_multizone",
            "line": 12,
            "column": 0,
            "path": "teaser/data/output/aixlib_output.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (6/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.aixlib_output",
            "obj": "export_multizone",
            "line": 12,
            "column": 0,
            "path": "teaser/data/output/aixlib_output.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (25/15)",
            "message-id": "R0914"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.aixlib_output",
            "obj": "export_multizone",
            "line": 178,
            "column": 13,
            "path": "teaser/data/output/aixlib_output.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.aixlib_output",
            "obj": "export_multizone",
            "line": 194,
            "column": 17,
            "path": "teaser/data/output/aixlib_output.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.aixlib_output",
            "obj": "export_multizone",
            "line": 12,
            "column": 0,
            "path": "teaser/data/output/aixlib_output.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (16/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.aixlib_output",
            "obj": "export_multizone",
            "line": 12,
            "column": 0,
            "path": "teaser/data/output/aixlib_output.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (67/50)",
            "message-id": "R0915"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.aixlib_output",
            "obj": "_help_test_script",
            "line": 273,
            "column": 9,
            "path": "teaser/data/output/aixlib_output.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.aixlib_output",
            "obj": "_help_test_script",
            "line": 276,
            "column": 15,
            "path": "teaser/data/output/aixlib_output.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'zone'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.modelica_output",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/output/modelica_output.py",
            "symbol": "line-too-long",
            "message": "Line too long (101/100)",
            "message-id": "C0301"
        },
        {
            "type": "error",
            "module": "teaser.data.output.modelica_output",
            "obj": "",
            "line": 5,
            "column": 0,
            "path": "teaser/data/output/modelica_output.py",
            "symbol": "import-error",
            "message": "Unable to import 'mako.template'",
            "message-id": "E0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.modelica_output",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "teaser/data/output/modelica_output.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.modelica_output",
            "obj": "create_package",
            "line": 30,
            "column": 9,
            "path": "teaser/data/output/modelica_output.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.modelica_output",
            "obj": "create_package_order",
            "line": 62,
            "column": 9,
            "path": "teaser/data/output/modelica_output.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.ibpsa_output",
            "obj": "",
            "line": 9,
            "column": 0,
            "path": "teaser/data/output/ibpsa_output.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.data.output import modelica_output' instead",
            "message-id": "R0402"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.ibpsa_output",
            "obj": "",
            "line": 11,
            "column": 0,
            "path": "teaser/data/output/ibpsa_output.py",
            "symbol": "consider-using-from-import",
            "message": "Use 'from teaser.logic import utilities' instead",
            "message-id": "R0402"
        },
        {
            "type": "error",
            "module": "teaser.data.output.ibpsa_output",
            "obj": "",
            "line": 12,
            "column": 0,
            "path": "teaser/data/output/ibpsa_output.py",
            "symbol": "import-error",
            "message": "Unable to import 'mako.template'",
            "message-id": "E0401"
        },
        {
            "type": "error",
            "module": "teaser.data.output.ibpsa_output",
            "obj": "",
            "line": 13,
            "column": 0,
            "path": "teaser/data/output/ibpsa_output.py",
            "symbol": "import-error",
            "message": "Unable to import 'mako.lookup'",
            "message-id": "E0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.ibpsa_output",
            "obj": "export_ibpsa",
            "line": 16,
            "column": 0,
            "path": "teaser/data/output/ibpsa_output.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (17/15)",
            "message-id": "R0914"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.ibpsa_output",
            "obj": "export_ibpsa",
            "line": 143,
            "column": 17,
            "path": "teaser/data/output/ibpsa_output.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.ibpsa_output",
            "obj": "export_ibpsa",
            "line": 108,
            "column": 8,
            "path": "teaser/data/output/ibpsa_output.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'i'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.ibpsa_output",
            "obj": "",
            "line": 10,
            "column": 0,
            "path": "teaser/data/output/ibpsa_output.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import os.path\" should be placed before \"import teaser.data.output.modelica_output as modelica_output\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.ibpsa_output",
            "obj": "",
            "line": 12,
            "column": 0,
            "path": "teaser/data/output/ibpsa_output.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"from mako.template import Template\" should be placed before \"import teaser.data.output.modelica_output as modelica_output\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.ibpsa_output",
            "obj": "",
            "line": 13,
            "column": 0,
            "path": "teaser/data/output/ibpsa_output.py",
            "symbol": "wrong-import-order",
            "message": "third party import \"from mako.lookup import TemplateLookup\" should be placed before \"import teaser.data.output.modelica_output as modelica_output\"",
            "message-id": "C0411"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.reports.model_report",
            "obj": "",
            "line": 51,
            "column": 9,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "fixme",
            "message": "todo use bldg.*_names if existing",
            "message-id": "W0511"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.reports.model_report",
            "obj": "",
            "line": 564,
            "column": 9,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "fixme",
            "message": "TODO: use orientations as well and \"turn\" the vertices based on this.",
            "message-id": "W0511"
        },
        {
            "type": "error",
            "module": "teaser.data.output.reports.model_report",
            "obj": "",
            "line": 8,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "import-error",
            "message": "Unable to import 'plotly.graph_objects'",
            "message-id": "E0401"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.reports.model_report",
            "obj": "localize_floats",
            "line": 11,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_model_report",
            "line": 15,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (31/15)",
            "message-id": "R0914"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_model_report",
            "line": 105,
            "column": 12,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_model_report",
            "line": 15,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (34/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_model_report",
            "line": 15,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (96/50)",
            "message-id": "R0915"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.reports.model_report",
            "obj": "export_reports",
            "line": 178,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_csv_report",
            "line": 199,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_csv_report",
            "line": 211,
            "column": 15,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "consider-iterating-dictionary",
            "message": "Consider iterating the dictionary directly instead of calling .keys()",
            "message-id": "C0201"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.reports.model_report",
            "obj": "",
            "line": 221,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "implicit-str-concat",
            "message": "Implicit string concatenation found in list",
            "message-id": "W1404"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_csv_report",
            "line": 248,
            "column": 64,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "consider-iterating-dictionary",
            "message": "Consider iterating the dictionary directly instead of calling .keys()",
            "message-id": "C0201"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_csv_report",
            "line": 258,
            "column": 67,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_csv_report",
            "line": 203,
            "column": 13,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "unused-variable",
            "message": "Unused variable 'val'",
            "message-id": "W0612"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.reports.model_report",
            "obj": "add_compass_to_3d_plot",
            "line": 264,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "add_compass_to_3d_plot",
            "line": 279,
            "column": 21,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"color\": 'black'}' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "add_compass_to_3d_plot",
            "line": 316,
            "column": 28,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"aspectmode\": 'manual', \"aspectratio\": dict(x=1, y=1, z=1)}' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "add_compass_to_3d_plot",
            "line": 316,
            "column": 66,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"x\": 1, \"y\": 1, \"z\": 1}' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_html_page",
            "line": 320,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "missing-function-docstring",
            "message": "Missing function or method docstring",
            "message-id": "C0116"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_html_page",
            "line": 320,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (6/5)",
            "message-id": "R0913"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_html_page",
            "line": 320,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (17/15)",
            "message-id": "R0914"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_html_page",
            "line": 444,
            "column": 11,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "consider-using-in",
            "message": "Consider merging these comparisons with 'in' by using 'key in ('Outerwall Area', 'Window Area')'. Use a set instead if elements are hashable.",
            "message-id": "R1714"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_html_page",
            "line": 504,
            "column": 24,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_html_page",
            "line": 512,
            "column": 20,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_html_page",
            "line": 522,
            "column": 24,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_html_page",
            "line": 524,
            "column": 20,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "f-string-without-interpolation",
            "message": "Using an f-string that does not have any interpolated variables",
            "message-id": "W1309"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_html_page",
            "line": 533,
            "column": 9,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_html_page",
            "line": 320,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (22/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_html_page",
            "line": 320,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (57/50)",
            "message-id": "R0915"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 537,
            "column": 0,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (42/15)",
            "message-id": "R0914"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 775,
            "column": 11,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "broad-exception-caught",
            "message": "Catching too general exception Exception",
            "message-id": "W0718"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 593,
            "column": 19,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"l\": 5, \"r\": 5, \"b\": 5, \"t\": 0}' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 594,
            "column": 18,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"xaxis\": dict(gridcolor='white', showbackground=False, zerolinecolor='white'), ... }' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 595,
            "column": 22,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"gridcolor\": 'white', \"showbackground\": False, \"zerolinecolor\": 'white', ... }' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 600,
            "column": 22,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"gridcolor\": 'white', \"showbackground\": False, \"zerolinecolor\": 'white', ... }' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 603,
            "column": 22,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"gridcolor\": 'white', \"showbackground\": False, \"zerolinecolor\": 'white', ... }' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 619,
            "column": 18,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"xaxis\": dict(range=[-x_y_axis_sizing, x_y_axis_sizing]), \"yaxis\": dict(range=[-x_y_axis_sizing, x_y_axis_sizing]), ... }' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 620,
            "column": 22,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"range\": [-x_y_axis_sizing, x_y_axis_sizing]}' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 621,
            "column": 22,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"range\": [-x_y_axis_sizing, x_y_axis_sizing]}' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 622,
            "column": 22,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{\"range\": [0, max_length]}' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 673,
            "column": 16,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "invalid-name",
            "message": "Variable name \"xs\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 673,
            "column": 20,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "invalid-name",
            "message": "Variable name \"ys\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 673,
            "column": 24,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "invalid-name",
            "message": "Variable name \"zs\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 715,
            "column": 19,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "consider-using-in",
            "message": "Consider merging these comparisons with 'in' by using 'i in (0, 2)'. Use a set instead if elements are hashable.",
            "message-id": "R1714"
        },
        {
            "type": "convention",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 775,
            "column": 4,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "invalid-name",
            "message": "Variable name \"e\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.data.output.reports.model_report",
            "obj": "create_simple_3d_visualization",
            "line": 537,
            "column": 46,
            "path": "teaser/data/output/reports/model_report.py",
            "symbol": "unused-argument",
            "message": "Unused argument 'roof_angle'",
            "message-id": "W0613"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "",
            "line": 66,
            "column": 0,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "line-too-long",
            "message": "Line too long (105/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "",
            "line": 67,
            "column": 0,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "line-too-long",
            "message": "Line too long (108/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "",
            "line": 69,
            "column": 0,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "line-too-long",
            "message": "Line too long (106/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "",
            "line": 70,
            "column": 0,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "line-too-long",
            "message": "Line too long (102/100)",
            "message-id": "C0301"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 45,
            "column": 0,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "too-many-locals",
            "message": "Too many local variables (51/15)",
            "message-id": "R0914"
        },
        {
            "type": "warning",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 72,
            "column": 9,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "unspecified-encoding",
            "message": "Using open without explicitly specifying an encoding",
            "message-id": "W1514"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 72,
            "column": 29,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "invalid-name",
            "message": "Variable name \"f\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 156,
            "column": 24,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{}' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 158,
            "column": 12,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 276,
            "column": 16,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "invalid-name",
            "message": "Variable name \"gf\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 301,
            "column": 40,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{}' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 308,
            "column": 41,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{}' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 315,
            "column": 43,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{}' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 323,
            "column": 12,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "invalid-name",
            "message": "Variable name \"tz\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 327,
            "column": 52,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{}' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 332,
            "column": 53,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{}' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 337,
            "column": 55,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "use-dict-literal",
            "message": "Consider using '{}' instead of a call to 'dict'.",
            "message-id": "R1735"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 45,
            "column": 0,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "too-many-branches",
            "message": "Too many branches (22/12)",
            "message-id": "R0912"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "load_teaser_json",
            "line": 45,
            "column": 0,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "too-many-statements",
            "message": "Too many statements (154/50)",
            "message-id": "R0915"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "set_basic_data_teaser",
            "line": 365,
            "column": 8,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "too-many-boolean-expressions",
            "message": "Too many boolean expressions in if statement (6/5)",
            "message-id": "R0916"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "set_basic_data_teaser",
            "line": 365,
            "column": 8,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "consider-using-in",
            "message": "Consider merging these comparisons with 'in' by using 'type(element).__name__ in ('OuterWall', 'Rooftop', 'Door', 'InterzonalWall', 'InterzonalCeiling', 'InterzonalFloor')'. Use a set instead if elements are hashable.",
            "message-id": "R1714"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "",
            "line": 39,
            "column": 0,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import json\" should be placed before \"from teaser.logic.buildingobjects.building import Building\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "",
            "line": 40,
            "column": 0,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import collections\" should be placed before \"from teaser.logic.buildingobjects.building import Building\"",
            "message-id": "C0411"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.teaserjson_input",
            "obj": "",
            "line": 42,
            "column": 0,
            "path": "teaser/data/input/teaserjson_input.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import warnings\" should be placed before \"from teaser.logic.buildingobjects.building import Building\"",
            "message-id": "C0411"
        },
        {
            "type": "warning",
            "module": "teaser.data.input.material_input_json",
            "obj": "load_material",
            "line": 28,
            "column": 8,
            "path": "teaser/data/input/material_input_json.py",
            "symbol": "redefined-builtin",
            "message": "Redefining built-in 'id'",
            "message-id": "W0622"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.material_input_json",
            "obj": "load_material",
            "line": 28,
            "column": 8,
            "path": "teaser/data/input/material_input_json.py",
            "symbol": "invalid-name",
            "message": "Variable name \"id\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "warning",
            "module": "teaser.data.input.material_input_json",
            "obj": "load_material_id",
            "line": 62,
            "column": 8,
            "path": "teaser/data/input/material_input_json.py",
            "symbol": "redefined-builtin",
            "message": "Redefining built-in 'id'",
            "message-id": "W0622"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.material_input_json",
            "obj": "load_material_id",
            "line": 62,
            "column": 8,
            "path": "teaser/data/input/material_input_json.py",
            "symbol": "invalid-name",
            "message": "Variable name \"id\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.buildingelement_input_json",
            "obj": "",
            "line": 19,
            "column": 0,
            "path": "teaser/data/input/buildingelement_input_json.py",
            "symbol": "line-too-long",
            "message": "Line too long (120/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.buildingelement_input_json",
            "obj": "",
            "line": 20,
            "column": 0,
            "path": "teaser/data/input/buildingelement_input_json.py",
            "symbol": "line-too-long",
            "message": "Line too long (118/100)",
            "message-id": "C0301"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.buildingelement_input_json",
            "obj": "load_type_element",
            "line": 8,
            "column": 0,
            "path": "teaser/data/input/buildingelement_input_json.py",
            "symbol": "too-many-arguments",
            "message": "Too many arguments (6/5)",
            "message-id": "R0913"
        },
        {
            "type": "warning",
            "module": "teaser.data.input.buildingelement_input_json",
            "obj": "load_type_element",
            "line": 63,
            "column": 16,
            "path": "teaser/data/input/buildingelement_input_json.py",
            "symbol": "redefined-builtin",
            "message": "Redefining built-in 'id'",
            "message-id": "W0622"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.buildingelement_input_json",
            "obj": "load_type_element",
            "line": 63,
            "column": 16,
            "path": "teaser/data/input/buildingelement_input_json.py",
            "symbol": "invalid-name",
            "message": "Variable name \"id\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.buildingelement_input_json",
            "obj": "load_type_element",
            "line": 64,
            "column": 24,
            "path": "teaser/data/input/buildingelement_input_json.py",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __reversed__. Use reversed built-in function.",
            "message-id": "C2801"
        },
        {
            "type": "warning",
            "module": "teaser.data.input.buildingelement_input_json",
            "obj": "load_type_element",
            "line": 75,
            "column": 4,
            "path": "teaser/data/input/buildingelement_input_json.py",
            "symbol": "logging-fstring-interpolation",
            "message": "Use lazy % formatting in logging functions",
            "message-id": "W1203"
        },
        {
            "type": "warning",
            "module": "teaser.data.input.buildingelement_input_json",
            "obj": "load_type_element_by_key",
            "line": 111,
            "column": 8,
            "path": "teaser/data/input/buildingelement_input_json.py",
            "symbol": "redefined-builtin",
            "message": "Redefining built-in 'id'",
            "message-id": "W0622"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.buildingelement_input_json",
            "obj": "load_type_element_by_key",
            "line": 111,
            "column": 8,
            "path": "teaser/data/input/buildingelement_input_json.py",
            "symbol": "invalid-name",
            "message": "Variable name \"id\" doesn't conform to snake_case naming style",
            "message-id": "C0103"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.buildingelement_input_json",
            "obj": "load_type_element_by_key",
            "line": 112,
            "column": 12,
            "path": "teaser/data/input/buildingelement_input_json.py",
            "symbol": "unnecessary-dunder-call",
            "message": "Unnecessarily calls dunder method __reversed__. Use reversed built-in function.",
            "message-id": "C2801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.buildingelement_input_json",
            "obj": "_set_basic_data",
            "line": 143,
            "column": 8,
            "path": "teaser/data/input/buildingelement_input_json.py",
            "symbol": "consider-using-in",
            "message": "Consider merging these comparisons with 'in' by using 'type(element).__name__ in ('OuterWall', 'Rooftop', 'Door')'. Use a set instead if elements are hashable.",
            "message-id": "R1714"
        },
        {
            "type": "convention",
            "module": "teaser.data.input.buildingelement_input_json",
            "obj": "",
            "line": 6,
            "column": 0,
            "path": "teaser/data/input/buildingelement_input_json.py",
            "symbol": "wrong-import-order",
            "message": "standard import \"import logging\" should be placed before \"from teaser.logic.buildingobjects.buildingphysics.layer import Layer\"",
            "message-id": "C0411"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[896:1191]\n==teaser.logic.buildingobjects.calculation.four_element:[850:1154]\n                )\n            )\n        ) / self.area_ow\n\n        self.alpha_conv_outer_ow = 1 / (self.r_conv_outer_ow * self.area_ow)\n        self.alpha_rad_outer_ow = 1 / (self.r_rad_outer_ow * self.area_ow)\n        self.alpha_comb_outer_ow = 1 / (self.r_comb_outer_ow * self.area_ow)\n\n    def _sum_ground_floor_elements(self):\n        \"\"\"Sum attributes for ground floor elements\n\n        This function sums and computes the area-weighted values,\n        where necessary (the class doc string) for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        \"\"\"\n\n        self.area_gf = sum(ground.area for ground in self.thermal_zone.ground_floors)\n\n        self.ua_value_gf = sum(\n            ground.ua_value for ground in self.thermal_zone.ground_floors\n        )\n\n        self.r_total_gf = 1 / self.ua_value_gf\n\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_gf = 1 / sum(\n            1 / ground.r_inner_conv for ground in self.thermal_zone.ground_floors\n        )\n\n        self.r_rad_inner_gf = 1 / sum(\n            1 / ground.r_inner_rad for ground in self.thermal_zone.ground_floors\n        )\n\n        self.r_comb_inner_gf = 1 / sum(\n            1 / ground.r_inner_comb for ground in self.thermal_zone.ground_floors\n        )\n\n        self.ir_emissivity_inner_gf = (\n            sum(\n                ground.layer[0].material.ir_emissivity * ground.area\n                for ground in self.thermal_zone.ground_floors\n            )\n            / self.area_gf\n        )\n\n        self.alpha_conv_inner_gf = 1 / (self.r_conv_inner_gf * self.area_gf)\n        self.alpha_rad_inner_gf = 1 / (self.r_rad_inner_gf * self.area_gf)\n        self.alpha_comb_inner_gf = 1 / (self.r_comb_inner_gf * self.area_gf)\n\n    def _sum_rooftop_elements(self):\n        \"\"\"Sum attributes for rooftop elements\n\n        This function sums and computes the area-weighted values,\n        where necessary  for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        For FourElement model it treats outer walls and zone borders to\n        neighboured zones (if this zone is heated)\n        as one kind of wall type.\n\n        \"\"\"\n\n        self.area_rt = sum(roof.area for roof in self.thermal_zone.rooftops)\n\n        self.ua_value_rt = sum(roof.ua_value for roof in self.thermal_zone.rooftops)\n\n        self.r_total_rt = 1 / self.ua_value_rt\n\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_rt = 1 / sum(\n            1 / roof.r_inner_conv for roof in self.thermal_zone.rooftops\n        )\n\n        self.r_rad_inner_rt = 1 / sum(\n            1 / roof.r_inner_rad for roof in self.thermal_zone.rooftops\n        )\n\n        self.r_comb_inner_rt = 1 / sum(\n            1 / roof.r_inner_comb for roof in self.thermal_zone.rooftops\n        )\n\n        self.ir_emissivity_inner_rt = (\n            sum(\n                roof.layer[0].material.ir_emissivity * roof.area\n                for roof in self.thermal_zone.rooftops\n            )\n            / self.area_rt\n        )\n\n        self.alpha_conv_inner_rt = 1 / (self.r_conv_inner_rt * self.area_rt)\n        self.alpha_rad_inner_rt = 1 / (self.r_rad_inner_rt * self.area_rt)\n        self.alpha_comb_inner_rt = 1 / (self.r_comb_inner_rt * self.area_rt)\n\n        # values facing the ambient\n        # ground floor does not have any coefficients on ambient side\n\n        self.r_conv_outer_rt = 1 / sum(\n            1 / roof.r_outer_conv for roof in self.thermal_zone.rooftops\n        )\n        self.r_rad_outer_rt = 1 / sum(\n            1 / roof.r_outer_rad for roof in self.thermal_zone.rooftops\n        )\n        self.r_comb_outer_rt = 1 / sum(\n            1 / roof.r_outer_comb for roof in self.thermal_zone.rooftops\n        )\n\n        self.ir_emissivity_outer_rt = (\n            sum(\n                roof.layer[-1].material.ir_emissivity * roof.area\n                for roof in self.thermal_zone.rooftops\n            )\n            / self.area_rt\n        )\n\n        self.solar_absorp_rt = (\n            sum(\n                roof.layer[-1].material.solar_absorp * roof.area\n                for roof in self.thermal_zone.rooftops\n            )\n            / self.area_rt\n        )\n\n        self.alpha_conv_outer_rt = 1 / (self.r_conv_outer_rt * self.area_rt)\n        self.alpha_rad_outer_rt = 1 / (self.r_rad_outer_rt * self.area_rt)\n        self.alpha_comb_outer_rt = 1 / (self.r_comb_outer_rt * self.area_rt)\n\n    def _sum_inner_wall_elements(self):\n        \"\"\"Sum attributes for interior elements\n\n        This function sums and computes the area-weighted values,\n        where necessary (the class doc string) for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        It treats all inner walls identical.\n\n        Function is identical for TwoElement, ThreeElement and FourElement.\n\n        Calculation of adjacent thermal zones and thus these attributes are\n        currently not supported.\n\n        \"\"\"\n        self.area_iw = (\n                sum(in_wall.area for in_wall in self.thermal_zone.inner_walls)\n                + sum(floor.area for floor in self.thermal_zone.floors)\n                + sum(ceiling.area for ceiling in self.thermal_zone.ceilings)\n                + sum(nzb.area for nzb in self.nzbs_for_iw)\n        )\n\n        self.ua_value_iw = (\n                sum(in_wall.ua_value for in_wall in self.thermal_zone.inner_walls)\n                + sum(floor.ua_value for floor in self.thermal_zone.floors)\n                + sum(ceiling.ua_value for ceiling in self.thermal_zone.ceilings)\n                + sum(nzb.ua_value for nzb in self.nzbs_for_iw)\n        )\n\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_iw = 1 / (\n                sum(1 / in_wall.r_inner_conv for in_wall in self.thermal_zone.inner_walls)\n                + sum(1 / floor.r_inner_conv for floor in self.thermal_zone.floors)\n                + sum(1 / ceiling.r_inner_conv for ceiling in self.thermal_zone.ceilings)\n                + sum(1 / nzb.r_inner_conv for nzb in self.nzbs_for_iw)\n        )\n\n        self.r_rad_inner_iw = 1 / (\n                sum(1 / in_wall.r_inner_rad for in_wall in self.thermal_zone.inner_walls)\n                + sum(1 / floor.r_inner_rad for floor in self.thermal_zone.floors)\n                + sum(1 / ceiling.r_inner_rad for ceiling in self.thermal_zone.ceilings)\n                + sum(1 / nzb.r_inner_rad for nzb in self.nzbs_for_iw)\n        )\n\n        self.r_comb_inner_iw = 1 / (\n                sum(1 / in_wall.r_inner_comb for in_wall in self.thermal_zone.inner_walls)\n                + sum(1 / floor.r_inner_comb for floor in self.thermal_zone.floors)\n                + sum(1 / ceiling.r_inner_comb for ceiling in self.thermal_zone.ceilings)\n                + sum(1 / nzb.r_inner_comb for nzb in self.nzbs_for_iw)\n        )\n\n        self.ir_emissivity_inner_iw = (\n                                              sum(\n                                                  in_wall.layer[0].material.ir_emissivity * in_wall.area\n                                                  for in_wall in self.thermal_zone.inner_walls\n                                              )\n                                              + sum(\n                                          floor.layer[0].material.ir_emissivity * floor.area\n                                          for floor in self.thermal_zone.floors\n                                      )\n                                              + sum(\n                                          ceiling.layer[0].material.ir_emissivity * ceiling.area\n                                          for ceiling in self.thermal_zone.ceilings\n                                      )\n                                              + sum(\n                                          nzb.layer[0].material.ir_emissivity * nzb.area\n                                          for nzb in self.nzbs_for_iw\n                                      )\n                                      ) / self.area_iw\n\n        self.alpha_conv_inner_iw = 1 / (self.r_conv_inner_iw * self.area_iw)\n        self.alpha_rad_inner_iw = 1 / (self.r_rad_inner_iw * self.area_iw)\n        self.alpha_comb_inner_iw = 1 / (self.r_comb_inner_iw * self.area_iw)\n\n        # adjacent thermal zones are not supported!\n\n    def _sum_window_elements(self):\n        \"\"\"Sum attributes for window elements\n\n        This function sums and computes the area-weighted values,\n        where necessary (the class doc string) for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        Function is identical for TwoElement, ThreeElement and FourElement.\n        \"\"\"\n\n        self.area_win = sum(win.area for win in self.thermal_zone.windows)\n        self.ua_value_win = sum(win.ua_value for win in self.thermal_zone.windows)\n        self.u_value_win = self.ua_value_win / self.area_win\n\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_win = 1 / (\n            sum(1 / win.r_inner_conv for win in self.thermal_zone.windows)\n        )\n\n        self.r_rad_inner_win = 1 / (\n            sum(1 / win.r_inner_rad for win in self.thermal_zone.windows)\n        )\n\n        self.r_comb_inner_win = 1 / (\n            sum(1 / win.r_inner_comb for win in self.thermal_zone.windows)\n        )\n\n        self.ir_emissivity_inner_win = (\n            sum(\n                win.layer[0].material.ir_emissivity * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.alpha_conv_inner_win = 1 / (self.r_conv_inner_win * self.area_win)\n        self.alpha_rad_inner_win = 1 / (self.r_rad_inner_win * self.area_win)\n        self.alpha_comb_inner_win = 1 / (self.r_comb_inner_win * self.area_win)\n        self.ratio_conv_rad_inner_win = (\n            sum(win.a_conv * win.area for win in self.thermal_zone.windows)\n            / self.area_win\n        )\n\n        # values facing the ambient\n\n        self.r_conv_outer_win = 1 / (\n            sum(1 / win.r_outer_conv for win in self.thermal_zone.windows)\n        )\n\n        self.r_rad_outer_win = 1 / (\n            sum(1 / win.r_outer_rad for win in self.thermal_zone.windows)\n        )\n\n        self.r_comb_outer_win = 1 / (\n            sum(1 / win.r_outer_comb for win in self.thermal_zone.windows)\n        )\n\n        self.ir_emissivity_win = (\n            sum(\n                win.layer[-1].material.ir_emissivity * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.solar_absorp_win = (\n            sum(\n                win.layer[-1].material.solar_absorp * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.weighted_g_value = (\n            sum(win.g_value * win.area for win in self.thermal_zone.windows)\n            / self.area_win\n        )\n\n        self.alpha_conv_outer_win = 1 / (self.r_conv_outer_win * self.area_win)\n        self.alpha_rad_outer_win = 1 / (self.r_rad_outer_win * self.area_win)\n        self.alpha_comb_outer_win = 1 / (self.r_comb_outer_win * self.area_win)\n\n    def _calc_outer_elements(self):\n        \"\"\"Lumped parameter for outer wall elements\n\n        Calculates all necessary parameters for outer walls. This includes\n        OuterWalls and Rooftops.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        outer_walls : list\n            List containing all TEASER Wall instances that are treated as same\n            outer wall type. In case of TwoElement model OuterWalls, Rooftops\n        \"\"\"\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[824:995]\n==teaser.logic.buildingobjects.calculation.two_element:[1036:1210]\n        self.alpha_rad_outer_mean = (\n            self.area_ow * self.alpha_rad_outer_ow\n            + self.area_win * self.alpha_rad_outer_win\n        ) / (self.area_ow + self.area_win)\n\n    def _calc_number_of_elements(self):\n        \"\"\"Calculates the number of outer elements with different tilt/orient\n\n        This function calculates the number of outer elements with a\n        different combination of orientation and tilt, this includes the\n        rooftops, ground floors, and borders to unheated neighboured zones if\n        this zone is heated.\n        \"\"\"\n\n        outer_elements = (\n            self.thermal_zone.outer_walls\n            + self.thermal_zone.find_izes_outer()\n            + self.thermal_zone.ground_floors\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.windows\n        )\n\n        tilt_orient = []\n        for element in outer_elements:\n            tilt_orient.append((element.orientation, element.tilt))\n        self.n_outer = len(list(set(tilt_orient)))\n\n    def _fill_zone_lists(self):\n        \"\"\"Fills lists like weightfactors and tilt, orientation\n\n        Fills the lists of a zone  according to orientation and tilt of the\n        zone. Therefore it compares orientation and tilt of all outer\n        elements and then creates lists for zone weightfactors, orientation,\n        tilt, ares and sunblinds.\"\"\"\n\n        outer_elements = (\n            self.thermal_zone.outer_walls\n            + self.thermal_zone.find_izes_outer()\n            + self.thermal_zone.ground_floors\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.windows\n        )\n\n        tilt_orient = []\n        for element in outer_elements:\n            tilt_orient.append((element.orientation, element.tilt))\n        tilt_orient = list(set(tilt_orient))\n\n        for i in tilt_orient:\n            wall_rt_nzb = self.thermal_zone.find_walls(\n                i[0], i[1]\n            ) + self.thermal_zone.find_rts(\n                i[0], i[1]\n            ) + self.thermal_zone.find_izes_outer(\n                i[0], i[1]\n            )\n            wins = self.thermal_zone.find_wins(i[0], i[1])\n            gf = self.thermal_zone.find_gfs(i[0], i[1])\n\n            if self.merge_windows is True:\n                self.facade_areas.append(\n                    sum([element.area for element in (wall_rt_nzb + wins + gf)])\n                )\n            else:\n                self.facade_areas.append(\n                    sum([element.area for element in (wall_rt_nzb + gf)])\n                )\n\n            self.orientation_facade.append(i[0])\n            self.tilt_facade.append(i[1])\n\n            if not wall_rt_nzb:\n\n                if not gf:\n                    self.weightfactor_ow.append(0.0)\n                    self.outer_wall_areas.append(0.0)\n                else:\n                    self.weightfactor_ow.append(0.0)\n                    self.outer_wall_areas.append(\n                        (sum([element.area for element in gf]))\n                    )\n            else:\n                self.weightfactor_ow.append(sum([wall.wf_out\n                                                 for wall in wall_rt_nzb]))\n                self.outer_wall_areas.append(sum([wall.area\n                                                  for wall in wall_rt_nzb]))\n\n            if not wins:\n                self.weightfactor_win.append(0.0)\n                self.shading_g_total.append(1.0)\n                self.window_areas.append(0.0)\n                self.transparent_areas.append(0.0)\n                self.shading_max_irr.append(9999.9)\n            else:\n                self.weightfactor_win.append(sum([win.wf_out for win in wins]))\n                if self.merge_windows is False:\n                    self.window_areas.append(sum([win.area for win in wins]))\n                    self.transparent_areas.append(sum([win.area for win in wins]))\n\n                else:\n                    self.window_areas.append(0)\n                    self.transparent_areas.append(sum([win.area for win in wins]))\n                self.shading_g_total.append(\n                    sum(\n                        [\n                            win.shading_g_total * win.area / sum([w.area for w in wins])\n                            for win in wins\n                        ]\n                    )\n                )\n                self.shading_max_irr.append(\n                    sum(\n                        [\n                            win.shading_max_irr * win.area / sum([w.area for w in wins])\n                            for win in wins\n                        ]\n                    )\n                )\n\n    def _calc_heat_load(self):\n        \"\"\"Static heat load calculation\n\n        This function calculates the static heat load of the thermal zone by\n        multiplying the UA-Value of the elements with the given Temperature\n        difference of t_inside and t_outside. And takes heat losses through\n        infiltration into account.\n\n        Attributes\n        ----------\n        ua_value_ow_temp : float [W/(m2*K)]\n            UA Value without GroundFloors\n        ua_value_gf_temp : float [W/(m2*K)]\n            UA Value of all GroundFloors\n        \"\"\"\n        if self.thermal_zone.use_conditions.base_infiltration > 0.5:\n            warnings.warn(\"The base_infiltration is larger than 0.5, \"\n                          \"which could lead to ideal heaters being too small.\")\n\n        self.heat_load = 0.0\n\n        if self.thermal_zone.parent.parent.t_soil_mode == 2:\n            t_ground = self.thermal_zone.t_ground \\\n                       - self.thermal_zone.t_ground_amplitude\n        else:\n            t_ground = self.thermal_zone.t_ground\n\n        ua_value_gf_temp = sum(\n            ground.ua_value for ground in self.thermal_zone.ground_floors\n        )\n        ua_value_ow_temp = self.ua_value_ow - ua_value_gf_temp\n        self.heat_load_outside_factor = (\n            (ua_value_ow_temp + self.ua_value_win)\n            + self.thermal_zone.volume\n            * self.thermal_zone.use_conditions.normative_infiltration\n            * 1\n            / 3600\n            * self.thermal_zone.heat_capac_air\n            * self.thermal_zone.density_air\n        )\n        self.heat_load_ground_factor = ua_value_gf_temp\n        self.heat_load = \\\n            self.heat_load_outside_factor \\\n            * (self.thermal_zone.t_inside - self.thermal_zone.t_outside) \\\n            + self.heat_load_ground_factor \\\n            * (self.thermal_zone.t_inside - t_ground)\n\n    def set_calc_default(self):\n        \"\"\"sets default calculation parameters\n        \"\"\"\n\n        # Attributes for outer walls (OuterWall, Rooftop, GroundFloor)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[994:1156]\n==teaser.logic.buildingobjects.calculation.three_element:[780:942]\n        self.area_iw = (\n            sum(in_wall.area for in_wall in self.thermal_zone.inner_walls)\n            + sum(floor.area for floor in self.thermal_zone.floors)\n            + sum(ceiling.area for ceiling in self.thermal_zone.ceilings)\n            + sum(nzb.area for nzb in self.nzbs_for_iw)\n        )\n\n        self.ua_value_iw = (\n            sum(in_wall.ua_value for in_wall in self.thermal_zone.inner_walls)\n            + sum(floor.ua_value for floor in self.thermal_zone.floors)\n            + sum(ceiling.ua_value for ceiling in self.thermal_zone.ceilings)\n            + sum(nzb.ua_value for nzb in self.nzbs_for_iw)\n        )\n\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_iw = 1 / (\n            sum(1 / in_wall.r_inner_conv for in_wall in self.thermal_zone.inner_walls)\n            + sum(1 / floor.r_inner_conv for floor in self.thermal_zone.floors)\n            + sum(1 / ceiling.r_inner_conv for ceiling in self.thermal_zone.ceilings)\n            + sum(1 / nzb.r_inner_conv for nzb in self.nzbs_for_iw)\n        )\n\n        self.r_rad_inner_iw = 1 / (\n            sum(1 / in_wall.r_inner_rad for in_wall in self.thermal_zone.inner_walls)\n            + sum(1 / floor.r_inner_rad for floor in self.thermal_zone.floors)\n            + sum(1 / ceiling.r_inner_rad for ceiling in self.thermal_zone.ceilings)\n            + sum(1 / nzb.r_inner_rad for nzb in self.nzbs_for_iw)\n        )\n\n        self.r_comb_inner_iw = 1 / (\n            sum(1 / in_wall.r_inner_comb for in_wall in self.thermal_zone.inner_walls)\n            + sum(1 / floor.r_inner_comb for floor in self.thermal_zone.floors)\n            + sum(1 / ceiling.r_inner_comb for ceiling in self.thermal_zone.ceilings)\n            + sum(1 / nzb.r_inner_comb for nzb in self.nzbs_for_iw)\n        )\n\n        self.ir_emissivity_inner_iw = (\n            sum(\n                in_wall.layer[0].material.ir_emissivity * in_wall.area\n                for in_wall in self.thermal_zone.inner_walls\n            )\n            + sum(\n                floor.layer[0].material.ir_emissivity * floor.area\n                for floor in self.thermal_zone.floors\n            )\n            + sum(\n                ceiling.layer[0].material.ir_emissivity * ceiling.area\n                for ceiling in self.thermal_zone.ceilings\n            )\n            + sum(\n                nzb.layer[0].material.ir_emissivity * nzb.area\n                for nzb in self.nzbs_for_iw\n            )\n        ) / self.area_iw\n\n        self.alpha_conv_inner_iw = 1 / (self.r_conv_inner_iw * self.area_iw)\n        self.alpha_rad_inner_iw = 1 / (self.r_rad_inner_iw * self.area_iw)\n        self.alpha_comb_inner_iw = 1 / (self.r_comb_inner_iw * self.area_iw)\n\n        # adjacent thermal zones are not supported!\n\n    def _sum_window_elements(self):\n        \"\"\"Sum attributes for window elements\n\n        This function sums and computes the area-weighted values,\n        where necessary (the class doc string) for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        Function is identical for TwoElement, ThreeElement and FourElement.\n        \"\"\"\n\n        self.area_win = sum(win.area for win in self.thermal_zone.windows)\n        self.ua_value_win = sum(win.ua_value for win in self.thermal_zone.windows)\n        self.u_value_win = self.ua_value_win / self.area_win\n\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_win = 1 / (\n            sum(1 / win.r_inner_conv for win in self.thermal_zone.windows)\n        )\n\n        self.r_rad_inner_win = 1 / (\n            sum(1 / win.r_inner_rad for win in self.thermal_zone.windows)\n        )\n\n        self.r_comb_inner_win = 1 / (\n            sum(1 / win.r_inner_comb for win in self.thermal_zone.windows)\n        )\n\n        self.ir_emissivity_inner_win = (\n            sum(\n                win.layer[0].material.ir_emissivity * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.alpha_conv_inner_win = 1 / (self.r_conv_inner_win * self.area_win)\n        self.alpha_rad_inner_win = 1 / (self.r_rad_inner_win * self.area_win)\n        self.alpha_comb_inner_win = 1 / (self.r_comb_inner_win * self.area_win)\n        self.ratio_conv_rad_inner_win = (\n            sum(win.a_conv * win.area for win in self.thermal_zone.windows)\n            / self.area_win\n        )\n\n        # values facing the ambient\n\n        self.r_conv_outer_win = 1 / (\n            sum(1 / win.r_outer_conv for win in self.thermal_zone.windows)\n        )\n\n        self.r_rad_outer_win = 1 / (\n            sum(1 / win.r_outer_rad for win in self.thermal_zone.windows)\n        )\n\n        self.r_comb_outer_win = 1 / (\n            sum(1 / win.r_outer_comb for win in self.thermal_zone.windows)\n        )\n\n        self.ir_emissivity_win = (\n            sum(\n                win.layer[-1].material.ir_emissivity * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.solar_absorp_win = (\n            sum(\n                win.layer[-1].material.solar_absorp * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.weighted_g_value = (\n            sum(win.g_value * win.area for win in self.thermal_zone.windows)\n            / self.area_win\n        )\n\n        self.alpha_conv_outer_win = 1 / (self.r_conv_outer_win * self.area_win)\n        self.alpha_rad_outer_win = 1 / (self.r_rad_outer_win * self.area_win)\n        self.alpha_comb_outer_win = 1 / (self.r_comb_outer_win * self.area_win)\n\n    def _calc_outer_elements(self):\n        \"\"\"Lumped parameter for outer wall elements\n\n        Calculates all necessary parameters for outer walls. This includes\n        OuterWalls and Rooftops.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        outer_walls : list\n            List containing all TEASER Wall instances that are treated as same\n            outer wall type. In case of TwoElement model OuterWalls, Rooftops\n        \"\"\"\n\n        omega = 2 * math.pi / 86400 / self.t_bt\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1039:1191]\n==teaser.logic.buildingobjects.calculation.three_element:[780:940]\n        self.area_iw = (\n            sum(in_wall.area for in_wall in self.thermal_zone.inner_walls)\n            + sum(floor.area for floor in self.thermal_zone.floors)\n            + sum(ceiling.area for ceiling in self.thermal_zone.ceilings)\n            + sum(nzb.area for nzb in self.nzbs_for_iw)\n        )\n\n        self.ua_value_iw = (\n            sum(in_wall.ua_value for in_wall in self.thermal_zone.inner_walls)\n            + sum(floor.ua_value for floor in self.thermal_zone.floors)\n            + sum(ceiling.ua_value for ceiling in self.thermal_zone.ceilings)\n            + sum(nzb.ua_value for nzb in self.nzbs_for_iw)\n        )\n\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_iw = 1 / (\n            sum(1 / in_wall.r_inner_conv for in_wall in self.thermal_zone.inner_walls)\n            + sum(1 / floor.r_inner_conv for floor in self.thermal_zone.floors)\n            + sum(1 / ceiling.r_inner_conv for ceiling in self.thermal_zone.ceilings)\n            + sum(1 / nzb.r_inner_conv for nzb in self.nzbs_for_iw)\n        )\n\n        self.r_rad_inner_iw = 1 / (\n            sum(1 / in_wall.r_inner_rad for in_wall in self.thermal_zone.inner_walls)\n            + sum(1 / floor.r_inner_rad for floor in self.thermal_zone.floors)\n            + sum(1 / ceiling.r_inner_rad for ceiling in self.thermal_zone.ceilings)\n            + sum(1 / nzb.r_inner_rad for nzb in self.nzbs_for_iw)\n        )\n\n        self.r_comb_inner_iw = 1 / (\n            sum(1 / in_wall.r_inner_comb for in_wall in self.thermal_zone.inner_walls)\n            + sum(1 / floor.r_inner_comb for floor in self.thermal_zone.floors)\n            + sum(1 / ceiling.r_inner_comb for ceiling in self.thermal_zone.ceilings)\n            + sum(1 / nzb.r_inner_comb for nzb in self.nzbs_for_iw)\n        )\n\n        self.ir_emissivity_inner_iw = (\n            sum(\n                in_wall.layer[0].material.ir_emissivity * in_wall.area\n                for in_wall in self.thermal_zone.inner_walls\n            )\n            + sum(\n                floor.layer[0].material.ir_emissivity * floor.area\n                for floor in self.thermal_zone.floors\n            )\n            + sum(\n                ceiling.layer[0].material.ir_emissivity * ceiling.area\n                for ceiling in self.thermal_zone.ceilings\n            )\n            + sum(\n                nzb.layer[0].material.ir_emissivity * nzb.area\n                for nzb in self.nzbs_for_iw\n            )\n        ) / self.area_iw\n\n        self.alpha_conv_inner_iw = 1 / (self.r_conv_inner_iw * self.area_iw)\n        self.alpha_rad_inner_iw = 1 / (self.r_rad_inner_iw * self.area_iw)\n        self.alpha_comb_inner_iw = 1 / (self.r_comb_inner_iw * self.area_iw)\n\n        # adjacent thermal zones are not supported!\n\n    def _sum_window_elements(self):\n        \"\"\"Sum attributes for window elements\n\n        This function sums and computes the area-weighted values,\n        where necessary (the class doc string) for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        Function is identical for TwoElement, ThreeElement and FourElement.\n        \"\"\"\n\n        self.area_win = sum(win.area for win in self.thermal_zone.windows)\n        self.ua_value_win = sum(win.ua_value for win in self.thermal_zone.windows)\n        self.u_value_win = self.ua_value_win / self.area_win\n\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_win = 1 / (\n            sum(1 / win.r_inner_conv for win in self.thermal_zone.windows)\n        )\n\n        self.r_rad_inner_win = 1 / (\n            sum(1 / win.r_inner_rad for win in self.thermal_zone.windows)\n        )\n\n        self.r_comb_inner_win = 1 / (\n            sum(1 / win.r_inner_comb for win in self.thermal_zone.windows)\n        )\n\n        self.ir_emissivity_inner_win = (\n            sum(\n                win.layer[0].material.ir_emissivity * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.alpha_conv_inner_win = 1 / (self.r_conv_inner_win * self.area_win)\n        self.alpha_rad_inner_win = 1 / (self.r_rad_inner_win * self.area_win)\n        self.alpha_comb_inner_win = 1 / (self.r_comb_inner_win * self.area_win)\n        self.ratio_conv_rad_inner_win = (\n            sum(win.a_conv * win.area for win in self.thermal_zone.windows)\n            / self.area_win\n        )\n\n        # values facing the ambient\n\n        self.r_conv_outer_win = 1 / (\n            sum(1 / win.r_outer_conv for win in self.thermal_zone.windows)\n        )\n\n        self.r_rad_outer_win = 1 / (\n            sum(1 / win.r_outer_rad for win in self.thermal_zone.windows)\n        )\n\n        self.r_comb_outer_win = 1 / (\n            sum(1 / win.r_outer_comb for win in self.thermal_zone.windows)\n        )\n\n        self.ir_emissivity_win = (\n            sum(\n                win.layer[-1].material.ir_emissivity * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.solar_absorp_win = (\n            sum(\n                win.layer[-1].material.solar_absorp * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.weighted_g_value = (\n            sum(win.g_value * win.area for win in self.thermal_zone.windows)\n            / self.area_win\n        )\n\n        self.alpha_conv_outer_win = 1 / (self.r_conv_outer_win * self.area_win)\n        self.alpha_rad_outer_win = 1 / (self.r_rad_outer_win * self.area_win)\n        self.alpha_comb_outer_win = 1 / (self.r_comb_outer_win * self.area_win)\n\n    def _calc_outer_elements(self):\n        \"\"\"Lumped parameter for outer wall elements\n\n        Calculates all necessary parameters for outer walls. This includes\n        OuterWalls and Rooftops.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        outer_walls : list\n            List containing all TEASER Wall instances that are treated as same\n            outer wall type. In case of TwoElement model OuterWalls, Rooftops\n        \"\"\"\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[376:566]\n==teaser.logic.buildingobjects.calculation.four_element:[395:585]\n        self.area_iw = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_iw = 0.0\n        self.alpha_rad_inner_iw = 0.0\n        self.alpha_comb_inner_iw = 0.0\n        # coefficient of heat transfer facing the adjacent thermal zone\n        self.alpha_conv_outer_iw = 0.0\n        self.alpha_rad_outer_iw = 0.0\n        self.alpha_comb_outer_iw = 0.0\n\n        # UA-Value\n        self.ua_value_iw = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_iw = 0.0\n        self.r_rad_inner_iw = 0.0\n        self.r_comb_inner_iw = 0.0\n        self.r_conv_outer_iw = 0.0\n        self.r_rad_outer_iw = 0.0\n        self.r_comb_outer_iw = 0.0\n\n        # lumped resistance/capacity\n        self.r1_iw = 0.0\n        self.c1_iw = 0.0\n\n        # Attributes for outer walls\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for GroundFloor\n        self.area_gf = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_gf = 0.0\n        self.alpha_rad_inner_gf = 0.0\n        self.alpha_comb_inner_gf = 0.0\n\n        # UA-Value\n        self.ua_value_gf = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_gf = 0.0\n        self.r_rad_inner_gf = 0.0\n        self.r_comb_inner_gf = 0.0\n\n        # lumped resistances/capacity\n        self.r1_gf = 0.0\n        self.r_rest_gf = 0.0\n        self.c1_gf = 0.0\n        self.r_total_gf = 0.0\n\n        # Optical properties\n        self.ir_emissivity_inner_gf = 0.0\n\n        # Additional attributes\n\n        self.weightfactor_ground = 0.0\n\n        # Attributes for rooftops\n        self.area_rt = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_rt = 0.0\n        self.alpha_rad_inner_rt = 0.0\n        self.alpha_comb_inner_rt = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_rt = 0.0\n        self.alpha_rad_outer_rt = 0.0\n        self.alpha_comb_outer_rt = 0.0\n\n        # UA-Value\n        self.ua_value_rt = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_rt = 0.0\n        self.r_rad_inner_rt = 0.0\n        self.r_comb_inner_rt = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_rt = 0.0\n        self.r_rad_outer_rt = 0.0\n        self.r_comb_outer_rt = 0.0\n\n        # lumped resistances/capacity\n        self.r1_rt = 0.0\n        self.r_rest_rt = 0.0\n        self.c1_rt = 0.0\n        self.r_total_rt = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_rt = 0.0\n        self.ir_emissivity_inner_rt = 0.0\n        self.solar_absorp_rt = 0.0\n\n        # Additional attributes\n        self.weightfactor_rt = []\n        self.weightfactor_win_rt = []\n        self.rooftop_areas = []\n        self.tilt_rt = []\n        self.orientation_rt = []\n\n        # TODO: check this value\n        self.r_rad_rt_iw = 0.0\n\n        # Attributes for windows\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0\n        self.ir_emissivity_inner_win = 0.0\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Attributes for neighboured zones (vectorized - one element per other\n        # zone)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[246:364]\n==teaser.logic.buildingobjects.calculation.two_element:[309:426]\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for windows\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0\n        self.ir_emissivity_inner_win = 0.0\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Misc values\n\n        self.alpha_rad_inner_mean = 0.0\n        self.alpha_rad_outer_mean = 0.0\n        self.n_outer = 0\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0\n        self.heat_load_outside_factor = 0.0\n        self.heat_load_ground_factor = 0.0\n\n    def calc_attributes(self):\n        \"\"\"Calls all necessary function to calculate model attributes\"\"\"\n        outer_walls = (\n            self.thermal_zone.outer_walls\n            + self.thermal_zone.ground_floors\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.find_izes_outer()\n        )\n\n        for out_wall in outer_walls:\n            out_wall.calc_equivalent_res(t_bt=self.t_bt_layer)\n            out_wall.calc_ua_value()\n        for win in self.thermal_zone.windows:\n            win.calc_equivalent_res()\n            win.calc_ua_value()\n        for inner_wall in (\n            self.thermal_zone.inner_walls\n            + self.thermal_zone.floors\n            + self.thermal_zone.ceilings",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[376:512]\n==teaser.logic.buildingobjects.calculation.four_element:[1596:1732]\n        self.area_iw = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_iw = 0.0\n        self.alpha_rad_inner_iw = 0.0\n        self.alpha_comb_inner_iw = 0.0\n        # coefficient of heat transfer facing the adjacent thermal zone\n        self.alpha_conv_outer_iw = 0.0\n        self.alpha_rad_outer_iw = 0.0\n        self.alpha_comb_outer_iw = 0.0\n\n        # UA-Value\n        self.ua_value_iw = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_iw = 0.0\n        self.r_rad_inner_iw = 0.0\n        self.r_comb_inner_iw = 0.0\n        self.r_conv_outer_iw = 0.0\n        self.r_rad_outer_iw = 0.0\n        self.r_comb_outer_iw = 0.0\n\n        # lumped resistance/capacity\n        self.r1_iw = 0.0\n        self.c1_iw = 0.0\n\n        # Attributes for outer walls\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for GroundFloor\n        self.area_gf = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_gf = 0.0\n        self.alpha_rad_inner_gf = 0.0\n        self.alpha_comb_inner_gf = 0.0\n\n        # UA-Value\n        self.ua_value_gf = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_gf = 0.0\n        self.r_rad_inner_gf = 0.0\n        self.r_comb_inner_gf = 0.0\n\n        # lumped resistances/capacity\n        self.r1_gf = 0.0\n        self.r_rest_gf = 0.0\n        self.c1_gf = 0.0\n        self.r_total_gf = 0.0\n\n        # Optical properties\n        self.ir_emissivity_inner_gf = 0.0\n\n        # Additional attributes\n\n        self.weightfactor_ground = 0.0\n\n        # Attributes for rooftops\n        self.area_rt = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_rt = 0.0\n        self.alpha_rad_inner_rt = 0.0\n        self.alpha_comb_inner_rt = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_rt = 0.0\n        self.alpha_rad_outer_rt = 0.0\n        self.alpha_comb_outer_rt = 0.0\n\n        # UA-Value\n        self.ua_value_rt = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_rt = 0.0\n        self.r_rad_inner_rt = 0.0\n        self.r_comb_inner_rt = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_rt = 0.0\n        self.r_rad_outer_rt = 0.0\n        self.r_comb_outer_rt = 0.0\n\n        # lumped resistances/capacity\n        self.r1_rt = 0.0\n        self.r_rest_rt = 0.0\n        self.c1_rt = 0.0\n        self.r_total_rt = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_rt = 0.0\n        self.ir_emissivity_inner_rt = 0.0\n        self.solar_absorp_rt = 0.0\n\n        # Additional attributes\n        self.weightfactor_rt = []",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1759:1895]\n==teaser.logic.buildingobjects.calculation.four_element:[395:531]\n        self.area_iw = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_iw = 0.0\n        self.alpha_rad_inner_iw = 0.0\n        self.alpha_comb_inner_iw = 0.0\n        # coefficient of heat transfer facing the adjacent thermal zone\n        self.alpha_conv_outer_iw = 0.0\n        self.alpha_rad_outer_iw = 0.0\n        self.alpha_comb_outer_iw = 0.0\n\n        # UA-Value\n        self.ua_value_iw = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_iw = 0.0\n        self.r_rad_inner_iw = 0.0\n        self.r_comb_inner_iw = 0.0\n        self.r_conv_outer_iw = 0.0\n        self.r_rad_outer_iw = 0.0\n        self.r_comb_outer_iw = 0.0\n\n        # lumped resistance/capacity\n        self.r1_iw = 0.0\n        self.c1_iw = 0.0\n\n        # Attributes for outer walls\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for GroundFloor\n        self.area_gf = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_gf = 0.0\n        self.alpha_rad_inner_gf = 0.0\n        self.alpha_comb_inner_gf = 0.0\n\n        # UA-Value\n        self.ua_value_gf = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_gf = 0.0\n        self.r_rad_inner_gf = 0.0\n        self.r_comb_inner_gf = 0.0\n\n        # lumped resistances/capacity\n        self.r1_gf = 0.0\n        self.r_rest_gf = 0.0\n        self.c1_gf = 0.0\n        self.r_total_gf = 0.0\n\n        # Optical properties\n        self.ir_emissivity_inner_gf = 0.0\n\n        # Additional attributes\n\n        self.weightfactor_ground = 0.0\n\n        # Attributes for rooftops\n        self.area_rt = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_rt = 0.0\n        self.alpha_rad_inner_rt = 0.0\n        self.alpha_comb_inner_rt = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_rt = 0.0\n        self.alpha_rad_outer_rt = 0.0\n        self.alpha_comb_outer_rt = 0.0\n\n        # UA-Value\n        self.ua_value_rt = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_rt = 0.0\n        self.r_rad_inner_rt = 0.0\n        self.r_comb_inner_rt = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_rt = 0.0\n        self.r_rad_outer_rt = 0.0\n        self.r_comb_outer_rt = 0.0\n\n        # lumped resistances/capacity\n        self.r1_rt = 0.0\n        self.r_rest_rt = 0.0\n        self.c1_rt = 0.0\n        self.r_total_rt = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_rt = 0.0\n        self.ir_emissivity_inner_rt = 0.0\n        self.solar_absorp_rt = 0.0\n\n        # Additional attributes\n        self.weightfactor_rt = []",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_900:[75:162]\n==teaser.examples.verification.verification_ASHRAE_140_920:[75:162]\n    tz.area = 8.0 * 6.0\n    tz.volume = tz.area * 2.7\n    tz.use_conditions = UseConditions(parent=tz)\n    tz.use_conditions.base_infiltration = 0.41\n\n    roof = Rooftop(parent=tz)\n    roof.name = \"Roof\"\n    roof.area = 8.0 * 6.0\n    roof.orientation = -1.0\n    roof.tilt = 0.0\n    roof.inner_convection = 1\n    roof.outer_convection = 24.67\n    roof.inner_radiation = 5.13\n    roof.outer_radiation = 4.63\n\n    layer_r1 = Layer(parent=roof, id=0)\n    layer_r1.thickness = 0.01\n\n    material_r1 = Material(layer_r1)\n    material_r1.name = \"Plasterboard\"\n    material_r1.density = 950.0\n    material_r1.heat_capac = 840.0 / 1000\n    material_r1.thermal_conduc = 0.16\n    material_r1.ir_emissivity = 0.9\n\n    layer_r2 = Layer(parent=roof, id=1)\n    layer_r2.thickness = 0.1118\n\n    material_r2 = Material(layer_r2)\n    material_r2.name = \"Fiberglass\"\n    material_r2.density = 12\n    material_r2.heat_capac = 840 / 1000\n    material_r2.thermal_conduc = 0.04\n\n    layer_r3 = Layer(parent=roof, id=2)\n    layer_r3.thickness = 0.019\n\n    material_r3 = Material(layer_r3)\n    material_r3.name = \"Roofdeck\"\n    material_r3.density = 530\n    material_r3.heat_capac = 900 / 1000\n    material_r3.thermal_conduc = 0.14\n    material_r3.solar_absorp = 0.6\n    material_r3.ir_emissivity = 0.9\n\n    out_wall_north = OuterWall(parent=tz)\n    out_wall_north.name = \"OuterWallNorth\"\n    out_wall_north.area = 8.0 * 2.7\n    out_wall_north.orientation = 0.0\n    out_wall_north.tilt = 90.0\n    out_wall_north.inner_convection = 3.16\n    out_wall_north.outer_convection = 24.67\n    out_wall_north.inner_radiation = 5.13\n    out_wall_north.outer_radiation = 4.63\n\n    layer_own1 = Layer(parent=out_wall_north, id=0)\n    layer_own1.thickness = 0.1\n\n    material_own1 = Material(layer_own1)\n    material_own1.name = \"Concrete\"\n    material_own1.density = 1400.0\n    material_own1.heat_capac = 1000 / 1000\n    material_own1.thermal_conduc = 0.51\n    material_own1.ir_emissivity = 0.9\n\n    layer_own2 = Layer(parent=out_wall_north, id=1)\n    layer_own2.thickness = 0.062\n\n    material_own2 = Material(layer_own2)\n    material_own2.name = \"FoamInsulation\"\n    material_own2.density = 10\n    material_own2.heat_capac = 1400 / 1000\n    material_own2.thermal_conduc = 0.04\n\n    layer_own3 = Layer(parent=out_wall_north, id=2)\n    layer_own3.thickness = 0.009\n\n    material_own3 = Material(layer_own3)\n    material_own3.name = \"WoodSiding\"\n    material_own3.density = 530\n    material_own3.heat_capac = 900 / 1000\n    material_own3.thermal_conduc = 0.14\n    material_own3.solar_absorp = 0.6\n    material_own3.ir_emissivity = 0.9\n\n    out_wall_east = OuterWall(parent=tz)\n    out_wall_east.name = \"OuterWallEast\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[75:163]\n==teaser.examples.verification.verification_ASHRAE_140_620:[76:163]\n    tz.area = 8.0 * 6.0\n    tz.volume = tz.area * 2.7\n\n    tz.use_conditions = UseConditions(parent=tz)\n    tz.use_conditions.base_infiltration = 0.41\n\n    roof = Rooftop(parent=tz)\n    roof.name = \"Roof\"\n    roof.area = 8.0 * 6.0\n    roof.orientation = -1.0\n    roof.tilt = 0.0\n    roof.inner_convection = 1\n    roof.outer_convection = 24.67\n    roof.inner_radiation = 5.13\n    roof.outer_radiation = 4.63\n\n    layer_r1 = Layer(parent=roof, id=0)\n    layer_r1.thickness = 0.01\n\n    material_r1 = Material(layer_r1)\n    material_r1.name = \"Plasterboard\"\n    material_r1.density = 950.0\n    material_r1.heat_capac = 840.0 / 1000\n    material_r1.thermal_conduc = 0.16\n    material_r1.ir_emissivity = 0.9\n\n    layer_r2 = Layer(parent=roof, id=1)\n    layer_r2.thickness = 0.1118\n\n    material_r2 = Material(layer_r2)\n    material_r2.name = \"Fiberglass\"\n    material_r2.density = 12\n    material_r2.heat_capac = 840 / 1000\n    material_r2.thermal_conduc = 0.04\n\n    layer_r3 = Layer(parent=roof, id=2)\n    layer_r3.thickness = 0.019\n\n    material_r3 = Material(layer_r3)\n    material_r3.name = \"Roofdeck\"\n    material_r3.density = 530\n    material_r3.heat_capac = 900 / 1000\n    material_r3.thermal_conduc = 0.14\n    material_r3.solar_absorp = 0.6\n    material_r3.ir_emissivity = 0.9\n\n    out_wall_north = OuterWall(parent=tz)\n    out_wall_north.name = \"OuterWallNorth\"\n    out_wall_north.area = 8.0 * 2.7\n    out_wall_north.orientation = 0.0\n    out_wall_north.tilt = 90.0\n    out_wall_north.inner_convection = 3.16\n    out_wall_north.outer_convection = 24.67\n    out_wall_north.inner_radiation = 5.13\n    out_wall_north.outer_radiation = 4.63\n\n    layer_own1 = Layer(parent=out_wall_north, id=0)\n    layer_own1.thickness = 0.012\n\n    material_own1 = Material(layer_own1)\n    material_own1.name = \"Plasterboard\"\n    material_own1.density = 950.0\n    material_own1.heat_capac = 840.0 / 1000\n    material_own1.thermal_conduc = 0.16\n    material_own1.ir_emissivity = 0.9\n\n    layer_own2 = Layer(parent=out_wall_north, id=1)\n    layer_own2.thickness = 0.066\n\n    material_own2 = Material(layer_own2)\n    material_own2.name = \"Fiberglass\"\n    material_own2.density = 12\n    material_own2.heat_capac = 840 / 1000\n    material_own2.thermal_conduc = 0.04\n\n    layer_own3 = Layer(parent=out_wall_north, id=2)\n    layer_own3.thickness = 0.009\n\n    material_own3 = Material(layer_own3)\n    material_own3.name = \"WoodSiding\"\n    material_own3.density = 530\n    material_own3.heat_capac = 900 / 1000\n    material_own3.thermal_conduc = 0.14\n    material_own3.solar_absorp = 0.6\n    material_own3.ir_emissivity = 0.9\n\n    out_wall_east = OuterWall(parent=tz)\n    out_wall_east.name = \"OuterWallEast\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.three_element:[944:1040]\n==teaser.logic.buildingobjects.calculation.two_element:[852:954]\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.find_izes_outer()\n        )\n\n        if 0 < len(outer_walls) <= 1:\n            # only one outer wall, no need to calculate chain matrix\n            self.r1_ow = outer_walls[0].r1\n            self.c1_ow = outer_walls[0].c1_korr\n        elif len(outer_walls) > 1:\n            # more than one outer wall, calculate chain matrix\n            self.r1_ow, self.c1_ow = self._calc_parallel_connection(\n                outer_walls, omega, mode='ow'\n            )\n\n        if self.merge_windows is False:\n            try:\n\n                if len(self.thermal_zone.windows) > 0:\n                    self.r1_win = 1 / sum(\n                        (1 / win.r1) for win in self.thermal_zone.windows\n                    )\n                if len(outer_walls) > 0:\n                    conduction = 1 / sum(\n                        (1 / element.r_conduc) for element in outer_walls\n                    )\n\n                    self.r_rest_ow = conduction - self.r1_ow\n\n            except RuntimeError:\n                print(\n                    \"As no outer walls or no windows are defined lumped \"\n                    \"parameter cannot be calculated\"\n                )\n\n        if self.merge_windows is True:\n\n            try:\n                if (\n                    len(self.thermal_zone.windows) > 0\n                    and len(outer_walls) > 0\n                ):\n                    self.r1_win = 1 / sum(\n                        1 / (win.r1 / 6) for win in self.thermal_zone.windows\n                    )\n\n                    self.r1_ow = 1 / (1 / self.r1_ow + 1 / self.r1_win)\n\n                    self.r_total_ow = 1 / (self.ua_value_ow + self.ua_value_win)\n                    self.r_rest_ow = (\n                        self.r_total_ow\n                        - self.r1_ow\n                        - 1\n                        / (\n                            (\n                                (1 / self.r_conv_inner_ow)\n                                + (1 / self.r_conv_inner_win)\n                                + (1 / self.r_rad_inner_ow)\n                                + (1 / self.r_rad_inner_win)\n                            )\n                        )\n                    ) - 1 / (self.alpha_comb_outer_ow * self.area_ow)\n\n                self.ir_emissivity_inner_ow = (\n                    self.ir_emissivity_inner_ow * self.area_ow\n                    + self.ir_emissivity_inner_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.ir_emissivity_outer_ow = (\n                    self.ir_emissivity_outer_ow * self.area_ow\n                    + self.ir_emissivity_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.solar_absorp_ow = (\n                    self.solar_absorp_ow * self.area_ow\n                    + self.solar_absorp_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n            except RuntimeError:\n                print(\n                    \"As no outer walls or no windows are defined lumped \"\n                    \"parameter cannot be calculated\"\n                )\n\n    def _calc_ground_floor_elements(self):\n        \"\"\"Lumped parameter for ground floor elements\n\n        Calculates all necessary parameters for ground floors.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        \"\"\"\n\n        omega = 2 * math.pi / 86400 / self.t_bt\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1172:1266]\n==teaser.logic.buildingobjects.calculation.three_element:[956:1049]\n            )\n\n        if self.merge_windows is False:\n            try:\n\n                if len(self.thermal_zone.windows) > 0:\n                    self.r1_win = 1 / sum(\n                        (1 / win.r1) for win in self.thermal_zone.windows\n                    )\n                if len(outer_walls) > 0:\n                    conduction = 1 / sum(\n                        (1 / element.r_conduc) for element in outer_walls\n                    )\n\n                    self.r_rest_ow = conduction - self.r1_ow\n\n            except RuntimeError:\n                print(\n                    \"As no outer walls or no windows are defined lumped \"\n                    \"parameter cannot be calculated\"\n                )\n\n        if self.merge_windows is True:\n\n            try:\n                if (\n                        len(self.thermal_zone.windows) > 0\n                        and len(outer_walls) > 0\n                ):\n                    self.r1_win = 1 / sum(\n                        1 / (win.r1 / 6) for win in self.thermal_zone.windows\n                    )\n\n                    self.r1_ow = 1 / (1 / self.r1_ow + 1 / self.r1_win)\n\n                    self.r_total_ow = 1 / (self.ua_value_ow + self.ua_value_win)\n                    self.r_rest_ow = (\n                        self.r_total_ow\n                        - self.r1_ow\n                        - 1\n                        / (\n                            (\n                                (1 / self.r_conv_inner_ow)\n                                + (1 / self.r_conv_inner_win)\n                                + (1 / self.r_rad_inner_ow)\n                                + (1 / self.r_rad_inner_win)\n                            )\n                        )\n                    ) - 1 / (self.alpha_comb_outer_ow * self.area_ow)\n\n                self.ir_emissivity_inner_ow = (\n                    self.ir_emissivity_inner_ow * self.area_ow\n                    + self.ir_emissivity_inner_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.ir_emissivity_outer_ow = (\n                    self.ir_emissivity_outer_ow * self.area_ow\n                    + self.ir_emissivity_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.solar_absorp_ow = (\n                    self.solar_absorp_ow * self.area_ow\n                    + self.solar_absorp_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n            except RuntimeError:\n                print(\n                    \"As no outer walls or no windows are defined lumped \"\n                    \"parameter cannot be calculated\"\n                )\n\n    def _calc_ground_floor_elements(self):\n        \"\"\"Lumped parameter for ground floor elements\n\n        Calculates lumped parameters for ground floors. No windows in ground\n        floor allowed.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        \"\"\"\n\n        omega = 2 * math.pi / 86400 / self.t_bt\n\n        if 0 < len(self.thermal_zone.ground_floors) <= 1:\n            # only one outer wall, no need to calculate chain matrix\n            self.r1_gf = self.thermal_zone.ground_floors[0].r1\n            self.c1_gf = self.thermal_zone.ground_floors[0].c1_korr\n        elif len(self.thermal_zone.ground_floors) > 1:\n            # more than one outer wall, calculate chain matrix\n            self.r1_gf, self.c1_gf = self._calc_parallel_connection(\n                self.thermal_zone.ground_floors, omega, mode='ow'\n            )",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[587:692]\n==teaser.logic.buildingobjects.calculation.two_element:[758:863]\n        self.area_win = sum(win.area for win in self.thermal_zone.windows)\n        self.ua_value_win = sum(win.ua_value for win in self.thermal_zone.windows)\n        self.u_value_win = self.ua_value_win / self.area_win\n\n        self.r_total_win = 1 / self.ua_value_win\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_win = 1 / (\n            sum(1 / win.r_inner_conv for win in self.thermal_zone.windows)\n        )\n\n        self.r_rad_inner_win = 1 / (\n            sum(1 / win.r_inner_rad for win in self.thermal_zone.windows)\n        )\n\n        self.r_comb_inner_win = 1 / (\n            sum(1 / win.r_inner_comb for win in self.thermal_zone.windows)\n        )\n\n        self.ir_emissivity_inner_win = (\n            sum(\n                win.layer[0].material.ir_emissivity * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.alpha_conv_inner_win = 1 / (self.r_conv_inner_win * self.area_win)\n        self.alpha_rad_inner_win = 1 / (self.r_rad_inner_win * self.area_win)\n        self.alpha_comb_inner_win = 1 / (self.r_comb_inner_win * self.area_win)\n        self.ratio_conv_rad_inner_win = (\n            sum(win.a_conv * win.area for win in self.thermal_zone.windows)\n            / self.area_win\n        )\n\n        # values facing the ambient\n\n        self.r_conv_outer_win = 1 / (\n            sum(1 / win.r_outer_conv for win in self.thermal_zone.windows)\n        )\n\n        self.r_rad_outer_win = 1 / (\n            sum(1 / win.r_outer_rad for win in self.thermal_zone.windows)\n        )\n\n        self.r_comb_outer_win = 1 / (\n            sum(1 / win.r_outer_comb for win in self.thermal_zone.windows)\n        )\n\n        self.ir_emissivity_win = (\n            sum(\n                win.layer[-1].material.ir_emissivity * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.solar_absorp_win = (\n            sum(\n                win.layer[-1].material.solar_absorp * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.weighted_g_value = (\n            sum(win.g_value * win.area for win in self.thermal_zone.windows)\n            / self.area_win\n        )\n\n        self.alpha_conv_outer_win = 1 / (self.r_conv_outer_win * self.area_win)\n        self.alpha_rad_outer_win = 1 / (self.r_rad_outer_win * self.area_win)\n        self.alpha_comb_outer_win = 1 / (self.r_comb_outer_win * self.area_win)\n\n    def _calc_outer_elements(self):\n        \"\"\"Lumped parameter for outer wall elements\n\n        Calculates all necessary parameters for outer walls. This includes\n        OuterWalls, GroundFloors and Rooftops.\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        outer_walls : list\n            List containing all TEASER Wall instances that are treated as same\n            outer wall type. In case of TwoElement model OuterWalls,\n            GroundFloors, Rooftops\n        \"\"\"\n\n        omega = 2 * math.pi / 86400 / self.t_bt\n\n        outer_walls = (\n            self.thermal_zone.outer_walls\n            + self.thermal_zone.ground_floors\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.find_izes_outer()\n        )\n\n        if 0 < len(outer_walls) <= 1:\n            # only one outer wall, no need to calculate chain matrix\n            self.r1_ow = outer_walls[0].r1\n            self.c1_ow = outer_walls[0].c1_korr\n        elif len(outer_walls) > 1:\n            # more than one outer wall, calculate chain matrix\n            self.r1_ow, self.c1_ow = self._calc_parallel_connection(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1172:1257]\n==teaser.logic.buildingobjects.calculation.two_element:[864:954]\n            )\n\n        if self.merge_windows is False:\n            try:\n\n                if len(self.thermal_zone.windows) > 0:\n                    self.r1_win = 1 / sum(\n                        (1 / win.r1) for win in self.thermal_zone.windows\n                    )\n                if len(outer_walls) > 0:\n                    conduction = 1 / sum(\n                        (1 / element.r_conduc) for element in outer_walls\n                    )\n\n                    self.r_rest_ow = conduction - self.r1_ow\n\n            except RuntimeError:\n                print(\n                    \"As no outer walls or no windows are defined lumped \"\n                    \"parameter cannot be calculated\"\n                )\n\n        if self.merge_windows is True:\n\n            try:\n                if (\n                        len(self.thermal_zone.windows) > 0\n                        and len(outer_walls) > 0\n                ):\n                    self.r1_win = 1 / sum(\n                        1 / (win.r1 / 6) for win in self.thermal_zone.windows\n                    )\n\n                    self.r1_ow = 1 / (1 / self.r1_ow + 1 / self.r1_win)\n\n                    self.r_total_ow = 1 / (self.ua_value_ow + self.ua_value_win)\n                    self.r_rest_ow = (\n                        self.r_total_ow\n                        - self.r1_ow\n                        - 1\n                        / (\n                            (\n                                (1 / self.r_conv_inner_ow)\n                                + (1 / self.r_conv_inner_win)\n                                + (1 / self.r_rad_inner_ow)\n                                + (1 / self.r_rad_inner_win)\n                            )\n                        )\n                    ) - 1 / (self.alpha_comb_outer_ow * self.area_ow)\n\n                self.ir_emissivity_inner_ow = (\n                    self.ir_emissivity_inner_ow * self.area_ow\n                    + self.ir_emissivity_inner_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.ir_emissivity_outer_ow = (\n                    self.ir_emissivity_outer_ow * self.area_ow\n                    + self.ir_emissivity_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.solar_absorp_ow = (\n                    self.solar_absorp_ow * self.area_ow\n                    + self.solar_absorp_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n            except RuntimeError:\n                print(\n                    \"As no outer walls or no windows are defined lumped \"\n                    \"parameter cannot be calculated\"\n                )\n\n    def _calc_ground_floor_elements(self):\n        \"\"\"Lumped parameter for ground floor elements\n\n        Calculates lumped parameters for ground floors. No windows in ground\n        floor allowed.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        \"\"\"\n\n        omega = 2 * math.pi / 86400 / self.t_bt\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[387:493]\n==teaser.logic.buildingobjects.calculation.three_element:[313:419]\n        self.internal_id = random.random()\n\n        self.thermal_zone = thermal_zone\n        self.merge_windows = merge_windows\n        self.t_bt = t_bt\n        self.t_bt_layer = t_bt_layer\n\n        # Attributes of inner walls\n        self.area_iw = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_iw = 0.0\n        self.alpha_rad_inner_iw = 0.0\n        self.alpha_comb_inner_iw = 0.0\n        # coefficient of heat transfer facing the adjacent thermal zone\n        self.alpha_conv_outer_iw = 0.0\n        self.alpha_rad_outer_iw = 0.0\n        self.alpha_comb_outer_iw = 0.0\n\n        # UA-Value\n        self.ua_value_iw = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_iw = 0.0\n        self.r_rad_inner_iw = 0.0\n        self.r_comb_inner_iw = 0.0\n        self.r_conv_outer_iw = 0.0\n        self.r_rad_outer_iw = 0.0\n        self.r_comb_outer_iw = 0.0\n\n        # lumped resistance/capacity\n        self.r1_iw = 0.0\n        self.c1_iw = 0.0\n\n        # Attributes for outer walls\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for GroundFloor\n        self.area_gf = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_gf = 0.0\n        self.alpha_rad_inner_gf = 0.0\n        self.alpha_comb_inner_gf = 0.0\n\n        # UA-Value\n        self.ua_value_gf = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_gf = 0.0\n        self.r_rad_inner_gf = 0.0\n        self.r_comb_inner_gf = 0.0\n\n        # lumped resistances/capacity\n        self.r1_gf = 0.0\n        self.r_rest_gf = 0.0\n        self.c1_gf = 0.0\n        self.r_total_gf = 0.0\n\n        # Optical properties\n        self.ir_emissivity_inner_gf = 0.0\n\n        # Additional attributes\n\n        self.weightfactor_ground = 0.0\n\n        # Attributes for rooftops",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_620:[302:375]\n==teaser.examples.verification.verification_ASHRAE_140_920:[301:374]\n    material_iwf2 = Material(layer_iwf2)\n    material_iwf2.name = \"Insulation\"\n    material_iwf2.density = 0.000000000001  # 0.0001, as small as possible\n    material_iwf2.heat_capac = 0.000000000001  # 0.0001, as small as possible\n    material_iwf2.thermal_conduc = 0.04\n\n    win_1 = Window(parent=tz)\n    win_1.name = \"WindowWest\"\n    win_1.area = 3 * 2\n    win_1.tilt = 90.0\n    win_1.orientation = 270.0\n    win_1.inner_convection = 3.16\n    win_1.inner_radiation = 5.13\n    win_1.outer_convection = 16.37\n    win_1.outer_radiation = 4.63\n    win_1.g_value = 0.789\n    win_1.a_conv = 0.03  # for the given U-value extracted from VDI 6007-2/-3\n\n    win_1_layer = Layer(parent=win_1)\n    win_1_layer.id = 1\n    win_1_layer.thickness = 0.024\n\n    win_1_material = Material(win_1_layer)\n    win_1_material.name = \"GlasWindow\"\n    win_1_material.thermal_conduc = 0.15\n    win_1_material.transmittance = 0.907\n    win_1_material.ir_emissivity = 0.9\n\n    win_2 = Window(parent=tz)\n    win_2.name = \"WindowEast\"\n    win_2.area = 3 * 2\n    win_2.tilt = 90.0\n    win_2.orientation = 90.0\n    win_2.inner_convection = 3.16\n    win_2.inner_radiation = 5.13\n    win_2.outer_convection = 16.37\n    win_2.outer_radiation = 4.63\n    win_2.g_value = 0.789\n    win_2.a_conv = 0.03  # for the given U-value extracted from VDI 6007-2/-3\n\n    win_2_layer = Layer(parent=win_2)\n    win_2_layer.id = 1\n    win_2_layer.thickness = 0.024\n\n    win_2_material = Material(win_2_layer)\n    win_2_material.name = \"GlasWindow\"\n    win_2_material.thermal_conduc = 0.15\n    win_2_material.transmittance = 0.907\n    win_2_material.ir_emissivity = 0.9\n\n    #  This is a dummy ground floor to export three and four elements models.\n    #  Please set values for floor plate in three element and four element\n    #  models to default.\n\n    if number_of_elements >= 3:\n        out_wall_gf = GroundFloor(parent=tz)\n        out_wall_gf.name = \"ExtWallGroundFloor\"\n        out_wall_gf.area = 6 * 8\n        out_wall_gf.orientation = -2.0\n        out_wall_gf.tilt = 0.0\n        out_wall_gf.inner_convection = 4.13\n        out_wall_gf.inner_radiation = 5.13\n\n        layer_ofgw1 = Layer(parent=out_wall_gf, id=0)\n        layer_ofgw1.thickness = 1.003\n\n        material_ofgw1 = Material(layer_ofgw1)\n        material_ofgw1.name = \"Insulation\"\n        material_ofgw1.density = 0.0001  # as small as possible\n        material_ofgw1.heat_capac = 0.0001  # as small as possible\n        material_ofgw1.thermal_conduc = 0.04\n\n    if save:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[302:375]\n==teaser.examples.verification.verification_ASHRAE_140_900:[301:374]\n    material_iwf2 = Material(layer_iwf2)\n    material_iwf2.name = \"Insulation\"\n    material_iwf2.density = 0.000000000001  # 0.0001, as small as possible\n    material_iwf2.heat_capac = 0.000000000001  # 0.0001, as small as possible\n    material_iwf2.thermal_conduc = 0.04\n\n    win_1 = Window(parent=tz)\n    win_1.name = \"WindowSouthLeft\"\n    win_1.area = 3 * 2\n    win_1.tilt = 90.0\n    win_1.orientation = 180.0\n    win_1.inner_convection = 3.16\n    win_1.inner_radiation = 5.13\n    win_1.outer_convection = 16.37\n    win_1.outer_radiation = 4.63\n    win_1.g_value = 0.789\n    win_1.a_conv = 0.03  # for the given U-value extracted from VDI 6007-2/-3\n\n    win_1_layer = Layer(parent=win_1)\n    win_1_layer.id = 1\n    win_1_layer.thickness = 0.024\n\n    win_1_material = Material(win_1_layer)\n    win_1_material.name = \"GlasWindow\"\n    win_1_material.thermal_conduc = 0.15\n    win_1_material.transmittance = 0.907\n    win_1_material.ir_emissivity = 0.9\n\n    win_2 = Window(parent=tz)\n    win_2.name = \"WindowSouthRight\"\n    win_2.area = 3 * 2\n    win_2.tilt = 90.0\n    win_2.orientation = 180.0\n    win_2.inner_convection = 3.16\n    win_2.inner_radiation = 5.13\n    win_2.outer_convection = 16.37\n    win_2.outer_radiation = 4.63\n    win_2.g_value = 0.789\n    win_2.a_conv = 0.03  # for the given U-value extracted from VDI 6007-2/-3\n\n    win_2_layer = Layer(parent=win_2)\n    win_2_layer.id = 1\n    win_2_layer.thickness = 0.024\n\n    win_2_material = Material(win_2_layer)\n    win_2_material.name = \"GlasWindow\"\n    win_2_material.thermal_conduc = 0.15\n    win_2_material.transmittance = 0.907\n    win_2_material.ir_emissivity = 0.9\n\n    #  This is a dummy ground floor to export three and four elements models.\n    #  Please set values for floor plate in three element and four element\n    #  models to default.\n\n    if number_of_elements >= 3:\n        out_wall_gf = GroundFloor(parent=tz)\n        out_wall_gf.name = \"ExtWallGroundFloor\"\n        out_wall_gf.area = 6 * 8\n        out_wall_gf.orientation = -2.0\n        out_wall_gf.tilt = 0.0\n        out_wall_gf.inner_convection = 4.13\n        out_wall_gf.inner_radiation = 5.13\n\n        layer_ofgw1 = Layer(parent=out_wall_gf, id=0)\n        layer_ofgw1.thickness = 1.003\n\n        material_ofgw1 = Material(layer_ofgw1)\n        material_ofgw1.name = \"Insulation\"\n        material_ofgw1.density = 0.0001  # as small as possible\n        material_ofgw1.heat_capac = 0.0001  # as small as possible\n        material_ofgw1.thermal_conduc = 0.04\n\n    if save:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1172:1255]\n==teaser.logic.buildingobjects.calculation.one_element:[693:779]\n            )\n\n        if self.merge_windows is False:\n            try:\n\n                if len(self.thermal_zone.windows) > 0:\n                    self.r1_win = 1 / sum(\n                        (1 / win.r1) for win in self.thermal_zone.windows\n                    )\n                if len(outer_walls) > 0:\n                    conduction = 1 / sum(\n                        (1 / element.r_conduc) for element in outer_walls\n                    )\n\n                    self.r_rest_ow = conduction - self.r1_ow\n\n            except RuntimeError:\n                print(\n                    \"As no outer walls or no windows are defined lumped \"\n                    \"parameter cannot be calculated\"\n                )\n\n        if self.merge_windows is True:\n\n            try:\n\n                if (\n                    len(self.thermal_zone.windows) > 0\n                    and len(outer_walls) > 0\n                ):\n                    self.r1_win = 1 / sum(\n                        1 / (win.r1 / 6) for win in self.thermal_zone.windows\n                    )\n\n                    self.r1_ow = 1 / (1 / self.r1_ow + 1 / self.r1_win)\n\n                    self.r_total_ow = 1 / (self.ua_value_ow + self.ua_value_win)\n                    self.r_rest_ow = (\n                        self.r_total_ow\n                        - self.r1_ow\n                        - 1\n                        / (\n                            (\n                                (1 / self.r_conv_inner_ow)\n                                + (1 / self.r_conv_inner_win)\n                                + (1 / self.r_rad_inner_ow)\n                                + (1 / self.r_rad_inner_win)\n                            )\n                        )\n                    ) - 1 / (self.alpha_comb_outer_ow * self.area_ow)\n\n                self.ir_emissivity_inner_ow = (\n                    self.ir_emissivity_inner_ow * self.area_ow\n                    + self.ir_emissivity_inner_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.ir_emissivity_outer_ow = (\n                    self.ir_emissivity_outer_ow * self.area_ow\n                    + self.ir_emissivity_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.solar_absorp_ow = (\n                    self.solar_absorp_ow * self.area_ow\n                    + self.solar_absorp_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n            except RuntimeError:\n                print(\n                    \"As no outer walls or no windows are defined lumped \"\n                    \"parameter cannot be calculated\"\n                )\n\n    def _calc_wf(self):\n        \"\"\"Weightfactors for outer elements(walls, roof, ground floor, windows)\n\n        Calculates the weightfactors of the outer walls, including ground and\n        windows.\n\n        Parameters\n        ----------\n        outer_walls : list\n            List containing all TEASER Wall instances that are treated as same\n            outer wall type. In case of TwoElement model OuterWalls,\n            GroundFloors, Rooftops\n        \"\"\"\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[594:680]\n==teaser.logic.buildingobjects.calculation.three_element:[858:944]\n        self.r_conv_inner_win = 1 / (\n            sum(1 / win.r_inner_conv for win in self.thermal_zone.windows)\n        )\n\n        self.r_rad_inner_win = 1 / (\n            sum(1 / win.r_inner_rad for win in self.thermal_zone.windows)\n        )\n\n        self.r_comb_inner_win = 1 / (\n            sum(1 / win.r_inner_comb for win in self.thermal_zone.windows)\n        )\n\n        self.ir_emissivity_inner_win = (\n            sum(\n                win.layer[0].material.ir_emissivity * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.alpha_conv_inner_win = 1 / (self.r_conv_inner_win * self.area_win)\n        self.alpha_rad_inner_win = 1 / (self.r_rad_inner_win * self.area_win)\n        self.alpha_comb_inner_win = 1 / (self.r_comb_inner_win * self.area_win)\n        self.ratio_conv_rad_inner_win = (\n            sum(win.a_conv * win.area for win in self.thermal_zone.windows)\n            / self.area_win\n        )\n\n        # values facing the ambient\n\n        self.r_conv_outer_win = 1 / (\n            sum(1 / win.r_outer_conv for win in self.thermal_zone.windows)\n        )\n\n        self.r_rad_outer_win = 1 / (\n            sum(1 / win.r_outer_rad for win in self.thermal_zone.windows)\n        )\n\n        self.r_comb_outer_win = 1 / (\n            sum(1 / win.r_outer_comb for win in self.thermal_zone.windows)\n        )\n\n        self.ir_emissivity_win = (\n            sum(\n                win.layer[-1].material.ir_emissivity * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.solar_absorp_win = (\n            sum(\n                win.layer[-1].material.solar_absorp * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.weighted_g_value = (\n            sum(win.g_value * win.area for win in self.thermal_zone.windows)\n            / self.area_win\n        )\n\n        self.alpha_conv_outer_win = 1 / (self.r_conv_outer_win * self.area_win)\n        self.alpha_rad_outer_win = 1 / (self.r_rad_outer_win * self.area_win)\n        self.alpha_comb_outer_win = 1 / (self.r_comb_outer_win * self.area_win)\n\n    def _calc_outer_elements(self):\n        \"\"\"Lumped parameter for outer wall elements\n\n        Calculates all necessary parameters for outer walls. This includes\n        OuterWalls, GroundFloors and Rooftops.\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        outer_walls : list\n            List containing all TEASER Wall instances that are treated as same\n            outer wall type. In case of TwoElement model OuterWalls,\n            GroundFloors, Rooftops\n        \"\"\"\n\n        omega = 2 * math.pi / 86400 / self.t_bt\n\n        outer_walls = (\n            self.thermal_zone.outer_walls",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[994:1072]\n==teaser.logic.buildingobjects.calculation.two_element:[686:762]\n        self.area_iw = (\n            sum(in_wall.area for in_wall in self.thermal_zone.inner_walls)\n            + sum(floor.area for floor in self.thermal_zone.floors)\n            + sum(ceiling.area for ceiling in self.thermal_zone.ceilings)\n            + sum(nzb.area for nzb in self.nzbs_for_iw)\n        )\n\n        self.ua_value_iw = (\n            sum(in_wall.ua_value for in_wall in self.thermal_zone.inner_walls)\n            + sum(floor.ua_value for floor in self.thermal_zone.floors)\n            + sum(ceiling.ua_value for ceiling in self.thermal_zone.ceilings)\n            + sum(nzb.ua_value for nzb in self.nzbs_for_iw)\n        )\n\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_iw = 1 / (\n            sum(1 / in_wall.r_inner_conv for in_wall in self.thermal_zone.inner_walls)\n            + sum(1 / floor.r_inner_conv for floor in self.thermal_zone.floors)\n            + sum(1 / ceiling.r_inner_conv for ceiling in self.thermal_zone.ceilings)\n            + sum(1 / nzb.r_inner_conv for nzb in self.nzbs_for_iw)\n        )\n\n        self.r_rad_inner_iw = 1 / (\n            sum(1 / in_wall.r_inner_rad for in_wall in self.thermal_zone.inner_walls)\n            + sum(1 / floor.r_inner_rad for floor in self.thermal_zone.floors)\n            + sum(1 / ceiling.r_inner_rad for ceiling in self.thermal_zone.ceilings)\n            + sum(1 / nzb.r_inner_rad for nzb in self.nzbs_for_iw)\n        )\n\n        self.r_comb_inner_iw = 1 / (\n            sum(1 / in_wall.r_inner_comb for in_wall in self.thermal_zone.inner_walls)\n            + sum(1 / floor.r_inner_comb for floor in self.thermal_zone.floors)\n            + sum(1 / ceiling.r_inner_comb for ceiling in self.thermal_zone.ceilings)\n            + sum(1 / nzb.r_inner_comb for nzb in self.nzbs_for_iw)\n        )\n\n        self.ir_emissivity_inner_iw = (\n            sum(\n                in_wall.layer[0].material.ir_emissivity * in_wall.area\n                for in_wall in self.thermal_zone.inner_walls\n            )\n            + sum(\n                floor.layer[0].material.ir_emissivity * floor.area\n                for floor in self.thermal_zone.floors\n            )\n            + sum(\n                ceiling.layer[0].material.ir_emissivity * ceiling.area\n                for ceiling in self.thermal_zone.ceilings\n            )\n            + sum(\n                nzb.layer[0].material.ir_emissivity * nzb.area\n                for nzb in self.nzbs_for_iw\n            )\n        ) / self.area_iw\n\n        self.alpha_conv_inner_iw = 1 / (self.r_conv_inner_iw * self.area_iw)\n        self.alpha_rad_inner_iw = 1 / (self.r_rad_inner_iw * self.area_iw)\n        self.alpha_comb_inner_iw = 1 / (self.r_comb_inner_iw * self.area_iw)\n\n        # adjacent thermal zones are not supported!\n\n    def _sum_window_elements(self):\n        \"\"\"Sum attributes for window elements\n\n        This function sums and computes the area-weighted values,\n        where necessary (the class doc string) for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        Function is identical for TwoElement, ThreeElement and FourElement.\n        \"\"\"\n\n        self.area_win = sum(win.area for win in self.thermal_zone.windows)\n        self.ua_value_win = sum(win.ua_value for win in self.thermal_zone.windows)\n        self.u_value_win = self.ua_value_win / self.area_win\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1596:1694]\n==teaser.logic.buildingobjects.calculation.three_element:[321:419]\n        self.area_iw = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_iw = 0.0\n        self.alpha_rad_inner_iw = 0.0\n        self.alpha_comb_inner_iw = 0.0\n        # coefficient of heat transfer facing the adjacent thermal zone\n        self.alpha_conv_outer_iw = 0.0\n        self.alpha_rad_outer_iw = 0.0\n        self.alpha_comb_outer_iw = 0.0\n\n        # UA-Value\n        self.ua_value_iw = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_iw = 0.0\n        self.r_rad_inner_iw = 0.0\n        self.r_comb_inner_iw = 0.0\n        self.r_conv_outer_iw = 0.0\n        self.r_rad_outer_iw = 0.0\n        self.r_comb_outer_iw = 0.0\n\n        # lumped resistance/capacity\n        self.r1_iw = 0.0\n        self.c1_iw = 0.0\n\n        # Attributes for outer walls\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for GroundFloor\n        self.area_gf = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_gf = 0.0\n        self.alpha_rad_inner_gf = 0.0\n        self.alpha_comb_inner_gf = 0.0\n\n        # UA-Value\n        self.ua_value_gf = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_gf = 0.0\n        self.r_rad_inner_gf = 0.0\n        self.r_comb_inner_gf = 0.0\n\n        # lumped resistances/capacity\n        self.r1_gf = 0.0\n        self.r_rest_gf = 0.0\n        self.c1_gf = 0.0\n        self.r_total_gf = 0.0\n\n        # Optical properties\n        self.ir_emissivity_inner_gf = 0.0\n\n        # Additional attributes\n\n        self.weightfactor_ground = 0.0\n\n        # Attributes for rooftops",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[395:493]\n==teaser.logic.buildingobjects.calculation.three_element:[1314:1412]\n        self.area_iw = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_iw = 0.0\n        self.alpha_rad_inner_iw = 0.0\n        self.alpha_comb_inner_iw = 0.0\n        # coefficient of heat transfer facing the adjacent thermal zone\n        self.alpha_conv_outer_iw = 0.0\n        self.alpha_rad_outer_iw = 0.0\n        self.alpha_comb_outer_iw = 0.0\n\n        # UA-Value\n        self.ua_value_iw = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_iw = 0.0\n        self.r_rad_inner_iw = 0.0\n        self.r_comb_inner_iw = 0.0\n        self.r_conv_outer_iw = 0.0\n        self.r_rad_outer_iw = 0.0\n        self.r_comb_outer_iw = 0.0\n\n        # lumped resistance/capacity\n        self.r1_iw = 0.0\n        self.c1_iw = 0.0\n\n        # Attributes for outer walls\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for GroundFloor\n        self.area_gf = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_gf = 0.0\n        self.alpha_rad_inner_gf = 0.0\n        self.alpha_comb_inner_gf = 0.0\n\n        # UA-Value\n        self.ua_value_gf = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_gf = 0.0\n        self.r_rad_inner_gf = 0.0\n        self.r_comb_inner_gf = 0.0\n\n        # lumped resistances/capacity\n        self.r1_gf = 0.0\n        self.r_rest_gf = 0.0\n        self.c1_gf = 0.0\n        self.r_total_gf = 0.0\n\n        # Optical properties\n        self.ir_emissivity_inner_gf = 0.0\n\n        # Additional attributes\n\n        self.weightfactor_ground = 0.0\n\n        # Attributes for rooftops",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1072:1156]\n==teaser.logic.buildingobjects.calculation.one_element:[594:678]\n        self.r_conv_inner_win = 1 / (\n            sum(1 / win.r_inner_conv for win in self.thermal_zone.windows)\n        )\n\n        self.r_rad_inner_win = 1 / (\n            sum(1 / win.r_inner_rad for win in self.thermal_zone.windows)\n        )\n\n        self.r_comb_inner_win = 1 / (\n            sum(1 / win.r_inner_comb for win in self.thermal_zone.windows)\n        )\n\n        self.ir_emissivity_inner_win = (\n            sum(\n                win.layer[0].material.ir_emissivity * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.alpha_conv_inner_win = 1 / (self.r_conv_inner_win * self.area_win)\n        self.alpha_rad_inner_win = 1 / (self.r_rad_inner_win * self.area_win)\n        self.alpha_comb_inner_win = 1 / (self.r_comb_inner_win * self.area_win)\n        self.ratio_conv_rad_inner_win = (\n            sum(win.a_conv * win.area for win in self.thermal_zone.windows)\n            / self.area_win\n        )\n\n        # values facing the ambient\n\n        self.r_conv_outer_win = 1 / (\n            sum(1 / win.r_outer_conv for win in self.thermal_zone.windows)\n        )\n\n        self.r_rad_outer_win = 1 / (\n            sum(1 / win.r_outer_rad for win in self.thermal_zone.windows)\n        )\n\n        self.r_comb_outer_win = 1 / (\n            sum(1 / win.r_outer_comb for win in self.thermal_zone.windows)\n        )\n\n        self.ir_emissivity_win = (\n            sum(\n                win.layer[-1].material.ir_emissivity * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.solar_absorp_win = (\n            sum(\n                win.layer[-1].material.solar_absorp * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.weighted_g_value = (\n            sum(win.g_value * win.area for win in self.thermal_zone.windows)\n            / self.area_win\n        )\n\n        self.alpha_conv_outer_win = 1 / (self.r_conv_outer_win * self.area_win)\n        self.alpha_rad_outer_win = 1 / (self.r_rad_outer_win * self.area_win)\n        self.alpha_comb_outer_win = 1 / (self.r_comb_outer_win * self.area_win)\n\n    def _calc_outer_elements(self):\n        \"\"\"Lumped parameter for outer wall elements\n\n        Calculates all necessary parameters for outer walls. This includes\n        OuterWalls, GroundFloors and Rooftops.\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        outer_walls : list\n            List containing all TEASER Wall instances that are treated as same\n            outer wall type. In case of TwoElement model OuterWalls,\n            GroundFloors, Rooftops\n        \"\"\"\n\n        omega = 2 * math.pi / 86400 / self.t_bt\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1116:1191]\n==teaser.logic.buildingobjects.calculation.one_element:[594:676]\n        self.r_conv_inner_win = 1 / (\n            sum(1 / win.r_inner_conv for win in self.thermal_zone.windows)\n        )\n\n        self.r_rad_inner_win = 1 / (\n            sum(1 / win.r_inner_rad for win in self.thermal_zone.windows)\n        )\n\n        self.r_comb_inner_win = 1 / (\n            sum(1 / win.r_inner_comb for win in self.thermal_zone.windows)\n        )\n\n        self.ir_emissivity_inner_win = (\n            sum(\n                win.layer[0].material.ir_emissivity * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.alpha_conv_inner_win = 1 / (self.r_conv_inner_win * self.area_win)\n        self.alpha_rad_inner_win = 1 / (self.r_rad_inner_win * self.area_win)\n        self.alpha_comb_inner_win = 1 / (self.r_comb_inner_win * self.area_win)\n        self.ratio_conv_rad_inner_win = (\n            sum(win.a_conv * win.area for win in self.thermal_zone.windows)\n            / self.area_win\n        )\n\n        # values facing the ambient\n\n        self.r_conv_outer_win = 1 / (\n            sum(1 / win.r_outer_conv for win in self.thermal_zone.windows)\n        )\n\n        self.r_rad_outer_win = 1 / (\n            sum(1 / win.r_outer_rad for win in self.thermal_zone.windows)\n        )\n\n        self.r_comb_outer_win = 1 / (\n            sum(1 / win.r_outer_comb for win in self.thermal_zone.windows)\n        )\n\n        self.ir_emissivity_win = (\n            sum(\n                win.layer[-1].material.ir_emissivity * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.solar_absorp_win = (\n            sum(\n                win.layer[-1].material.solar_absorp * win.area\n                for win in self.thermal_zone.windows\n            )\n            / self.area_win\n        )\n\n        self.weighted_g_value = (\n            sum(win.g_value * win.area for win in self.thermal_zone.windows)\n            / self.area_win\n        )\n\n        self.alpha_conv_outer_win = 1 / (self.r_conv_outer_win * self.area_win)\n        self.alpha_rad_outer_win = 1 / (self.r_rad_outer_win * self.area_win)\n        self.alpha_comb_outer_win = 1 / (self.r_comb_outer_win * self.area_win)\n\n    def _sum_interzonal_elements(self):\n        \"\"\"Sum attributes for neighboured zone border elements\n\n        This function sums and computes the area-weighted values,\n        where necessary (the class doc string) for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[244:309]\n==teaser.examples.verification.verification_ASHRAE_140_620:[244:309]\n    out_wall_west.orientation = 270.0\n    out_wall_west.tilt = 90.0\n    out_wall_west.inner_convection = 3.16\n    out_wall_west.outer_convection = 24.67\n    out_wall_west.inner_radiation = 5.13\n    out_wall_west.outer_radiation = 4.63\n\n    layer_oww1 = Layer(parent=out_wall_west, id=0)\n    layer_oww1.thickness = 0.012\n\n    material_oww1 = Material(layer_oww1)\n    material_oww1.name = \"Plasterboard\"\n    material_oww1.density = 950.0\n    material_oww1.heat_capac = 840.0 / 1000\n    material_oww1.thermal_conduc = 0.16\n    material_oww1.ir_emissivity = 0.9\n\n    layer_oww2 = Layer(parent=out_wall_west, id=1)\n    layer_oww2.thickness = 0.066\n\n    material_oww2 = Material(layer_oww2)\n    material_oww2.name = \"Fiberglass\"\n    material_oww2.density = 12\n    material_oww2.heat_capac = 840 / 1000\n    material_oww2.thermal_conduc = 0.04\n\n    layer_oww3 = Layer(parent=out_wall_west, id=2)\n    layer_oww3.thickness = 0.009\n\n    material_oww3 = Material(layer_oww3)\n    material_oww3.name = \"WoodSiding\"\n    material_oww3.density = 530\n    material_oww3.heat_capac = 900 / 1000\n    material_oww3.thermal_conduc = 0.14\n    material_oww3.solar_absorp = 0.6\n    material_oww3.ir_emissivity = 0.9\n\n    in_wall_floor = Floor(parent=tz)\n    in_wall_floor.name = \"InnerWallFloor\"\n    in_wall_floor.area = 6 * 8\n    in_wall_floor.orientation = -2.0\n    in_wall_floor.tilt = 0.0\n    in_wall_floor.inner_convection = 4.13\n    in_wall_floor.inner_radiation = 5.13\n\n    layer_iwf1 = Layer(parent=in_wall_floor, id=0)\n    layer_iwf1.thickness = 0.025\n\n    material_iwf1 = Material(layer_iwf1)\n    material_iwf1.name = \"TimberFlooring\"\n    material_iwf1.density = 650\n    material_iwf1.heat_capac = 1200 / 1000\n    material_iwf1.thermal_conduc = 0.14\n    material_iwf1.ir_emissivity = 0.9\n\n    layer_iwf2 = Layer(parent=in_wall_floor, id=1)\n    layer_iwf2.thickness = 1.003\n\n    material_iwf2 = Material(layer_iwf2)\n    material_iwf2.name = \"Insulation\"\n    material_iwf2.density = 0.000000000001  # 0.0001, as small as possible\n    material_iwf2.heat_capac = 0.000000000001  # 0.0001, as small as possible\n    material_iwf2.thermal_conduc = 0.04\n\n    win_1 = Window(parent=tz)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.apartmentblock:[3:169]\n==teaser.logic.archetypebuildings.tabula.dk.apartmentblock:[3:169]\nfrom teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse import \\\n    SingleFamilyHouse\n\n\nclass ApartmentBlock(SingleFamilyHouse):\n    \"\"\"Archetype for TABULA Apartment Block\n\n    Archetype according to TABULA building typology\n    (http://webtool.building-typology.eu/#bm).\n\n    Description of:\n\n    - estimation factors\n    - always 4 walls, 1 roof, 1 floor, 4 windows, one door (default\n      orientation?)\n    - how we calculate facade and window area\n    - calculate u-values\n    - zones (one zone)\n    - differences between TABULA und our approach (net floor area, height\n      and number of storeys)\n    - how to proceed with rooftops (keep them as flat roofs or pitched\n      roofs? what orientation?)\n\n    Parameters\n    ----------\n\n    parent: Project()\n        The parent class of this object, the Project the Building belongs to.\n        Allows for better control of hierarchical structures. If not None it\n        adds this Building instance to Project.buildings.\n        (default: None)\n    name : str\n        Individual name\n    year_of_construction : int\n        Year of first construction\n    height_of_floors : float [m]\n        Average height of the buildings' floors\n    number_of_floors : int\n        Number of building's floors above ground\n    net_leased_area : float [m2]\n        Total net leased area of building. This is area is NOT the footprint\n        of a building\n    with_ahu : Boolean\n        If set to True, an empty instance of BuildingAHU is instantiated and\n        assigned to attribute central_ahu. This instance holds information for\n        central Air Handling units. Default is False.\n    internal_gains_mode: int [1, 2, 3]\n        mode for the internal gains calculation done in AixLib:\n\n        1. Temperature and activity degree dependent heat flux calculation for persons. The\n           calculation is based on  SIA 2024 (default)\n        2. Temperature and activity degree independent heat flux calculation for persons, the max.\n           heatflowrate is prescribed by the parameter\n           fixed_heat_flow_rate_persons.\n        3. Temperature and activity degree dependent calculation with\n           consideration of moisture and co2. The moisture calculation is\n           based on SIA 2024 (2015) and regards persons and non-persons, the co2 calculation is based on\n           Engineering ToolBox (2004) and regards only persons.\n    inner_wall_approximation_approach : str\n        'teaser_default' (default) sets length of inner walls = typical\n            length * height of floors + 2 * typical width * height of floors\n        'typical_minus_outer' sets length of inner walls = 2 * typical\n            length * height of floors + 2 * typical width * height of floors\n            - length of outer or interzonal walls\n        'typical_minus_outer_extended' like 'typical_minus_outer', but also\n            considers that\n            a) a non-complete \"average room\" reduces its circumference\n              proportional to the square root of the area\n            b) rooftops, windows and ground floors (= walls with border to\n                soil) may have a vertical share\n    construction_data : str\n        Construction type of used wall constructions default is \"existing\n        state\"\n\n        - existing state:\n          construction of walls according to existing state in TABULA\n        - usual refurbishment:\n          construction of walls according to usual refurbishment in\n          TABULA\n        - advanced refurbishment:\n          construction of walls according to advanced refurbishment in\n          TABULA\n\n    \"\"\"\n\n    def __init__(\n            self,\n            parent,\n            name=None,\n            year_of_construction=None,\n            number_of_floors=None,\n            height_of_floors=None,\n            net_leased_area=None,\n            with_ahu=False,\n            internal_gains_mode=1,\n            inner_wall_approximation_approach='teaser_default',\n            construction_data=None):\n\n        super(ApartmentBlock, self).__init__(\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,\n            inner_wall_approximation_approach,\n            construction_data)\n\n        self.construction_data = construction_data\n        self.number_of_floors = number_of_floors\n        self.height_of_floors = height_of_floors\n\n        self._construction_data_1 = self.construction_data.value + '_1_AB'\n        self._construction_data_2 = self.construction_data.value + '_2_AB'\n\n        self.zone_area_factors = {\"SingleDwelling\": [1, \"Living\"]}\n\n        self._outer_wall_names_1 = {\n            \"ExteriorFacadeNorth_1\": [90.0, 0.0],\n            \"ExteriorFacadeEast_1\": [90.0, 90.0],\n            \"ExteriorFacadeSouth_1\": [90.0, 180.0],\n            \"ExteriorFacadeWest_1\": [90.0, 270.0]}\n\n        self._outer_wall_names_2 = {\n            \"ExteriorFacadeNorth_2\": [90.0, 0.0],\n            \"ExteriorFacadeEast_2\": [90.0, 90.0],\n            \"ExteriorFacadeSouth_2\": [90.0, 180.0],\n            \"ExteriorFacadeWest_2\": [90.0, 270.0]}\n\n        self.roof_names_1 = {\"Rooftop_1\": [0, -1]}  # [0, -1]\n\n        self.roof_names_2 = {\"Rooftop_2\": [0, -1]}\n\n        self.ground_floor_names_1 = {\n            \"GroundFloor_1\": [0, -2]}  # [0, -2]\n\n        self.ground_floor_names_2 = {\n            \"GroundFloor_2\": [0, -2]}\n\n        self.door_names = {\"Door\": [90.0, 270]}\n\n        self.window_names_1 = {\n            \"WindowFacadeNorth_1\": [90.0, 0.0],\n            \"WindowFacadeEast_1\": [90.0, 90.0],\n            \"WindowFacadeSouth_1\": [90.0, 180.0],\n            \"WindowFacadeWest_1\": [90.0, 270.0]}\n        self.window_names_2 = {\n            \"WindowFacadeNorth_2\": [90.0, 0.0],\n            \"WindowFacadeEast_2\": [90.0, 90.0],\n            \"WindowFacadeSouth_2\": [90.0, 180.0],\n            \"WindowFacadeWest_2\": [90.0, 270.0]}\n\n        # [tilt, orientation]\n\n        self.inner_wall_names = {\"InnerWall\": [90.0, 0.0]}\n\n        self.ceiling_names = {\"Ceiling\": [0.0, -1]}\n\n        self.floor_names = {\"Floor\": [0.0, -2]}\n\n        # Rooftop1, Rooftop2, Wall1, Wall2, GroundFloor1, GroundFloor2,\n        # Window1, Window2, Door\n        # Area/ReferenceFloorArea\n        self.facade_estimation_factors = {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_620:[76:132]\n==teaser.examples.verification.verification_ASHRAE_140_920:[75:131]\n    tz.area = 8.0 * 6.0\n    tz.volume = tz.area * 2.7\n    tz.use_conditions = UseConditions(parent=tz)\n    tz.use_conditions.base_infiltration = 0.41\n\n    roof = Rooftop(parent=tz)\n    roof.name = \"Roof\"\n    roof.area = 8.0 * 6.0\n    roof.orientation = -1.0\n    roof.tilt = 0.0\n    roof.inner_convection = 1\n    roof.outer_convection = 24.67\n    roof.inner_radiation = 5.13\n    roof.outer_radiation = 4.63\n\n    layer_r1 = Layer(parent=roof, id=0)\n    layer_r1.thickness = 0.01\n\n    material_r1 = Material(layer_r1)\n    material_r1.name = \"Plasterboard\"\n    material_r1.density = 950.0\n    material_r1.heat_capac = 840.0 / 1000\n    material_r1.thermal_conduc = 0.16\n    material_r1.ir_emissivity = 0.9\n\n    layer_r2 = Layer(parent=roof, id=1)\n    layer_r2.thickness = 0.1118\n\n    material_r2 = Material(layer_r2)\n    material_r2.name = \"Fiberglass\"\n    material_r2.density = 12\n    material_r2.heat_capac = 840 / 1000\n    material_r2.thermal_conduc = 0.04\n\n    layer_r3 = Layer(parent=roof, id=2)\n    layer_r3.thickness = 0.019\n\n    material_r3 = Material(layer_r3)\n    material_r3.name = \"Roofdeck\"\n    material_r3.density = 530\n    material_r3.heat_capac = 900 / 1000\n    material_r3.thermal_conduc = 0.14\n    material_r3.solar_absorp = 0.6\n    material_r3.ir_emissivity = 0.9\n\n    out_wall_north = OuterWall(parent=tz)\n    out_wall_north.name = \"OuterWallNorth\"\n    out_wall_north.area = 8.0 * 2.7\n    out_wall_north.orientation = 0.0\n    out_wall_north.tilt = 90.0\n    out_wall_north.inner_convection = 3.16\n    out_wall_north.outer_convection = 24.67\n    out_wall_north.inner_radiation = 5.13\n    out_wall_north.outer_radiation = 4.63\n\n    layer_own1 = Layer(parent=out_wall_north, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[75:132]\n==teaser.examples.verification.verification_ASHRAE_140_900:[75:131]\n    tz.area = 8.0 * 6.0\n    tz.volume = tz.area * 2.7\n    tz.use_conditions = UseConditions(parent=tz)\n    tz.use_conditions.base_infiltration = 0.41\n\n    roof = Rooftop(parent=tz)\n    roof.name = \"Roof\"\n    roof.area = 8.0 * 6.0\n    roof.orientation = -1.0\n    roof.tilt = 0.0\n    roof.inner_convection = 1\n    roof.outer_convection = 24.67\n    roof.inner_radiation = 5.13\n    roof.outer_radiation = 4.63\n\n    layer_r1 = Layer(parent=roof, id=0)\n    layer_r1.thickness = 0.01\n\n    material_r1 = Material(layer_r1)\n    material_r1.name = \"Plasterboard\"\n    material_r1.density = 950.0\n    material_r1.heat_capac = 840.0 / 1000\n    material_r1.thermal_conduc = 0.16\n    material_r1.ir_emissivity = 0.9\n\n    layer_r2 = Layer(parent=roof, id=1)\n    layer_r2.thickness = 0.1118\n\n    material_r2 = Material(layer_r2)\n    material_r2.name = \"Fiberglass\"\n    material_r2.density = 12\n    material_r2.heat_capac = 840 / 1000\n    material_r2.thermal_conduc = 0.04\n\n    layer_r3 = Layer(parent=roof, id=2)\n    layer_r3.thickness = 0.019\n\n    material_r3 = Material(layer_r3)\n    material_r3.name = \"Roofdeck\"\n    material_r3.density = 530\n    material_r3.heat_capac = 900 / 1000\n    material_r3.thermal_conduc = 0.14\n    material_r3.solar_absorp = 0.6\n    material_r3.ir_emissivity = 0.9\n\n    out_wall_north = OuterWall(parent=tz)\n    out_wall_north.name = \"OuterWallNorth\"\n    out_wall_north.area = 8.0 * 2.7\n    out_wall_north.orientation = 0.0\n    out_wall_north.tilt = 90.0\n    out_wall_north.inner_convection = 3.16\n    out_wall_north.outer_convection = 24.67\n    out_wall_north.inner_radiation = 5.13\n    out_wall_north.outer_radiation = 4.63\n\n    layer_own1 = Layer(parent=out_wall_north, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.three_element:[566:655]\n==teaser.logic.buildingobjects.calculation.two_element:[485:576]\n                + \"the project parameter 'method_interzonal_export'. Consider \"\n                + \"using FiveElement instead.\"\n            )\n        self._calc_number_of_elements()\n        self._fill_zone_lists()\n        self._calc_heat_load()\n        self.cool_load = -self.heat_load\n\n        return True\n\n    @staticmethod\n    def _calc_parallel_connection(element_list, omega, mode='iw'):\n        \"\"\"Parallel connection of walls according to VDI 6007\n\n        Calculates the parallel connection of wall elements according to VDI\n        6007, resulting in R1 and C1 (equation 23, 24).\n\n        Parameters\n        ----------\n        element_list : list\n            List of inner or outer walls\n        omega : float\n            VDI 6007 frequency\n        mode : str\n            'ow' uses r1 and c1_korr\n            'iw' uses r1 and c1 (function falls back here for other strings)\n\n        Returns\n        -------\n        r1 : float [K/W]\n            VDI 6007 resistance for all inner or outer walls\n        c1 : float [K/W]\n            VDI 6007 capacity all for inner or outer walls\n        \"\"\"\n\n        for wall_count in range(len(element_list) - 1):\n\n            if wall_count == 0:\n                r1_before = element_list[wall_count].r1\n                if mode == 'ow':\n                    c1_before = element_list[wall_count].c1_korr\n                else:\n                    c1_before = element_list[wall_count].c1\n            else:\n                r1_before = r1\n                c1_before = c1\n            r1_add = element_list[wall_count + 1].r1\n            if mode == 'ow':\n                c1_add = element_list[wall_count + 1].c1_korr\n            else:\n                c1_add = element_list[wall_count + 1].c1\n\n            r1 = (\n                r1_before * c1_before ** 2 + r1_add * c1_add ** 2\n                + omega ** 2 * r1_before * r1_add * (r1_before + r1_add)\n                * c1_before ** 2 * c1_add ** 2\n            ) / (\n                (c1_before + c1_add) ** 2\n                + omega ** 2 * (r1_before + r1_add) ** 2 * c1_before ** 2\n                * c1_add ** 2\n            )\n\n            c1 = (\n                (c1_before + c1_add) ** 2\n                + omega ** 2 * (r1_before + r1_add) ** 2 * c1_before ** 2\n                * c1_add ** 2\n            ) / (\n                c1_before + c1_add\n                + omega ** 2\n                * (r1_before ** 2 * c1_before + r1_add ** 2 * c1_add)\n                * c1_before * c1_add\n            )\n\n        return r1, c1\n\n    def _sum_outer_wall_elements(self):\n        \"\"\"Sum attributes for outer wall elements\n\n        This function sums and computes the area-weighted values,\n        where necessary (the class doc string) for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        For TwoElement model it treats rooftops, ground floor, outer walls\n        and zone borders to neighboured zones (if this zone is heated)\n        as one kind of wall type.\n\n        \"\"\"\n        # treat all outer wall types identical\n\n        outer_walls = (\n            self.thermal_zone.outer_walls",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[387:464]\n==teaser.logic.buildingobjects.calculation.two_element:[274:351]\n        self.internal_id = random.random()\n\n        self.thermal_zone = thermal_zone\n        self.merge_windows = merge_windows\n        self.t_bt = t_bt\n        self.t_bt_layer = t_bt_layer\n\n        # Attributes of inner walls\n        self.area_iw = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_iw = 0.0\n        self.alpha_rad_inner_iw = 0.0\n        self.alpha_comb_inner_iw = 0.0\n        # coefficient of heat transfer facing the adjacent thermal zone\n        self.alpha_conv_outer_iw = 0.0\n        self.alpha_rad_outer_iw = 0.0\n        self.alpha_comb_outer_iw = 0.0\n\n        # UA-Value\n        self.ua_value_iw = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_iw = 0.0\n        self.r_rad_inner_iw = 0.0\n        self.r_comb_inner_iw = 0.0\n        self.r_conv_outer_iw = 0.0\n        self.r_rad_outer_iw = 0.0\n        self.r_comb_outer_iw = 0.0\n\n        # lumped resistance/capacity\n        self.r1_iw = 0.0\n        self.c1_iw = 0.0\n\n        # Attributes for outer walls (OuterWall, Rooftop, GroundFloor)\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for windows",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1653:1719]\n==teaser.logic.buildingobjects.calculation.four_element:[1496:1562]\n            if not wins:\n                self.weightfactor_win.append(0.0)\n                self.shading_g_total.append(1.0)\n                self.window_areas.append(0.0)\n                self.transparent_areas.append(0.0)\n                self.shading_max_irr.append(9999.9)\n            else:\n                self.weightfactor_win.append(sum([win.wf_out for win in wins]))\n\n                if self.merge_windows is False:\n                    self.window_areas.append(sum([win.area for win in wins]))\n                    self.transparent_areas.append(sum([win.area for win in wins]))\n\n                else:\n                    self.window_areas.append(0)\n                    self.transparent_areas.append(sum([win.area for win in wins]))\n                self.shading_g_total.append(\n                    sum(\n                        [\n                            win.shading_g_total * win.area / sum([w.area for w in wins])\n                            for win in wins\n                        ]\n                    )\n                )\n                self.shading_max_irr.append(\n                    sum(\n                        [\n                            win.shading_max_irr * win.area / sum([w.area for w in wins])\n                            for win in wins\n                        ]\n                    )\n                )\n\n        tilt_orient_rt = []\n        for roof in self.thermal_zone.rooftops:\n            tilt_orient_rt.append((roof.orientation, roof.tilt))\n        tilt_orient_rt = list(set(tilt_orient_rt))\n\n        for i in tilt_orient_rt:\n            rts = self.thermal_zone.find_rts(i[0], i[1])\n\n            self.orientation_rt.append(i[0])\n            self.tilt_rt.append(i[1])\n            self.weightfactor_win_rt.append(0)\n            if not rts:\n                self.weightfactor_rt.append(0.0)\n                self.rooftop_areas.append(0.0)\n            else:\n                self.weightfactor_rt.append(sum([rt.wf_out for rt in rts]))\n                self.rooftop_areas.append(sum([rt.area for rt in rts]))\n\n    def _calc_heat_load(self):\n        \"\"\"Static heat load calculation\n\n        This function calculates the static heat load of the thermal zone by\n        multiplying the UA-Value of the elements with the given Temperature\n        difference of t_inside and t_outside. And takes heat losses through\n        infiltration into account.\n\n        Attributes\n        ----------\n        ua_value_ow_temp : float [W/(m2*K)]\n            UA Value without GroundFloors\n        ua_value_gf_temp : float [W/(m2*K)]\n            UA Value of all GroundFloors\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[905:970]\n==teaser.logic.buildingobjects.calculation.three_element:[1224:1292]\n            else:\n                self.weightfactor_ow.append(sum([wall.wf_out\n                                                 for wall in wall_rt_nzb]))\n                self.outer_wall_areas.append(sum([wall.area\n                                                  for wall in wall_rt_nzb]))\n\n            if not wins:\n                self.weightfactor_win.append(0.0)\n                self.shading_g_total.append(1.0)\n                self.window_areas.append(0.0)\n                self.transparent_areas.append(0.0)\n                self.shading_max_irr.append(9999.9)\n            else:\n                self.weightfactor_win.append(sum([win.wf_out for win in wins]))\n                if self.merge_windows is False:\n                    self.window_areas.append(sum([win.area for win in wins]))\n                    self.transparent_areas.append(sum([win.area for win in wins]))\n\n                else:\n                    self.window_areas.append(0)\n                    self.transparent_areas.append(sum([win.area for win in wins]))\n                self.shading_g_total.append(\n                    sum(\n                        [\n                            win.shading_g_total * win.area / sum([w.area for w in wins])\n                            for win in wins\n                        ]\n                    )\n                )\n                self.shading_max_irr.append(\n                    sum(\n                        [\n                            win.shading_max_irr * win.area / sum([w.area for w in wins])\n                            for win in wins\n                        ]\n                    )\n                )\n\n    def _calc_heat_load(self):\n        \"\"\"Static heat load calculation\n\n        This function calculates the static heat load of the thermal zone by\n        multiplying the UA-Value of the elements with the given Temperature\n        difference of t_inside and t_outside. And takes heat losses through\n        infiltration into account.\n\n        Attributes\n        ----------\n        ua_value_ow_temp : float [W/(m2*K)]\n            UA Value without GroundFloors\n        ua_value_gf_temp : float [W/(m2*K)]\n            UA Value of all GroundFloors\n        \"\"\"\n        if self.thermal_zone.use_conditions.base_infiltration > 0.5:\n            warnings.warn(\"The base_infiltration is larger than 0.5, \"\n                          \"which could lead to ideal heaters being too small.\")\n\n        self.heat_load = 0.0\n\n        if self.thermal_zone.parent.parent.t_soil_mode == 2:\n            t_ground = self.thermal_zone.t_ground \\\n                       - self.thermal_zone.t_ground_amplitude\n        else:\n            t_ground = self.thermal_zone.t_ground\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[699:788]\n==teaser.logic.buildingobjects.calculation.two_element:[484:574]\n                + \"will treat them as outer walls or inner walls depending on \"\n                + \"the project parameter 'method_interzonal_export'. Consider \"\n                + \"using FiveElement instead.\"\n            )\n        self._calc_number_of_elements()\n        self._fill_zone_lists()\n        self._calc_heat_load()\n        self.cool_load = -self.heat_load\n\n        return True\n\n    @staticmethod\n    def _calc_parallel_connection(element_list, omega, mode='iw'):\n        \"\"\"Parallel connection of walls according to VDI 6007\n\n        Calculates the parallel connection of wall elements according to VDI\n        6007, resulting in R1 and C1 (equation 23, 24).\n\n        Parameters\n        ----------\n        element_list : list\n            List of inner or outer walls\n        omega : float\n            VDI 6007 frequency\n        mode : str\n            'ow' uses r1 and c1_korr\n            'iw' uses r1 and c1 (function falls back here for other strings)\n\n        Returns\n        -------\n        r1 : float [K/W]\n            VDI 6007 resistance for all inner or outer walls\n        c1 : float [K/W]\n            VDI 6007 capacity all for inner or outer walls\n        \"\"\"\n\n        for wall_count in range(len(element_list) - 1):\n\n            if wall_count == 0:\n                r1_before = element_list[wall_count].r1\n                if mode == 'ow':\n                    c1_before = element_list[wall_count].c1_korr\n                else:\n                    c1_before = element_list[wall_count].c1\n            else:\n                r1_before = r1\n                c1_before = c1\n            r1_add = element_list[wall_count + 1].r1\n            if mode == 'ow':\n                c1_add = element_list[wall_count + 1].c1_korr\n            else:\n                c1_add = element_list[wall_count + 1].c1\n\n            r1 = (\n                r1_before * c1_before ** 2 + r1_add * c1_add ** 2\n                + omega ** 2 * r1_before * r1_add * (r1_before + r1_add)\n                * c1_before ** 2 * c1_add ** 2\n            ) / (\n                (c1_before + c1_add) ** 2\n                + omega ** 2 * (r1_before + r1_add) ** 2 * c1_before ** 2\n                * c1_add ** 2\n            )\n\n            c1 = (\n                (c1_before + c1_add) ** 2\n                + omega ** 2 * (r1_before + r1_add) ** 2 * c1_before ** 2\n                * c1_add ** 2\n            ) / (\n                c1_before + c1_add\n                + omega ** 2\n                * (r1_before ** 2 * c1_before + r1_add ** 2 * c1_add)\n                * c1_before * c1_add\n            )\n\n        return r1, c1\n\n    def _sum_outer_wall_elements(self):\n        \"\"\"Sum attributes for outer wall elements\n\n        This function sums and computes the area-weighted values,\n        where necessary (the class doc string) for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        For TwoElement model it treats rooftops, ground floor, outer walls\n        and zone borders to neighboured zones (if this zone is heated)\n        as one kind of wall type.\n\n        \"\"\"\n        # treat all outer wall types identical\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[700:788]\n==teaser.logic.buildingobjects.calculation.three_element:[566:653]\n                + \"the project parameter 'method_interzonal_export'. Consider \"\n                + \"using FiveElement instead.\"\n            )\n        self._calc_number_of_elements()\n        self._fill_zone_lists()\n        self._calc_heat_load()\n        self.cool_load = -self.heat_load\n\n        return True\n\n    @staticmethod\n    def _calc_parallel_connection(element_list, omega, mode='iw'):\n        \"\"\"Parallel connection of walls according to VDI 6007\n\n        Calculates the parallel connection of wall elements according to VDI\n        6007, resulting in R1 and C1 (equation 23, 24).\n\n        Parameters\n        ----------\n        element_list : list\n            List of inner or outer walls\n        omega : float\n            VDI 6007 frequency\n        mode : str\n            'ow' uses r1 and c1_korr\n            'iw' uses r1 and c1 (function falls back here for other strings)\n\n        Returns\n        -------\n        r1 : float [K/W]\n            VDI 6007 resistance for all inner or outer walls\n        c1 : float [K/W]\n            VDI 6007 capacity all for inner or outer walls\n        \"\"\"\n\n        for wall_count in range(len(element_list) - 1):\n\n            if wall_count == 0:\n                r1_before = element_list[wall_count].r1\n                if mode == 'ow':\n                    c1_before = element_list[wall_count].c1_korr\n                else:\n                    c1_before = element_list[wall_count].c1\n            else:\n                r1_before = r1\n                c1_before = c1\n            r1_add = element_list[wall_count + 1].r1\n            if mode == 'ow':\n                c1_add = element_list[wall_count + 1].c1_korr\n            else:\n                c1_add = element_list[wall_count + 1].c1\n\n            r1 = (\n                r1_before * c1_before ** 2 + r1_add * c1_add ** 2\n                + omega ** 2 * r1_before * r1_add * (r1_before + r1_add)\n                * c1_before ** 2 * c1_add ** 2\n            ) / (\n                (c1_before + c1_add) ** 2\n                + omega ** 2 * (r1_before + r1_add) ** 2 * c1_before ** 2\n                * c1_add ** 2\n            )\n\n            c1 = (\n                (c1_before + c1_add) ** 2\n                + omega ** 2 * (r1_before + r1_add) ** 2 * c1_before ** 2\n                * c1_add ** 2\n            ) / (\n                c1_before + c1_add\n                + omega ** 2\n                * (r1_before ** 2 * c1_before + r1_add ** 2 * c1_add)\n                * c1_before * c1_add\n            )\n\n        return r1, c1\n\n    def _sum_outer_wall_elements(self):\n        \"\"\"Sum attributes for outer wall elements\n\n        This function sums and computes the area-weighted values,\n        where necessary  for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        For ThreeElement model it treats rooftops, outer walls and zone borders\n        to neighboured zones (if this zone is heated)\n        as one kind of wall type.\n\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.terracedhouse:[3:160]\n==teaser.logic.archetypebuildings.tabula.dk.terracedhouse:[3:160]\nfrom teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse import \\\n    SingleFamilyHouse\n\n\nclass TerracedHouse(SingleFamilyHouse):\n    \"\"\"Archetype for TABULA Single Family House\n\n    Archetype according to TABULA building typology\n    (http://webtool.building-typology.eu/#bm).\n\n    Description of:\n\n    - estimation factors\n    - always 4 walls, 1 roof, 1 floor, 4 windows, one door (default orientation?)\n    - how we calculate facade and window area\n    - calculate u-values\n    - zones (one zone)\n    - differences between TABULA und our approach (net floor area, height\n      and number of storeys)\n    - how to proceed with rooftops (keep them as flat roofs or pitched\n      roofs? what orientation?)\n\n    Parameters\n    ----------\n\n    parent: Project()\n        The parent class of this object, the Project the Building belongs to.\n        Allows for better control of hierarchical structures. If not None it\n        adds this Building instance to Project.buildings.\n        (default: None)\n    name : str\n        Individual name\n    year_of_construction : int\n        Year of first construction\n    height_of_floors : float [m]\n        Average height of the buildings' floors\n    number_of_floors : int\n        Number of building's floors above ground\n    net_leased_area : float [m2]\n        Total net leased area of building. This is area is NOT the footprint\n        of a building\n    with_ahu : Boolean\n        If set to True, an empty instance of BuildingAHU is instantiated and\n        assigned to attribute central_ahu. This instance holds information for\n        central Air Handling units. Default is False.\n    internal_gains_mode: int [1, 2, 3]\n        mode for the internal gains calculation done in AixLib:\n\n        1. Temperature and activity degree dependent heat flux calculation for persons. The\n           calculation is based on  SIA 2024 (default)\n        2. Temperature and activity degree independent heat flux calculation for persons, the max.\n           heatflowrate is prescribed by the parameter\n           fixed_heat_flow_rate_persons.\n        3. Temperature and activity degree dependent calculation with\n           consideration of moisture and co2. The moisture calculation is\n           based on SIA 2024 (2015) and regards persons and non-persons, the co2 calculation is based on\n           Engineering ToolBox (2004) and regards only persons.\n    inner_wall_approximation_approach : str\n        'teaser_default' (default) sets length of inner walls = typical\n            length * height of floors + 2 * typical width * height of floors\n        'typical_minus_outer' sets length of inner walls = 2 * typical\n            length * height of floors + 2 * typical width * height of floors\n            - length of outer or interzonal walls\n        'typical_minus_outer_extended' like 'typical_minus_outer', but also\n            considers that\n            a) a non-complete \"average room\" reduces its circumference\n              proportional to the square root of the area\n            b) rooftops, windows and ground floors (= walls with border to\n                soil) may have a vertical share\n    construction_data : str\n        Construction type of used wall constructions default is \"existing\n        state\"\n\n        - existing state:\n          construction of walls according to existing state in TABULA\n        - usual refurbishment:\n          construction of walls according to usual refurbishment in\n          TABULA\n        - advanced refurbishment:\n          construction of walls according to advanced refurbishment in\n          TABULA\n\n    \"\"\"\n\n    def __init__(\n            self,\n            parent,\n            name=None,\n            year_of_construction=None,\n            number_of_floors=None,\n            height_of_floors=None,\n            net_leased_area=None,\n            with_ahu=False,\n            internal_gains_mode=1,\n            inner_wall_approximation_approach='teaser_default',\n            construction_data=None):\n\n        super(TerracedHouse, self).__init__(\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,\n            inner_wall_approximation_approach,\n            construction_data)\n\n        self.construction_data = construction_data\n        self.number_of_floors = number_of_floors\n        self.height_of_floors = height_of_floors\n\n        self._construction_data_1 = self.construction_data.value + '_1_TH'\n        self._construction_data_2 = self.construction_data.value + '_2_TH'\n\n        self.zone_area_factors = {\"SingleDwelling\": [1, \"Living\"]}\n\n        self._outer_wall_names_1 = {\n            \"ExteriorFacadeNorth_1\": [90.0, 0.0],\n            \"ExteriorFacadeSouth_1\": [90.0, 180.0]}\n\n        self._outer_wall_names_2 = {\n            \"ExteriorFacadeNorth_2\": [90.0, 0.0],\n            \"ExteriorFacadeSouth_2\": [90.0, 180.0]}\n\n        self.roof_names_1 = {\"Rooftop_1\": [0, -1]}  # [0, -1]\n\n        self.roof_names_2 = {\"Rooftop_2\": [0, -1]}\n\n        self.ground_floor_names_1 = {\n            \"GroundFloor_1\": [0, -2]}  # [0, -2]\n\n        self.ground_floor_names_2 = {\n            \"GroundFloor_2\": [0, -2]}\n\n        self.door_names = {\"Door\": [90.0, 270]}\n\n        self.window_names_1 = {\n            \"WindowFacadeNorth_1\": [90.0, 0.0],\n            \"WindowFacadeSouth_1\": [90.0, 180.0]}\n        self.window_names_2 = {\n            \"WindowFacadeNorth_2\": [90.0, 0.0],\n            \"WindowFacadeSouth_2\": [90.0, 180.0]}\n\n        # [tilt, orientation]\n\n        self.inner_wall_names = {\"InnerWall\": [90.0, 0.0]}\n\n        self.ceiling_names = {\"Ceiling\": [0.0, -1]}\n\n        self.floor_names = {\"Floor\": [0.0, -2]}\n\n        # Rooftop1, Rooftop2, Wall1, Wall2, GroundFloor1, GroundFloor2,\n        # Window1, Window2, Door\n        # Area/ReferenceFloorArea\n        self.facade_estimation_factors = {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[246:320]\n==teaser.logic.buildingobjects.calculation.two_element:[1237:1311]\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for windows\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[148:208]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[145:205]\n            self._construction_data_1 = self.construction_data.value + \"_1_SFH\"\n            self._construction_data_2 = self.construction_data.value + \"_2_SFH\"\n\n        self.zone_area_factors = {\"SingleDwelling\": [1, \"Living\"]}\n\n        self._outer_wall_names_1 = {\n            \"ExteriorFacadeNorth_1\": [90.0, 0.0],\n            \"ExteriorFacadeEast_1\": [90.0, 90.0],\n            \"ExteriorFacadeSouth_1\": [90.0, 180.0],\n            \"ExteriorFacadeWest_1\": [90.0, 270.0],\n        }\n\n        self._outer_wall_names_2 = {\n            \"ExteriorFacadeNorth_2\": [90.0, 0.0],\n            \"ExteriorFacadeEast_2\": [90.0, 90.0],\n            \"ExteriorFacadeSouth_2\": [90.0, 180.0],\n            \"ExteriorFacadeWest_2\": [90.0, 270.0],\n        }\n\n        self.roof_names_1 = {\n            \"RooftopNorth_1\": [35.0, 0.0],\n            \"RooftopSouth_1\": [35.0, 90.0],\n        }\n\n        self.roof_names_2 = {\n            \"RooftopNorth_2\": [35.0, 0.0],\n            \"RooftopSouth_2\": [35.0, 90.0],\n        }\n\n        self.ground_floor_names_1 = {\"GroundFloor_1\": [0, -2]}\n\n        self.ground_floor_names_2 = {\"GroundFloor_2\": [0, -2]}\n\n        self.door_names = {\"Door\": [90.0, 270]}\n\n        self.window_names_1 = {\n            \"WindowFacadeNorth_1\": [90.0, 0.0],\n            \"WindowFacadeEast_1\": [90.0, 90.0],\n            \"WindowFacadeSouth_1\": [90.0, 180.0],\n            \"WindowFacadeWest_1\": [90.0, 270.0],\n        }\n        self.window_names_2 = {\n            \"WindowFacadeNorth_2\": [90.0, 0.0],\n            \"WindowFacadeEast_2\": [90.0, 90.0],\n            \"WindowFacadeSouth_2\": [90.0, 180.0],\n            \"WindowFacadeWest_2\": [90.0, 270.0],\n        }\n\n        # [tilt, orientation]\n\n        self.inner_wall_names = {\"InnerWall\": [90.0, 0.0]}\n\n        self.ceiling_names = {\"Ceiling\": [0.0, -1]}\n\n        self.floor_names = {\"Floor\": [0.0, -2]}\n\n        # Rooftop1, Rooftop2, Wall1, Wall2, GroundFloor1, GroundFloor2,\n        # Window1, Window2, Door\n        # Area/ReferenceFloorArea\n        self.facade_estimation_factors = {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1596:1665]\n==teaser.logic.buildingobjects.calculation.two_element:[282:351]\n        self.area_iw = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_iw = 0.0\n        self.alpha_rad_inner_iw = 0.0\n        self.alpha_comb_inner_iw = 0.0\n        # coefficient of heat transfer facing the adjacent thermal zone\n        self.alpha_conv_outer_iw = 0.0\n        self.alpha_rad_outer_iw = 0.0\n        self.alpha_comb_outer_iw = 0.0\n\n        # UA-Value\n        self.ua_value_iw = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_iw = 0.0\n        self.r_rad_inner_iw = 0.0\n        self.r_comb_inner_iw = 0.0\n        self.r_conv_outer_iw = 0.0\n        self.r_rad_outer_iw = 0.0\n        self.r_comb_outer_iw = 0.0\n\n        # lumped resistance/capacity\n        self.r1_iw = 0.0\n        self.c1_iw = 0.0\n\n        # Attributes for outer walls (OuterWall, Rooftop, GroundFloor)\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for windows",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[395:464]\n==teaser.logic.buildingobjects.calculation.two_element:[1210:1279]\n        self.area_iw = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_iw = 0.0\n        self.alpha_rad_inner_iw = 0.0\n        self.alpha_comb_inner_iw = 0.0\n        # coefficient of heat transfer facing the adjacent thermal zone\n        self.alpha_conv_outer_iw = 0.0\n        self.alpha_rad_outer_iw = 0.0\n        self.alpha_comb_outer_iw = 0.0\n\n        # UA-Value\n        self.ua_value_iw = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_iw = 0.0\n        self.r_rad_inner_iw = 0.0\n        self.r_comb_inner_iw = 0.0\n        self.r_conv_outer_iw = 0.0\n        self.r_rad_outer_iw = 0.0\n        self.r_comb_outer_iw = 0.0\n\n        # lumped resistance/capacity\n        self.r1_iw = 0.0\n        self.c1_iw = 0.0\n\n        # Attributes for outer walls\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for GroundFloor",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.three_element:[1412:1483]\n==teaser.logic.buildingobjects.calculation.two_element:[1279:1350]\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Misc values\n\n        self.alpha_rad_inner_mean = 0.0\n        self.n_outer = 0\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0\n\n    @property\n    def nzbs_for_iw(self):\n        \"\"\"returns borders to neighboured zones to be considered as inner walls\n\n        Returns\n        -------\n        value : list\n            list of those interzonal elements that are NOT to be treated as\n            'outer_ordered' depending on their 'interzonal_type_export'\n            attribute\n\n        \"\"\"\n        elements = []\n        for i in self.thermal_zone.interzonal_elements:\n            if not i.interzonal_type_export == 'outer_ordered':\n                elements.append(i)\n            else:\n                pass\n        return elements",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[288:349]\n==teaser.logic.buildingobjects.calculation.three_element:[419:479]\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0\n        self.ir_emissivity_inner_win = 0.0\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Misc values\n\n        self.alpha_rad_inner_mean = 0.0\n        self.alpha_rad_outer_mean = 0.0\n        self.n_outer = 0\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0\n        self.heat_load_outside_factor = 0.0\n        self.heat_load_ground_factor = 0.0\n\n    def calc_attributes(self):\n        \"\"\"Calls all necessary function to calculate model attributes\"\"\"\n        outer_walls = (\n            self.thermal_zone.outer_walls",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_900:[243:289]\n==teaser.examples.verification.verification_ASHRAE_140_920:[243:289]\n    out_wall_west.orientation = 270.0\n    out_wall_west.tilt = 90.0\n    out_wall_west.inner_convection = 3.16\n    out_wall_west.outer_convection = 24.67\n    out_wall_west.inner_radiation = 5.13\n    out_wall_west.outer_radiation = 4.63\n\n    layer_oww1 = Layer(parent=out_wall_west, id=0)\n    layer_oww1.thickness = 0.1\n\n    material_oww1 = Material(layer_oww1)\n    material_oww1.name = \"Concrete\"\n    material_oww1.density = 1400.0\n    material_oww1.heat_capac = 1000.0 / 1000\n    material_oww1.thermal_conduc = 0.51\n    material_oww1.ir_emissivity = 0.9\n\n    layer_oww2 = Layer(parent=out_wall_west, id=1)\n    layer_oww2.thickness = 0.062\n\n    material_oww2 = Material(layer_oww2)\n    material_oww2.name = \"FoamInsulation\"\n    material_oww2.density = 10\n    material_oww2.heat_capac = 1400 / 1000\n    material_oww2.thermal_conduc = 0.04\n\n    layer_oww3 = Layer(parent=out_wall_west, id=2)\n    layer_oww3.thickness = 0.009\n\n    material_oww3 = Material(layer_oww3)\n    material_oww3.name = \"WoodSiding\"\n    material_oww3.density = 530\n    material_oww3.heat_capac = 900 / 1000\n    material_oww3.thermal_conduc = 0.14\n    material_oww3.solar_absorp = 0.6\n    material_oww3.ir_emissivity = 0.9\n\n    in_wall_floor = Floor(parent=tz)\n    in_wall_floor.name = \"InnerWallFloor\"\n    in_wall_floor.area = 6 * 8\n    in_wall_floor.orientation = -2.0\n    in_wall_floor.tilt = 0.0\n    in_wall_floor.inner_convection = 4.13\n    in_wall_floor.inner_radiation = 5.13\n\n    layer_iwf1 = Layer(parent=in_wall_floor, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[399:437]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[363:401]\n        if self.facade_estimation_factors[self.building_age_group][\"ow1\"] != 0:\n            for key, value in self._outer_wall_names_1.items():\n                for zone in self.thermal_zones:\n                    outer_wall = OuterWall(zone)\n                    outer_wall.load_type_element(\n                        year=self.year_of_construction,\n                        construction=self._construction_data_1,\n                        data_class=self.parent.data,\n                    )\n                    outer_wall.name = key\n                    outer_wall.tilt = value[0]\n                    outer_wall.orientation = value[1]\n                    outer_wall.area = (\n                        self.facade_estimation_factors[self.building_age_group][\"ow1\"]\n                        * zone.area\n                    ) / len(self._outer_wall_names_1)\n\n        if self.facade_estimation_factors[self.building_age_group][\"ow2\"] != 0:\n            for key, value in self._outer_wall_names_2.items():\n                for zone in self.thermal_zones:\n                    outer_wall = OuterWall(zone)\n                    outer_wall.load_type_element(\n                        year=self.year_of_construction,\n                        construction=self._construction_data_2,\n                        data_class=self.parent.data,\n                    )\n                    outer_wall.name = key\n                    outer_wall.tilt = value[0]\n                    outer_wall.orientation = value[1]\n                    outer_wall.area = (\n                        self.facade_estimation_factors[self.building_age_group][\"ow2\"]\n                        * zone.area\n                    ) / len(self._outer_wall_names_2)\n\n        if self.facade_estimation_factors[self.building_age_group][\"win1\"] != 0:\n            for key, value in self.window_names_1.items():\n                for zone in self.thermal_zones:\n                    window = Window(zone)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1328:1384]\n==teaser.logic.buildingobjects.calculation.two_element:[893:954]\n                ):\n                    self.r1_win = 1 / sum(\n                        1 / (win.r1 / 6) for win in self.thermal_zone.windows\n                    )\n\n                    self.r1_ow = 1 / (1 / self.r1_ow + 1 / self.r1_win)\n\n                    self.r_total_ow = 1 / (self.ua_value_ow + self.ua_value_win)\n                    self.r_rest_ow = (\n                        self.r_total_ow\n                        - self.r1_ow\n                        - 1\n                        / (\n                            (\n                                (1 / self.r_conv_inner_ow)\n                                + (1 / self.r_conv_inner_win)\n                                + (1 / self.r_rad_inner_ow)\n                                + (1 / self.r_rad_inner_win)\n                            )\n                        )\n                    ) - 1 / (self.alpha_comb_outer_ow * self.area_ow)\n\n                self.ir_emissivity_inner_ow = (\n                    self.ir_emissivity_inner_ow * self.area_ow\n                    + self.ir_emissivity_inner_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.ir_emissivity_outer_ow = (\n                    self.ir_emissivity_outer_ow * self.area_ow\n                    + self.ir_emissivity_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.solar_absorp_ow = (\n                    self.solar_absorp_ow * self.area_ow\n                    + self.solar_absorp_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n            except RuntimeError:\n                print(\n                    \"As no outer walls or no windows are defined lumped \"\n                    \"parameter cannot be calculated\"\n                )\n\n    def _calc_inner_elements(self):\n        \"\"\"Lumped parameter for outer wall elements\n\n        Calculates all necessary parameters for inner walls. This includes\n        InnerWalls, Ceilings and Floors.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        outer_walls : list\n            List containing all TEASER Wall instances that are treated as same\n            outer wall type. In case of TwoElement model OuterWalls,\n            GroundFloors, Rooftops\n        \"\"\"\n\n        omega = 2 * math.pi / 86400 / self.t_bt\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1328:1393]\n==teaser.logic.buildingobjects.calculation.three_element:[984:1049]\n                ):\n                    self.r1_win = 1 / sum(\n                        1 / (win.r1 / 6) for win in self.thermal_zone.windows\n                    )\n\n                    self.r1_ow = 1 / (1 / self.r1_ow + 1 / self.r1_win)\n\n                    self.r_total_ow = 1 / (self.ua_value_ow + self.ua_value_win)\n                    self.r_rest_ow = (\n                        self.r_total_ow\n                        - self.r1_ow\n                        - 1\n                        / (\n                            (\n                                (1 / self.r_conv_inner_ow)\n                                + (1 / self.r_conv_inner_win)\n                                + (1 / self.r_rad_inner_ow)\n                                + (1 / self.r_rad_inner_win)\n                            )\n                        )\n                    ) - 1 / (self.alpha_comb_outer_ow * self.area_ow)\n\n                self.ir_emissivity_inner_ow = (\n                    self.ir_emissivity_inner_ow * self.area_ow\n                    + self.ir_emissivity_inner_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.ir_emissivity_outer_ow = (\n                    self.ir_emissivity_outer_ow * self.area_ow\n                    + self.ir_emissivity_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.solar_absorp_ow = (\n                    self.solar_absorp_ow * self.area_ow\n                    + self.solar_absorp_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n            except RuntimeError:\n                print(\n                    \"As no outer walls or no windows are defined lumped \"\n                    \"parameter cannot be calculated\"\n                )\n\n    def _calc_ground_floor_elements(self):\n        \"\"\"Lumped parameter for ground floor elements\n\n        Calculates lumped parameters for ground floors. No windows in ground\n        floor allowed.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        \"\"\"\n        omega = 2 * math.pi / 86400 / self.t_bt\n\n        if 0 < len(self.thermal_zone.ground_floors) <= 1:\n            # only one outer wall, no need to calculate chain matrix\n            self.r1_gf = self.thermal_zone.ground_floors[0].r1\n            self.c1_gf = self.thermal_zone.ground_floors[0].c1_korr\n        elif len(self.thermal_zone.ground_floors) > 1:\n            # more than one outer wall, calculate chain matrix\n            self.r1_gf, self.c1_gf = self._calc_parallel_connection(\n                self.thermal_zone.ground_floors, omega, mode='ow'\n            )",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1328:1382]\n==teaser.logic.buildingobjects.calculation.one_element:[722:779]\n                ):\n                    self.r1_win = 1 / sum(\n                        1 / (win.r1 / 6) for win in self.thermal_zone.windows\n                    )\n\n                    self.r1_ow = 1 / (1 / self.r1_ow + 1 / self.r1_win)\n\n                    self.r_total_ow = 1 / (self.ua_value_ow + self.ua_value_win)\n                    self.r_rest_ow = (\n                        self.r_total_ow\n                        - self.r1_ow\n                        - 1\n                        / (\n                            (\n                                (1 / self.r_conv_inner_ow)\n                                + (1 / self.r_conv_inner_win)\n                                + (1 / self.r_rad_inner_ow)\n                                + (1 / self.r_rad_inner_win)\n                            )\n                        )\n                    ) - 1 / (self.alpha_comb_outer_ow * self.area_ow)\n\n                self.ir_emissivity_inner_ow = (\n                    self.ir_emissivity_inner_ow * self.area_ow\n                    + self.ir_emissivity_inner_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.ir_emissivity_outer_ow = (\n                    self.ir_emissivity_outer_ow * self.area_ow\n                    + self.ir_emissivity_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.solar_absorp_ow = (\n                    self.solar_absorp_ow * self.area_ow\n                    + self.solar_absorp_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n            except RuntimeError:\n                print(\n                    \"As no outer walls or no windows are defined lumped \"\n                    \"parameter cannot be calculated\"\n                )\n\n    def _calc_ground_floor_elements(self):\n        \"\"\"Lumped parameter for ground floor elements\n\n        Calculates lumped parameters for ground floors. No windows in ground\n        floor allowed.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1328:1472]\n==teaser.logic.buildingobjects.calculation.four_element:[1200:1345]\n                ):\n                    self.r1_win = 1 / sum(\n                        1 / (win.r1 / 6) for win in self.thermal_zone.windows\n                    )\n\n                    self.r1_ow = 1 / (1 / self.r1_ow + 1 / self.r1_win)\n\n                    self.r_total_ow = 1 / (self.ua_value_ow + self.ua_value_win)\n                    self.r_rest_ow = (\n                        self.r_total_ow\n                        - self.r1_ow\n                        - 1\n                        / (\n                            (\n                                (1 / self.r_conv_inner_ow)\n                                + (1 / self.r_conv_inner_win)\n                                + (1 / self.r_rad_inner_ow)\n                                + (1 / self.r_rad_inner_win)\n                            )\n                        )\n                    ) - 1 / (self.alpha_comb_outer_ow * self.area_ow)\n\n                self.ir_emissivity_inner_ow = (\n                    self.ir_emissivity_inner_ow * self.area_ow\n                    + self.ir_emissivity_inner_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.ir_emissivity_outer_ow = (\n                    self.ir_emissivity_outer_ow * self.area_ow\n                    + self.ir_emissivity_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n                self.solar_absorp_ow = (\n                    self.solar_absorp_ow * self.area_ow\n                    + self.solar_absorp_win * self.area_win\n                ) / (self.area_ow + self.area_win)\n\n            except RuntimeError:\n                print(\n                    \"As no outer walls or no windows are defined lumped \"\n                    \"parameter cannot be calculated\"\n                )\n\n    def _calc_ground_floor_elements(self):\n        \"\"\"Lumped parameter for ground floor elements\n\n        Calculates lumped parameters for ground floors. No windows in ground\n        floor allowed.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        \"\"\"\n        omega = 2 * math.pi / 86400 / self.t_bt\n\n        if 0 < len(self.thermal_zone.ground_floors) <= 1:\n            # only one outer wall, no need to calculate chain matrix\n            self.r1_gf = self.thermal_zone.ground_floors[0].r1\n            self.c1_gf = self.thermal_zone.ground_floors[0].c1_korr\n        elif len(self.thermal_zone.ground_floors) > 1:\n            # more than one outer wall, calculate chain matrix\n            self.r1_gf, self.c1_gf = self._calc_parallel_connection(\n                self.thermal_zone.ground_floors, omega, mode='ow'\n            )\n        else:\n            warnings.warn(\n                \"No walls are defined as ground floors, please be \"\n                \"careful with results. In addition this might lead \"\n                \"to RunTimeErrors\"\n            )\n        try:\n            conduction = 1 / sum(\n                (1 / element.r_conduc) for element in self.thermal_zone.ground_floors\n            )\n\n            self.r_rest_gf = conduction - self.r1_gf\n        except RuntimeError:\n            print(\n                \"As no ground floors are defined lumped \"\n                \"parameter cannot be calculated\"\n            )\n\n    def _calc_rooftop_elements(self):\n        \"\"\"Lumped parameter for rooftop elements\n\n        Calculates lumped parameters for rooftops. Windows are considered in\n        outer wall calculation. This results in an error concerning the\n        interior radiation distribution. But currently there is no other option.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        \"\"\"\n\n        omega = 2 * math.pi / 86400 / self.t_bt\n\n        if 0 < len(self.thermal_zone.rooftops) <= 1:\n            # only one outer wall, no need to calculate chain matrix\n            self.r1_rt = self.thermal_zone.rooftops[0].r1\n            self.c1_rt = self.thermal_zone.rooftops[0].c1_korr\n        elif len(self.thermal_zone.rooftops) > 1:\n            # more than one outer wall, calculate chain matrix\n            self.r1_rt, self.c1_rt = self._calc_parallel_connection(\n                self.thermal_zone.rooftops, omega, mode='ow'\n            )\n        else:\n            warnings.warn(\n                \"No walls are defined as ground floors, please be \"\n                \"careful with results. In addition this might lead \"\n                \"to RunTimeErrors\"\n            )\n        try:\n            conduction = 1 / sum(\n                (1 / element.r_conduc) for element in self.thermal_zone.rooftops\n            )\n\n            self.r_rest_rt = conduction - self.r1_rt\n        except RuntimeError:\n            print(\"As no rooftops are defined lumped \" \"parameter cannot be calculated\")\n\n    def _calc_inner_elements(self):\n        \"\"\"Lumped parameter for inner wall elements\n\n        Calculates all necessary parameters for inner walls. This includes\n        InnerWalls, Ceilings and Floors.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        outer_walls : list\n            List containing all TEASER Wall instances that are treated as same\n            outer wall type. In case of TwoElement model OuterWalls,\n            GroundFloors, Rooftops\n        \"\"\"\n\n        omega = 2 * math.pi / 86400 / self.t_bt\n\n        inner_walls = (\n            self.thermal_zone.inner_walls\n            + self.thermal_zone.floors\n            + self.thermal_zone.ceilings",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[1040:1091]\n==teaser.logic.buildingobjects.calculation.three_element:[1412:1476]\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Misc values\n\n        self.alpha_rad_inner_mean = 0.0\n        self.n_outer = 0\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0\n\n    @property\n    def nzbs_for_iw(self):\n        \"\"\"returns borders to neighboured zones to be considered as inner walls\n\n        Returns\n        -------\n        value : list\n            list of those interzonal elements that are NOT to be treated as\n            'outer_ordered' depending on their 'interzonal_type_export'\n            attribute\n\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.apartmentblock:[120:169]\n==teaser.logic.archetypebuildings.tabula.de.multifamilyhouse:[122:171]\n        self.zone_area_factors = {\"SingleDwelling\": [1, \"Living\"]}\n\n        self._outer_wall_names_1 = {\n            \"ExteriorFacadeNorth_1\": [90.0, 0.0],\n            \"ExteriorFacadeEast_1\": [90.0, 90.0],\n            \"ExteriorFacadeSouth_1\": [90.0, 180.0],\n            \"ExteriorFacadeWest_1\": [90.0, 270.0]}\n\n        self._outer_wall_names_2 = {\n            \"ExteriorFacadeNorth_2\": [90.0, 0.0],\n            \"ExteriorFacadeEast_2\": [90.0, 90.0],\n            \"ExteriorFacadeSouth_2\": [90.0, 180.0],\n            \"ExteriorFacadeWest_2\": [90.0, 270.0]}\n\n        self.roof_names_1 = {\"Rooftop_1\": [0, -1]}  # [0, -1]\n\n        self.roof_names_2 = {\"Rooftop_2\": [0, -1]}\n\n        self.ground_floor_names_1 = {\n            \"GroundFloor_1\": [0, -2]}  # [0, -2]\n\n        self.ground_floor_names_2 = {\n            \"GroundFloor_2\": [0, -2]}\n\n        self.door_names = {\"Door\": [90.0, 270]}\n\n        self.window_names_1 = {\n            \"WindowFacadeNorth_1\": [90.0, 0.0],\n            \"WindowFacadeEast_1\": [90.0, 90.0],\n            \"WindowFacadeSouth_1\": [90.0, 180.0],\n            \"WindowFacadeWest_1\": [90.0, 270.0]}\n        self.window_names_2 = {\n            \"WindowFacadeNorth_2\": [90.0, 0.0],\n            \"WindowFacadeEast_2\": [90.0, 90.0],\n            \"WindowFacadeSouth_2\": [90.0, 180.0],\n            \"WindowFacadeWest_2\": [90.0, 270.0]}\n\n        # [tilt, orientation]\n\n        self.inner_wall_names = {\"InnerWall\": [90.0, 0.0]}\n\n        self.ceiling_names = {\"Ceiling\": [0.0, -1]}\n\n        self.floor_names = {\"Floor\": [0.0, -2]}\n\n        # Rooftop1, Rooftop2, Wall1, Wall2, GroundFloor1, GroundFloor2,\n        # Window1, Window2, Door\n        # Area/ReferenceFloorArea\n        self.facade_estimation_factors = {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_900:[203:242]\n==teaser.examples.verification.verification_ASHRAE_140_920:[203:242]\n    out_wall_south.orientation = 180.0\n    out_wall_south.tilt = 90.0\n    out_wall_south.inner_convection = 3.16\n    out_wall_south.outer_convection = 24.67\n    out_wall_south.inner_radiation = 5.13\n    out_wall_south.outer_radiation = 4.63\n\n    layer_ows1 = Layer(parent=out_wall_south, id=0)\n    layer_ows1.thickness = 0.1\n\n    material_ows1 = Material(layer_ows1)\n    material_ows1.name = \"Concrete\"\n    material_ows1.density = 1400.0\n    material_ows1.heat_capac = 1000.0 / 1000\n    material_ows1.thermal_conduc = 0.51\n    material_ows1.ir_emissivity = 0.9\n\n    layer_ows2 = Layer(parent=out_wall_south, id=1)\n    layer_ows2.thickness = 0.062\n\n    material_ows2 = Material(layer_ows2)\n    material_ows2.name = \"FoamInsulation\"\n    material_ows2.density = 10\n    material_ows2.heat_capac = 1400 / 1000\n    material_ows2.thermal_conduc = 0.04\n\n    layer_ows3 = Layer(parent=out_wall_south, id=2)\n    layer_ows3.thickness = 0.009\n\n    material_ows3 = Material(layer_ows3)\n    material_ows3.name = \"WoodSiding\"\n    material_ows3.density = 530\n    material_ows3.heat_capac = 900 / 1000\n    material_ows3.thermal_conduc = 0.14\n    material_ows3.solar_absorp = 0.6\n    material_ows3.ir_emissivity = 0.9\n\n    out_wall_west = OuterWall(parent=tz)\n    out_wall_west.name = \"OuterWallWest\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_900:[163:202]\n==teaser.examples.verification.verification_ASHRAE_140_920:[163:202]\n    out_wall_east.orientation = 90.0\n    out_wall_east.tilt = 90.0\n    out_wall_east.inner_convection = 3.16\n    out_wall_east.outer_convection = 24.67\n    out_wall_east.inner_radiation = 5.13\n    out_wall_east.outer_radiation = 4.63\n\n    layer_owe1 = Layer(parent=out_wall_east, id=0)\n    layer_owe1.thickness = 0.1\n\n    material_owe1 = Material(layer_owe1)\n    material_owe1.name = \"Concrete\"\n    material_owe1.density = 1400.0\n    material_owe1.heat_capac = 1000 / 1000\n    material_owe1.thermal_conduc = 0.51\n    material_owe1.ir_emissivity = 0.9\n\n    layer_owe2 = Layer(parent=out_wall_east, id=1)\n    layer_owe2.thickness = 0.062\n\n    material_owe2 = Material(layer_owe2)\n    material_owe2.name = \"FoamInsulation\"\n    material_owe2.density = 10\n    material_owe2.heat_capac = 1400 / 1000\n    material_owe2.thermal_conduc = 0.04\n\n    layer_owe3 = Layer(parent=out_wall_east, id=2)\n    layer_owe3.thickness = 0.009\n\n    material_owe3 = Material(layer_owe3)\n    material_owe3.name = \"WoodSiding\"\n    material_owe3.density = 530\n    material_owe3.heat_capac = 900 / 1000\n    material_owe3.thermal_conduc = 0.14\n    material_owe3.solar_absorp = 0.6\n    material_owe3.ir_emissivity = 0.9\n\n    out_wall_south = OuterWall(parent=tz)\n    out_wall_south.name = \"OuterWallSouth\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[204:243]\n==teaser.examples.verification.verification_ASHRAE_140_620:[204:243]\n    out_wall_south.orientation = 180.0\n    out_wall_south.tilt = 90.0\n    out_wall_south.inner_convection = 3.16\n    out_wall_south.outer_convection = 24.67\n    out_wall_south.inner_radiation = 5.13\n    out_wall_south.outer_radiation = 4.63\n\n    layer_ows1 = Layer(parent=out_wall_south, id=0)\n    layer_ows1.thickness = 0.012\n\n    material_ows1 = Material(layer_ows1)\n    material_ows1.name = \"Plasterboard\"\n    material_ows1.density = 950.0\n    material_ows1.heat_capac = 840.0 / 1000\n    material_ows1.thermal_conduc = 0.16\n    material_ows1.ir_emissivity = 0.9\n\n    layer_ows2 = Layer(parent=out_wall_south, id=1)\n    layer_ows2.thickness = 0.066\n\n    material_ows2 = Material(layer_ows2)\n    material_ows2.name = \"Fiberglass\"\n    material_ows2.density = 12\n    material_ows2.heat_capac = 840 / 1000\n    material_ows2.thermal_conduc = 0.04\n\n    layer_ows3 = Layer(parent=out_wall_south, id=2)\n    layer_ows3.thickness = 0.009\n\n    material_ows3 = Material(layer_ows3)\n    material_ows3.name = \"WoodSiding\"\n    material_ows3.density = 530\n    material_ows3.heat_capac = 900 / 1000\n    material_ows3.thermal_conduc = 0.14\n    material_ows3.solar_absorp = 0.6\n    material_ows3.ir_emissivity = 0.9\n\n    out_wall_west = OuterWall(parent=tz)\n    out_wall_west.name = \"OuterWallWest\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[164:203]\n==teaser.examples.verification.verification_ASHRAE_140_620:[164:203]\n    out_wall_east.orientation = 90.0\n    out_wall_east.tilt = 90.0\n    out_wall_east.inner_convection = 3.16\n    out_wall_east.outer_convection = 24.67\n    out_wall_east.inner_radiation = 5.13\n    out_wall_east.outer_radiation = 4.63\n\n    layer_owe1 = Layer(parent=out_wall_east, id=0)\n    layer_owe1.thickness = 0.012\n\n    material_owe1 = Material(layer_owe1)\n    material_owe1.name = \"Plasterboard\"\n    material_owe1.density = 950.0\n    material_owe1.heat_capac = 840.0 / 1000\n    material_owe1.thermal_conduc = 0.16\n    material_owe1.ir_emissivity = 0.9\n\n    layer_owe2 = Layer(parent=out_wall_east, id=1)\n    layer_owe2.thickness = 0.066\n\n    material_owe2 = Material(layer_owe2)\n    material_owe2.name = \"Fiberglass\"\n    material_owe2.density = 12\n    material_owe2.heat_capac = 840 / 1000\n    material_owe2.thermal_conduc = 0.04\n\n    layer_owe3 = Layer(parent=out_wall_east, id=2)\n    layer_owe3.thickness = 0.009\n\n    material_owe3 = Material(layer_owe3)\n    material_owe3.name = \"WoodSiding\"\n    material_owe3.density = 530\n    material_owe3.heat_capac = 900 / 1000\n    material_owe3.thermal_conduc = 0.14\n    material_owe3.solar_absorp = 0.6\n    material_owe3.ir_emissivity = 0.9\n\n    out_wall_south = OuterWall(parent=tz)\n    out_wall_south.name = \"OuterWallSouth\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1653:1686]\n==teaser.logic.buildingobjects.calculation.three_element:[1230:1280]\n            if not wins:\n                self.weightfactor_win.append(0.0)\n                self.shading_g_total.append(1.0)\n                self.window_areas.append(0.0)\n                self.transparent_areas.append(0.0)\n                self.shading_max_irr.append(9999.9)\n            else:\n                self.weightfactor_win.append(sum([win.wf_out for win in wins]))\n\n                if self.merge_windows is False:\n                    self.window_areas.append(sum([win.area for win in wins]))\n                    self.transparent_areas.append(sum([win.area for win in wins]))\n\n                else:\n                    self.window_areas.append(0)\n                    self.transparent_areas.append(sum([win.area for win in wins]))\n                self.shading_g_total.append(\n                    sum(\n                        [\n                            win.shading_g_total * win.area / sum([w.area for w in wins])\n                            for win in wins\n                        ]\n                    )\n                )\n                self.shading_max_irr.append(\n                    sum(\n                        [\n                            win.shading_max_irr * win.area / sum([w.area for w in wins])\n                            for win in wins\n                        ]\n                    )\n                )\n\n    def _calc_heat_load(self):\n        \"\"\"Static heat load calculation\n\n        This function calculates the static heat load of the thermal zone by\n        multiplying the UA-Value of the elements with the given Temperature\n        difference of t_inside and t_outside. And takes heat losses through\n        infiltration into account.\n\n        Keep in mind that this is a rough approximation of the DIN Heat Demand\n\n        Attributes\n        ----------\n        ua_value_ow_temp : float [W/(m2*K)]\n            UA Value without GroundFloors\n        ua_value_gf_temp : float [W/(m2*K)]\n            UA Value of all GroundFloors\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1496:1529]\n==teaser.logic.buildingobjects.calculation.one_element:[911:958]\n            if not wins:\n                self.weightfactor_win.append(0.0)\n                self.shading_g_total.append(1.0)\n                self.window_areas.append(0.0)\n                self.transparent_areas.append(0.0)\n                self.shading_max_irr.append(9999.9)\n            else:\n                self.weightfactor_win.append(sum([win.wf_out for win in wins]))\n\n                if self.merge_windows is False:\n                    self.window_areas.append(sum([win.area for win in wins]))\n                    self.transparent_areas.append(sum([win.area for win in wins]))\n\n                else:\n                    self.window_areas.append(0)\n                    self.transparent_areas.append(sum([win.area for win in wins]))\n                self.shading_g_total.append(\n                    sum(\n                        [\n                            win.shading_g_total * win.area / sum([w.area for w in wins])\n                            for win in wins\n                        ]\n                    )\n                )\n                self.shading_max_irr.append(\n                    sum(\n                        [\n                            win.shading_max_irr * win.area / sum([w.area for w in wins])\n                            for win in wins\n                        ]\n                    )\n                )\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[357:399]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[319:360]\n        for key in self.facade_estimation_factors:\n            if (\n                self.year_of_construction in range(key[0], key[1])\n                or self.year_of_construction == key[1]\n            ):\n                self.building_age_group = (key[0], key[1])\n\n        if self.building_age_group is None:\n            raise RuntimeError(\n                \"Year of construction not supported for this archetype\" \"building\"\n            )\n\n    def generate_archetype(self):\n        \"\"\"Generates a SingleFamilyHouse archetype buildings\n\n        With given values, this function generates an archetype building for\n        Tabula Single Family House.\n        \"\"\"\n        self.thermal_zones = None\n        self._check_year_of_construction()\n        # help area for the correct building area setting while using typeBldgs\n        type_bldg_area = self.net_leased_area\n        self.net_leased_area = 0.0\n\n        for key, value in self.zone_area_factors.items():\n            zone = ThermalZone(parent=self)\n            zone.name = key\n            zone.area = type_bldg_area * value[0]\n            try:\n                zone.number_of_floors = value[2]['number_of_floors']\n            except (KeyError, IndexError):\n                pass\n            try:\n                zone.height_of_floors = value[2]['height_of_floors']\n            except (KeyError, IndexError):\n                pass\n            use_cond = UseCond(parent=zone)\n            use_cond.load_use_conditions(zone_usage=value[1])\n            zone.use_conditions = use_cond\n\n            zone.use_conditions.with_ahu = False\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_900:[334:374]\n==teaser.examples.verification.verification_ASHRAE_140_920:[334:374]\n    win_2.inner_convection = 3.16\n    win_2.inner_radiation = 5.13\n    win_2.outer_convection = 16.37\n    win_2.outer_radiation = 4.63\n    win_2.g_value = 0.789\n    win_2.a_conv = 0.03  # for the given U-value extracted from VDI 6007-2/-3\n\n    win_2_layer = Layer(parent=win_2)\n    win_2_layer.id = 1\n    win_2_layer.thickness = 0.024\n\n    win_2_material = Material(win_2_layer)\n    win_2_material.name = \"GlasWindow\"\n    win_2_material.thermal_conduc = 0.15\n    win_2_material.transmittance = 0.907\n    win_2_material.ir_emissivity = 0.9\n\n    #  This is a dummy ground floor to export three and four elements models.\n    #  Please set values for floor plate in three element and four element\n    #  models to default.\n\n    if number_of_elements >= 3:\n        out_wall_gf = GroundFloor(parent=tz)\n        out_wall_gf.name = \"ExtWallGroundFloor\"\n        out_wall_gf.area = 6 * 8\n        out_wall_gf.orientation = -2.0\n        out_wall_gf.tilt = 0.0\n        out_wall_gf.inner_convection = 4.13\n        out_wall_gf.inner_radiation = 5.13\n\n        layer_ofgw1 = Layer(parent=out_wall_gf, id=0)\n        layer_ofgw1.thickness = 1.003\n\n        material_ofgw1 = Material(layer_ofgw1)\n        material_ofgw1.name = \"Insulation\"\n        material_ofgw1.density = 0.0001  # as small as possible\n        material_ofgw1.heat_capac = 0.0001  # as small as possible\n        material_ofgw1.thermal_conduc = 0.04\n\n    if save:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[335:375]\n==teaser.examples.verification.verification_ASHRAE_140_620:[335:375]\n    win_2.inner_convection = 3.16\n    win_2.inner_radiation = 5.13\n    win_2.outer_convection = 16.37\n    win_2.outer_radiation = 4.63\n    win_2.g_value = 0.789\n    win_2.a_conv = 0.03  # for the given U-value extracted from VDI 6007-2/-3\n\n    win_2_layer = Layer(parent=win_2)\n    win_2_layer.id = 1\n    win_2_layer.thickness = 0.024\n\n    win_2_material = Material(win_2_layer)\n    win_2_material.name = \"GlasWindow\"\n    win_2_material.thermal_conduc = 0.15\n    win_2_material.transmittance = 0.907\n    win_2_material.ir_emissivity = 0.9\n\n    #  This is a dummy ground floor to export three and four elements models.\n    #  Please set values for floor plate in three element and four element\n    #  models to default.\n\n    if number_of_elements >= 3:\n        out_wall_gf = GroundFloor(parent=tz)\n        out_wall_gf.name = \"ExtWallGroundFloor\"\n        out_wall_gf.area = 6 * 8\n        out_wall_gf.orientation = -2.0\n        out_wall_gf.tilt = 0.0\n        out_wall_gf.inner_convection = 4.13\n        out_wall_gf.inner_radiation = 5.13\n\n        layer_ofgw1 = Layer(parent=out_wall_gf, id=0)\n        layer_ofgw1.thickness = 1.003\n\n        material_ofgw1 = Material(layer_ofgw1)\n        material_ofgw1.name = \"Insulation\"\n        material_ofgw1.density = 0.0001  # as small as possible\n        material_ofgw1.heat_capac = 0.0001  # as small as possible\n        material_ofgw1.thermal_conduc = 0.04\n\n    if save:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[851:914]\n==teaser.logic.buildingobjects.calculation.three_element:[714:780]\n            )\n        ) / self.area_ow\n\n        self.alpha_conv_outer_ow = 1 / (self.r_conv_outer_ow * self.area_ow)\n        self.alpha_rad_outer_ow = 1 / (self.r_rad_outer_ow * self.area_ow)\n        self.alpha_comb_outer_ow = 1 / (self.r_comb_outer_ow * self.area_ow)\n\n    def _sum_ground_floor_elements(self):\n        \"\"\"Sum attributes for ground floor elements\n\n        This function sums and computes the area-weighted values,\n        where necessary (the class doc string) for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        \"\"\"\n\n        self.area_gf = sum(ground.area for ground in self.thermal_zone.ground_floors)\n\n        self.ua_value_gf = sum(\n            ground.ua_value for ground in self.thermal_zone.ground_floors\n        )\n\n        self.r_total_gf = 1 / self.ua_value_gf\n\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_gf = 1 / sum(\n            1 / ground.r_inner_conv for ground in self.thermal_zone.ground_floors\n        )\n\n        self.r_rad_inner_gf = 1 / sum(\n            1 / ground.r_inner_rad for ground in self.thermal_zone.ground_floors\n        )\n\n        self.r_comb_inner_gf = 1 / sum(\n            1 / ground.r_inner_comb for ground in self.thermal_zone.ground_floors\n        )\n\n        self.ir_emissivity_inner_gf = (\n            sum(\n                ground.layer[0].material.ir_emissivity * ground.area\n                for ground in self.thermal_zone.ground_floors\n            )\n            / self.area_gf\n        )\n\n        self.alpha_conv_inner_gf = 1 / (self.r_conv_inner_gf * self.area_gf)\n        self.alpha_rad_inner_gf = 1 / (self.r_rad_inner_gf * self.area_gf)\n        self.alpha_comb_inner_gf = 1 / (self.r_comb_inner_gf * self.area_gf)\n\n    def _sum_rooftop_elements(self):\n        \"\"\"Sum attributes for rooftop elements\n\n        This function sums and computes the area-weighted values,\n        where necessary  for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        For FourElement model it treats outer walls and zone borders to\n        neighboured zones (if this zone is heated)\n        as one kind of wall type.\n\n        \"\"\"\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[796:837]\n==teaser.logic.buildingobjects.calculation.three_element:[663:704]\n        self.r_total_ow = 1 / self.ua_value_ow\n\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_ow = 1 / (\n            sum(1 / out_wall.r_inner_conv for out_wall in outer_walls)\n        )\n\n        self.r_rad_inner_ow = 1 / (\n            sum(1 / out_wall.r_inner_rad for out_wall in outer_walls)\n        )\n\n        self.r_comb_inner_ow = 1 / (\n            sum(1 / out_wall.r_inner_comb for out_wall in outer_walls)\n        )\n\n        self.ir_emissivity_inner_ow = (\n            sum(\n                out_wall.layer[0].material.ir_emissivity * out_wall.area\n                for out_wall in outer_walls\n            )\n        ) / self.area_ow\n\n        self.alpha_conv_inner_ow = 1 / (self.r_conv_inner_ow * self.area_ow)\n        self.alpha_rad_inner_ow = 1 / (self.r_rad_inner_ow * self.area_ow)\n        self.alpha_comb_inner_ow = 1 / (self.r_comb_inner_ow * self.area_ow)\n\n        # values facing the ambient\n        # ground floor does not have any coefficients on ambient side\n\n        self.r_conv_outer_ow = 1 / (\n            sum(1 / out_wall.r_outer_conv for out_wall in outer_walls)\n        )\n        self.r_rad_outer_ow = 1 / (\n            sum(1 / out_wall.r_outer_rad for out_wall in outer_walls)\n        )\n        self.r_comb_outer_ow = 1 / (\n            sum(1 / out_wall.r_outer_comb for out_wall in outer_walls)\n        )\n\n        self.ir_emissivity_outer_ow = (",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[540:588]\n==teaser.logic.buildingobjects.calculation.one_element:[288:336]\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0\n        self.ir_emissivity_inner_win = 0.0\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Misc values\n\n        self.alpha_rad_inner_mean = 0.0\n        self.alpha_rad_outer_mean = 0.0\n        self.n_outer = 0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_900:[10:74]\n==teaser.examples.verification.verification_ASHRAE_140_920:[10:74]\nimport os\nfrom teaser.project import Project\nfrom teaser.logic.buildingobjects.building import Building\nfrom teaser.logic.buildingobjects.thermalzone import ThermalZone\nfrom teaser.logic.buildingobjects.buildingphysics.rooftop import Rooftop\nfrom teaser.logic.buildingobjects.buildingphysics.layer import Layer\nfrom teaser.logic.buildingobjects.buildingphysics.material import Material\nfrom teaser.logic.buildingobjects.buildingphysics.outerwall import OuterWall\nfrom teaser.logic.buildingobjects.buildingphysics.floor import Floor\nfrom teaser.logic.buildingobjects.buildingphysics.groundfloor import GroundFloor\nfrom teaser.logic.buildingobjects.buildingphysics.window import Window\nfrom teaser.logic.buildingobjects.useconditions import UseConditions\nimport teaser.logic.utilities as utilities\n\n\ndef main(number_of_elements=2):\n\n    prj = from_scratch(number_of_elements=number_of_elements, save=False)\n    # prj = load_file()\n\n    prj.used_library_calc = \"IBPSA\"\n    prj.number_of_elements_calc = number_of_elements\n    prj.merge_windows_calc = False\n    prj.weather_file_path = utilities.get_full_path(\n        os.path.join(\"data\", \"input\", \"inputdata\", \"weatherdata\", \"ASHRAE140.mos\")\n    )\n\n    prj.buildings[0].calc_building_parameter(\n        number_of_elements=number_of_elements, merge_windows=False, used_library=\"IBPSA\"\n    )\n\n    prj.export_ibpsa()\n\n\ndef from_scratch(number_of_elements, save=False, path=utilities.get_default_path()):\n    \"\"\"This function creates the test room from scratch.\n\n    Notes: The standard defines an solar absorption coefficient for interior\n    surfaces of 0.6. We do not consider this, but we could by multiplying\n    the solar radiation after the window by 0.6.\n\n    Parameters\n    ----------\n    number_of_elements: int\n        Number of elements of model\n    path: str (optional)\n        Path where Project should be stored as .teaserjson\n    save: bool (optional)\n        True if Project should be stored as .teaserjson at path\n\n    Returns\n    -------\n\n    prj: Project\n        Project that contains the building with the test room\n\n    \"\"\"\n    prj = Project()\n    prj.name = \"ASHRAE140Verification\"\n\n    bldg = Building(parent=prj)\n    bldg.name = \"TestBuilding\"\n\n    tz = ThermalZone(parent=bldg)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[10:74]\n==teaser.examples.verification.verification_ASHRAE_140_620:[10:75]\nimport os\nfrom teaser.project import Project\nfrom teaser.logic.buildingobjects.building import Building\nfrom teaser.logic.buildingobjects.thermalzone import ThermalZone\nfrom teaser.logic.buildingobjects.buildingphysics.rooftop import Rooftop\nfrom teaser.logic.buildingobjects.buildingphysics.layer import Layer\nfrom teaser.logic.buildingobjects.buildingphysics.material import Material\nfrom teaser.logic.buildingobjects.buildingphysics.outerwall import OuterWall\nfrom teaser.logic.buildingobjects.buildingphysics.floor import Floor\nfrom teaser.logic.buildingobjects.buildingphysics.groundfloor import GroundFloor\nfrom teaser.logic.buildingobjects.buildingphysics.window import Window\nfrom teaser.logic.buildingobjects.useconditions import UseConditions\nimport teaser.logic.utilities as utilities\n\n\ndef main(number_of_elements=2):\n\n    prj = from_scratch(number_of_elements=number_of_elements, save=False)\n    # prj = load_file()\n\n    prj.used_library_calc = \"IBPSA\"\n    prj.number_of_elements_calc = number_of_elements\n    prj.merge_windows_calc = False\n    prj.weather_file_path = utilities.get_full_path(\n        os.path.join(\"data\", \"input\", \"inputdata\", \"weatherdata\", \"ASHRAE140.mos\")\n    )\n\n    prj.buildings[0].calc_building_parameter(\n        number_of_elements=number_of_elements, merge_windows=False, used_library=\"IBPSA\"\n    )\n\n    prj.export_ibpsa()\n\n\ndef from_scratch(number_of_elements, save=False, path=utilities.get_default_path()):\n    \"\"\"This function creates the test room from scratch.\n\n    Notes: The standard defines an solar absorption coefficient for interior\n    surfaces of 0.6. We do not consider this, but we could by multiplying\n    the solar radiation after the window by 0.6.\n\n    Parameters\n    ----------\n    number_of_elements: int\n        Number of elements of model\n    path: str (optional)\n        Path where Project should be stored as .teaserjson\n    save: bool (optional)\n        True if Project should be stored as .teaserjson at path\n\n    Returns\n    -------\n\n    prj: Project\n        Project that contains the building with the test room\n\n    \"\"\"\n    prj = Project()\n    prj.name = \"ASHRAE140Verification\"\n\n    bldg = Building(parent=prj)\n    bldg.name = \"TestBuilding\"\n\n    tz = ThermalZone(parent=bldg)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1740:1786]\n==teaser.logic.buildingobjects.calculation.one_element:[1040:1086]\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Misc values\n\n        self.alpha_rad_inner_mean = 0.0\n        self.n_outer = 0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[521:566]\n==teaser.logic.buildingobjects.calculation.one_element:[288:333]\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0\n        self.ir_emissivity_inner_win = 0.0\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Misc values\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1903:1947]\n==teaser.logic.buildingobjects.calculation.one_element:[1040:1084]\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Misc values\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[21:47]\n==teaser.logic.buildingobjects.useconditions:[398:424]\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n    ]\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[444:587]\n==teaser.logic.buildingobjects.calculation.two_element:[537:686]\n            r1 = (\n                r1_before * c1_before ** 2 + r1_add * c1_add ** 2\n                + omega ** 2 * r1_before * r1_add * (r1_before + r1_add)\n                * c1_before ** 2 * c1_add ** 2\n            ) / (\n                (c1_before + c1_add) ** 2\n                + omega ** 2 * (r1_before + r1_add) ** 2 * c1_before ** 2\n                * c1_add ** 2\n            )\n\n            c1 = (\n                (c1_before + c1_add) ** 2\n                + omega ** 2 * (r1_before + r1_add) ** 2 * c1_before ** 2\n                * c1_add ** 2\n            ) / (\n                c1_before + c1_add\n                + omega ** 2\n                * (r1_before ** 2 * c1_before + r1_add ** 2 * c1_add)\n                * c1_before * c1_add\n            )\n\n        return r1, c1\n\n    def _sum_outer_wall_elements(self):\n        \"\"\"Sum attributes for outer wall elements\n\n        This function sums and computes the area-weighted values,\n        where necessary (the class doc string) for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        For TwoElement model it treats rooftops, ground floor, outer walls\n        and zone borders to neighboured zones (if this zone is heated)\n        as one kind of wall type.\n\n        \"\"\"\n        # treat all outer wall types identical\n\n        outer_walls = (\n            self.thermal_zone.outer_walls\n            + self.thermal_zone.ground_floors\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.find_izes_outer()\n        )\n\n        self.area_ow = (\n            sum(out_wall.area for out_wall in outer_walls)\n        )\n\n        self.ua_value_ow = (\n            sum(out_wall.ua_value for out_wall in outer_walls)\n        )\n\n        self.r_total_ow = 1 / self.ua_value_ow\n\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_ow = 1 / (\n            sum(1 / out_wall.r_inner_conv for out_wall in outer_walls)\n        )\n\n        self.r_rad_inner_ow = 1 / (\n            sum(1 / out_wall.r_inner_rad for out_wall in outer_walls)\n        )\n\n        self.r_comb_inner_ow = 1 / (\n            sum(1 / out_wall.r_inner_comb for out_wall in outer_walls)\n        )\n\n        self.ir_emissivity_inner_ow = (\n            sum(\n                out_wall.layer[0].material.ir_emissivity * out_wall.area\n                for out_wall in outer_walls\n            )\n        ) / self.area_ow\n\n        self.alpha_conv_inner_ow = 1 / (self.r_conv_inner_ow * self.area_ow)\n        self.alpha_rad_inner_ow = 1 / (self.r_rad_inner_ow * self.area_ow)\n        self.alpha_comb_inner_ow = 1 / (self.r_comb_inner_ow * self.area_ow)\n\n        # values facing the ambient\n        # ground floor does not have any coefficients on ambient side\n\n        _area_ow_rt = sum(\n            out_wall.area for out_wall in self.thermal_zone.outer_walls\n        ) + sum(\n            roof.area for roof in self.thermal_zone.rooftops\n        )\n\n        _area_ow_rt_nzb = _area_ow_rt + sum(\n            roof.area for roof in self.thermal_zone.find_izes_outer()\n        )\n\n        self.r_conv_outer_ow = 1 / (\n            sum(1 / out_wall.r_outer_conv for out_wall in self.thermal_zone.outer_walls)\n            + sum(1 / roof.r_outer_conv for roof in self.thermal_zone.rooftops)\n            + sum(1 / nzb.r_outer_conv for nzb in self.thermal_zone.find_izes_outer())\n        )\n        self.r_rad_outer_ow = 1 / (\n            sum(1 / out_wall.r_outer_rad for out_wall in self.thermal_zone.outer_walls)\n            + sum(1 / roof.r_outer_rad for roof in self.thermal_zone.rooftops)\n            + sum(1 / nzb.r_outer_rad for nzb in self.thermal_zone.find_izes_outer())\n        )\n        self.r_comb_outer_ow = 1 / (\n            sum(1 / out_wall.r_outer_comb for out_wall in self.thermal_zone.outer_walls)\n            + sum(1 / roof.r_outer_comb for roof in self.thermal_zone.rooftops)\n            + sum(1 / nzb.r_outer_comb for nzb in self.thermal_zone.find_izes_outer())\n        )\n\n        self.ir_emissivity_outer_ow = (\n            sum(\n                out_wall.layer[-1].material.ir_emissivity * out_wall.area\n                for out_wall in self.thermal_zone.outer_walls\n            )\n            + sum(\n                roof.layer[-1].material.ir_emissivity * roof.area\n                for roof in self.thermal_zone.rooftops\n            )\n        ) / _area_ow_rt\n\n        self.solar_absorp_ow = (\n            sum(\n                out_wall.layer[-1].material.solar_absorp * out_wall.area\n                for out_wall in self.thermal_zone.outer_walls\n            )\n            + sum(\n                roof.layer[-1].material.solar_absorp * roof.area\n                for roof in self.thermal_zone.rooftops\n            )\n        ) / _area_ow_rt\n\n        self.alpha_conv_outer_ow = 1 / (self.r_conv_outer_ow * _area_ow_rt_nzb)\n        self.alpha_rad_outer_ow = 1 / (self.r_rad_outer_ow * _area_ow_rt_nzb)\n        self.alpha_comb_outer_ow = 1 / (self.r_comb_outer_ow * _area_ow_rt_nzb)\n\n    def _sum_inner_wall_elements(self):\n        \"\"\"Sum attributes for interior elements\n\n        This function sums and computes the area-weighted values,\n        where necessary (the class doc string) for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        It treats all inner walls identical.\n\n        Function is identical for TwoElement, ThreeElement and FourElement.\n\n        Calculation of adjacent thermal zones and thus these attributes are\n        currently not supported.\n\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1623:1665]\n==teaser.logic.buildingobjects.calculation.one_element:[995:1037]\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for GroundFloor",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[422:464]\n==teaser.logic.buildingobjects.calculation.one_element:[246:288]\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for windows",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[783:823]\n==teaser.logic.buildingobjects.calculation.two_element:[994:1034]\n        )\n\n        if self.merge_windows is True:\n\n            for wall in outer_walls:\n                wall.wf_out = wall.ua_value / (self.ua_value_ow + self.ua_value_win)\n\n            for win in self.thermal_zone.windows:\n                win.wf_out = win.ua_value / (self.ua_value_ow + self.ua_value_win)\n\n            self.weightfactor_ground = sum(\n                gf.wf_out for gf in self.thermal_zone.ground_floors\n            )\n\n        elif self.merge_windows is False:\n\n            for wall in outer_walls:\n                wall.wf_out = wall.ua_value / self.ua_value_ow\n\n            for win in self.thermal_zone.windows:\n                win.wf_out = win.ua_value / self.ua_value_win\n\n            self.weightfactor_ground = sum(\n                gf.wf_out for gf in self.thermal_zone.ground_floors\n            )\n\n        else:\n            raise ValueError(\"specify merge window method correctly\")\n\n    def _calc_mean_values(self):\n        \"\"\"Calculates mean values for inner and outer elements\n\n        This function calculates mean values inside the thermal zone (e.g.\n        the mean value for coefficient of radiative heat transfer between\n        inner and outer walls\n        \"\"\"\n\n        self.alpha_rad_inner_mean = (\n            self.area_ow * self.alpha_rad_inner_ow\n            + self.area_win * self.alpha_rad_inner_win",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[444:482]\n==teaser.logic.buildingobjects.calculation.three_element:[618:655]\n            r1 = (\n                r1_before * c1_before ** 2 + r1_add * c1_add ** 2\n                + omega ** 2 * r1_before * r1_add * (r1_before + r1_add)\n                * c1_before ** 2 * c1_add ** 2\n            ) / (\n                (c1_before + c1_add) ** 2\n                + omega ** 2 * (r1_before + r1_add) ** 2 * c1_before ** 2\n                * c1_add ** 2\n            )\n\n            c1 = (\n                (c1_before + c1_add) ** 2\n                + omega ** 2 * (r1_before + r1_add) ** 2 * c1_before ** 2\n                * c1_add ** 2\n            ) / (\n                c1_before + c1_add\n                + omega ** 2\n                * (r1_before ** 2 * c1_before + r1_add ** 2 * c1_add)\n                * c1_before * c1_add\n            )\n\n        return r1, c1\n\n    def _sum_outer_wall_elements(self):\n        \"\"\"Sum attributes for outer wall elements\n\n        This function sums and computes the area-weighted values,\n        where necessary (the class doc string) for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        For TwoElement model it treats rooftops, ground floor and outer walls\n        as one kind of wall type.\n\n        \"\"\"\n        # treat all outer wall types identical\n\n        outer_walls = (\n            self.thermal_zone.outer_walls",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[513:553]\n==teaser.logic.buildingobjects.calculation.four_element:[1732:1772]\n        self.rooftop_areas = []\n        self.tilt_rt = []\n        self.orientation_rt = []\n\n        # TODO: check this value\n        self.r_rad_rt_iw = 0.0\n\n        # Attributes for windows\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1895:1935]\n==teaser.logic.buildingobjects.calculation.four_element:[532:572]\n        self.rooftop_areas = []\n        self.tilt_rt = []\n        self.orientation_rt = []\n\n        # TODO: check this value\n        self.r_rad_rt_iw = 0.0\n\n        # Attributes for windows\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[381:401]\n==teaser.logic.buildingobjects.calculation.two_element:[463:483]\n        if len(self.thermal_zone.windows) < 1:\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no windows have been defined.\"\n            )\n        else:\n            self._sum_window_elements()\n        if len(outer_walls) >= 1 or len(self.thermal_zone.windows) >= 1:\n            self._calc_outer_elements()\n            self._calc_wf()\n            self._calc_mean_values()\n        if len(self.thermal_zone.interzonal_elements) >= 1:\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[794:826]\n==teaser.logic.buildingobjects.calculation.one_element:[493:525]\n        )\n\n        self.r_total_ow = 1 / self.ua_value_ow\n\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_ow = 1 / (\n            sum(1 / out_wall.r_inner_conv for out_wall in outer_walls)\n        )\n\n        self.r_rad_inner_ow = 1 / (\n            sum(1 / out_wall.r_inner_rad for out_wall in outer_walls)\n        )\n\n        self.r_comb_inner_ow = 1 / (\n            sum(1 / out_wall.r_inner_comb for out_wall in outer_walls)\n        )\n\n        self.ir_emissivity_inner_ow = (\n            sum(\n                out_wall.layer[0].material.ir_emissivity * out_wall.area\n                for out_wall in outer_walls\n            )\n        ) / self.area_ow\n\n        self.alpha_conv_inner_ow = 1 / (self.r_conv_inner_ow * self.area_ow)\n        self.alpha_rad_inner_ow = 1 / (self.r_rad_inner_ow * self.area_ow)\n        self.alpha_comb_inner_ow = 1 / (self.r_comb_inner_ow * self.area_ow)\n\n        # values facing the ambient\n        # ground floor does not have any coefficients on ambient side\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[752:788]\n==teaser.logic.buildingobjects.calculation.one_element:[444:480]\n            r1 = (\n                r1_before * c1_before ** 2 + r1_add * c1_add ** 2\n                + omega ** 2 * r1_before * r1_add * (r1_before + r1_add)\n                * c1_before ** 2 * c1_add ** 2\n            ) / (\n                (c1_before + c1_add) ** 2\n                + omega ** 2 * (r1_before + r1_add) ** 2 * c1_before ** 2\n                * c1_add ** 2\n            )\n\n            c1 = (\n                (c1_before + c1_add) ** 2\n                + omega ** 2 * (r1_before + r1_add) ** 2 * c1_before ** 2\n                * c1_add ** 2\n            ) / (\n                c1_before + c1_add\n                + omega ** 2\n                * (r1_before ** 2 * c1_before + r1_add ** 2 * c1_add)\n                * c1_before * c1_add\n            )\n\n        return r1, c1\n\n    def _sum_outer_wall_elements(self):\n        \"\"\"Sum attributes for outer wall elements\n\n        This function sums and computes the area-weighted values,\n        where necessary  for coefficients of heat\n        transfer, resistances, areas and UA-Values.\n\n        For FourElement model it treats outer walls and zone borders to\n        neighboured zones (if this zone is heated)\n        as one kind of wall type.\n\n        \"\"\"\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_620:[228:252]\n==teaser.examples.verification.verification_ASHRAE_140_920:[227:251]\n    material_ows2.thermal_conduc = 0.04\n\n    layer_ows3 = Layer(parent=out_wall_south, id=2)\n    layer_ows3.thickness = 0.009\n\n    material_ows3 = Material(layer_ows3)\n    material_ows3.name = \"WoodSiding\"\n    material_ows3.density = 530\n    material_ows3.heat_capac = 900 / 1000\n    material_ows3.thermal_conduc = 0.14\n    material_ows3.solar_absorp = 0.6\n    material_ows3.ir_emissivity = 0.9\n\n    out_wall_west = OuterWall(parent=tz)\n    out_wall_west.name = \"OuterWallWest\"\n    out_wall_west.area = 6 * 2.7 - 3.0 * 2.0  # minus one window\n    out_wall_west.orientation = 270.0\n    out_wall_west.tilt = 90.0\n    out_wall_west.inner_convection = 3.16\n    out_wall_west.outer_convection = 24.67\n    out_wall_west.inner_radiation = 5.13\n    out_wall_west.outer_radiation = 4.63\n\n    layer_oww1 = Layer(parent=out_wall_west, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_620:[188:212]\n==teaser.examples.verification.verification_ASHRAE_140_920:[187:211]\n    material_owe2.thermal_conduc = 0.04\n\n    layer_owe3 = Layer(parent=out_wall_east, id=2)\n    layer_owe3.thickness = 0.009\n\n    material_owe3 = Material(layer_owe3)\n    material_owe3.name = \"WoodSiding\"\n    material_owe3.density = 530\n    material_owe3.heat_capac = 900 / 1000\n    material_owe3.thermal_conduc = 0.14\n    material_owe3.solar_absorp = 0.6\n    material_owe3.ir_emissivity = 0.9\n\n    out_wall_south = OuterWall(parent=tz)\n    out_wall_south.name = \"OuterWallSouth\"\n    out_wall_south.area = 8.0 * 2.7\n    out_wall_south.orientation = 180.0\n    out_wall_south.tilt = 90.0\n    out_wall_south.inner_convection = 3.16\n    out_wall_south.outer_convection = 24.67\n    out_wall_south.inner_radiation = 5.13\n    out_wall_south.outer_radiation = 4.63\n\n    layer_ows1 = Layer(parent=out_wall_south, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_620:[148:172]\n==teaser.examples.verification.verification_ASHRAE_140_920:[147:171]\n    material_own2.thermal_conduc = 0.04\n\n    layer_own3 = Layer(parent=out_wall_north, id=2)\n    layer_own3.thickness = 0.009\n\n    material_own3 = Material(layer_own3)\n    material_own3.name = \"WoodSiding\"\n    material_own3.density = 530\n    material_own3.heat_capac = 900 / 1000\n    material_own3.thermal_conduc = 0.14\n    material_own3.solar_absorp = 0.6\n    material_own3.ir_emissivity = 0.9\n\n    out_wall_east = OuterWall(parent=tz)\n    out_wall_east.name = \"OuterWallEast\"\n    out_wall_east.area = 6.0 * 2.7 - 3.0 * 2.0  # minus one window\n    out_wall_east.orientation = 90.0\n    out_wall_east.tilt = 90.0\n    out_wall_east.inner_convection = 3.16\n    out_wall_east.outer_convection = 24.67\n    out_wall_east.inner_radiation = 5.13\n    out_wall_east.outer_radiation = 4.63\n\n    layer_owe1 = Layer(parent=out_wall_east, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[268:293]\n==teaser.examples.verification.verification_ASHRAE_140_900:[267:292]\n    material_oww2.thermal_conduc = 0.04\n\n    layer_oww3 = Layer(parent=out_wall_west, id=2)\n    layer_oww3.thickness = 0.009\n\n    material_oww3 = Material(layer_oww3)\n    material_oww3.name = \"WoodSiding\"\n    material_oww3.density = 530\n    material_oww3.heat_capac = 900 / 1000\n    material_oww3.thermal_conduc = 0.14\n    material_oww3.solar_absorp = 0.6\n    material_oww3.ir_emissivity = 0.9\n\n    in_wall_floor = Floor(parent=tz)\n    in_wall_floor.name = \"InnerWallFloor\"\n    in_wall_floor.area = 6 * 8\n    in_wall_floor.orientation = -2.0\n    in_wall_floor.tilt = 0.0\n    in_wall_floor.inner_convection = 4.13\n    in_wall_floor.inner_radiation = 5.13\n\n    layer_iwf1 = Layer(parent=in_wall_floor, id=0)\n    layer_iwf1.thickness = 0.025\n\n    material_iwf1 = Material(layer_iwf1)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[228:252]\n==teaser.examples.verification.verification_ASHRAE_140_900:[227:251]\n    material_ows2.thermal_conduc = 0.04\n\n    layer_ows3 = Layer(parent=out_wall_south, id=2)\n    layer_ows3.thickness = 0.009\n\n    material_ows3 = Material(layer_ows3)\n    material_ows3.name = \"WoodSiding\"\n    material_ows3.density = 530\n    material_ows3.heat_capac = 900 / 1000\n    material_ows3.thermal_conduc = 0.14\n    material_ows3.solar_absorp = 0.6\n    material_ows3.ir_emissivity = 0.9\n\n    out_wall_west = OuterWall(parent=tz)\n    out_wall_west.name = \"OuterWallWest\"\n    out_wall_west.area = 6 * 2.7\n    out_wall_west.orientation = 270.0\n    out_wall_west.tilt = 90.0\n    out_wall_west.inner_convection = 3.16\n    out_wall_west.outer_convection = 24.67\n    out_wall_west.inner_radiation = 5.13\n    out_wall_west.outer_radiation = 4.63\n\n    layer_oww1 = Layer(parent=out_wall_west, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[188:212]\n==teaser.examples.verification.verification_ASHRAE_140_900:[187:211]\n    material_owe2.thermal_conduc = 0.04\n\n    layer_owe3 = Layer(parent=out_wall_east, id=2)\n    layer_owe3.thickness = 0.009\n\n    material_owe3 = Material(layer_owe3)\n    material_owe3.name = \"WoodSiding\"\n    material_owe3.density = 530\n    material_owe3.heat_capac = 900 / 1000\n    material_owe3.thermal_conduc = 0.14\n    material_owe3.solar_absorp = 0.6\n    material_owe3.ir_emissivity = 0.9\n\n    out_wall_south = OuterWall(parent=tz)\n    out_wall_south.name = \"OuterWallSouth\"\n    out_wall_south.area = (8.0 * 2.7) - 2 * (3 * 2)  # minus two windows\n    out_wall_south.orientation = 180.0\n    out_wall_south.tilt = 90.0\n    out_wall_south.inner_convection = 3.16\n    out_wall_south.outer_convection = 24.67\n    out_wall_south.inner_radiation = 5.13\n    out_wall_south.outer_radiation = 4.63\n\n    layer_ows1 = Layer(parent=out_wall_south, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[148:172]\n==teaser.examples.verification.verification_ASHRAE_140_900:[147:171]\n    material_own2.thermal_conduc = 0.04\n\n    layer_own3 = Layer(parent=out_wall_north, id=2)\n    layer_own3.thickness = 0.009\n\n    material_own3 = Material(layer_own3)\n    material_own3.name = \"WoodSiding\"\n    material_own3.density = 530\n    material_own3.heat_capac = 900 / 1000\n    material_own3.thermal_conduc = 0.14\n    material_own3.solar_absorp = 0.6\n    material_own3.ir_emissivity = 0.9\n\n    out_wall_east = OuterWall(parent=tz)\n    out_wall_east.name = \"OuterWallEast\"\n    out_wall_east.area = 6.0 * 2.7\n    out_wall_east.orientation = 90.0\n    out_wall_east.tilt = 90.0\n    out_wall_east.inner_convection = 3.16\n    out_wall_east.outer_convection = 24.67\n    out_wall_east.inner_radiation = 5.13\n    out_wall_east.outer_radiation = 4.63\n\n    layer_owe1 = Layer(parent=out_wall_east, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[495:525]\n==teaser.logic.buildingobjects.calculation.three_element:[663:693]\n        self.r_total_ow = 1 / self.ua_value_ow\n\n        # values facing the inside of the thermal zone\n\n        self.r_conv_inner_ow = 1 / (\n            sum(1 / out_wall.r_inner_conv for out_wall in outer_walls)\n        )\n\n        self.r_rad_inner_ow = 1 / (\n            sum(1 / out_wall.r_inner_rad for out_wall in outer_walls)\n        )\n\n        self.r_comb_inner_ow = 1 / (\n            sum(1 / out_wall.r_inner_comb for out_wall in outer_walls)\n        )\n\n        self.ir_emissivity_inner_ow = (\n            sum(\n                out_wall.layer[0].material.ir_emissivity * out_wall.area\n                for out_wall in outer_walls\n            )\n        ) / self.area_ow\n\n        self.alpha_conv_inner_ow = 1 / (self.r_conv_inner_ow * self.area_ow)\n        self.alpha_rad_inner_ow = 1 / (self.r_rad_inner_ow * self.area_ow)\n        self.alpha_comb_inner_ow = 1 / (self.r_comb_inner_ow * self.area_ow)\n\n        # values facing the ambient\n        # ground floor does not have any coefficients on ambient side\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1286:1309]\n==teaser.logic.buildingobjects.calculation.four_element:[1158:1181]\n        if 0 < len(outer_walls) <= 1:\n            # only one outer wall, no need to calculate chain matrix\n            self.r1_ow = outer_walls[0].r1\n            self.c1_ow = outer_walls[0].c1_korr\n        elif len(outer_walls) > 1:\n            # more than one outer wall, calculate chain matrix\n            self.r1_ow, self.c1_ow = self._calc_parallel_connection(\n                outer_walls, omega, mode='ow'\n            )\n        else:\n            warnings.warn(\n                \"No walls are defined as outer walls, please be \"\n                \"careful with results. In addition this might lead \"\n                \"to RunTimeErrors\"\n            )\n\n        if self.merge_windows is False:\n            try:\n\n                if len(self.thermal_zone.windows) > 0:\n                    self.r1_win = 1 / sum(\n                        (1 / win.r1) for win in self.thermal_zone.windows\n                    )",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1575:1694]\n==teaser.logic.buildingobjects.calculation.three_element:[1293:1412]\n        self.heat_load_outside_factor = (\n            (ua_value_ow_temp + self.ua_value_win)\n            + self.thermal_zone.volume\n            * self.thermal_zone.use_conditions.normative_infiltration\n            * 1\n            / 3600\n            * self.thermal_zone.heat_capac_air\n            * self.thermal_zone.density_air\n        )\n        self.heat_load_ground_factor = self.ua_value_gf\n        self.heat_load = \\\n            self.heat_load_outside_factor \\\n            * (self.thermal_zone.t_inside - self.thermal_zone.t_outside) \\\n            + self.heat_load_ground_factor \\\n            * (self.thermal_zone.t_inside - t_ground)\n\n    def set_calc_default(self):\n        \"\"\"sets default calculation parameters\n        \"\"\"\n\n        # Attributes of inner walls\n        self.area_iw = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_iw = 0.0\n        self.alpha_rad_inner_iw = 0.0\n        self.alpha_comb_inner_iw = 0.0\n        # coefficient of heat transfer facing the adjacent thermal zone\n        self.alpha_conv_outer_iw = 0.0\n        self.alpha_rad_outer_iw = 0.0\n        self.alpha_comb_outer_iw = 0.0\n\n        # UA-Value\n        self.ua_value_iw = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_iw = 0.0\n        self.r_rad_inner_iw = 0.0\n        self.r_comb_inner_iw = 0.0\n        self.r_conv_outer_iw = 0.0\n        self.r_rad_outer_iw = 0.0\n        self.r_comb_outer_iw = 0.0\n\n        # lumped resistance/capacity\n        self.r1_iw = 0.0\n        self.c1_iw = 0.0\n\n        # Attributes for outer walls\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for GroundFloor\n        self.area_gf = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_gf = 0.0\n        self.alpha_rad_inner_gf = 0.0\n        self.alpha_comb_inner_gf = 0.0\n\n        # UA-Value\n        self.ua_value_gf = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_gf = 0.0\n        self.r_rad_inner_gf = 0.0\n        self.r_comb_inner_gf = 0.0\n\n        # lumped resistances/capacity\n        self.r1_gf = 0.0\n        self.r_rest_gf = 0.0\n        self.c1_gf = 0.0\n        self.r_total_gf = 0.0\n\n        # Optical properties\n        self.ir_emissivity_inner_gf = 0.0\n\n        # Additional attributes\n\n        self.weightfactor_ground = 0.0\n\n        # Attributes for rooftops",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.interzonalceiling:[192:213]\n==teaser.logic.buildingobjects.buildingphysics.rooftop:[183:204]\n        material, year_of_retrofit, ins_layer = self.initialize_retrofit(\n            material, year_of_retrofit, add_at_position\n        )\n\n        calc_u = None\n\n        if 1977 <= year_of_retrofit <= 1981:\n            calc_u = 0.45\n        elif 1982 <= year_of_retrofit <= 1994:\n            calc_u = 0.45\n        elif 1995 <= year_of_retrofit <= 2001:\n            calc_u = 0.3\n        elif 2002 <= year_of_retrofit <= 2008:\n            calc_u = 0.3\n        elif 2009 <= year_of_retrofit <= 2013:\n            calc_u = 0.2\n        elif year_of_retrofit >= 2014:\n            calc_u = 0.2\n\n        self.set_insulation(material, calc_u, year_of_retrofit,\n                            ins_layer_index=ins_layer)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.interzonalwall:[283:308]\n==teaser.logic.buildingobjects.buildingphysics.outerwall:[214:235]\n        material, year_of_retrofit, ins_layer = self.initialize_retrofit(\n            material, year_of_retrofit, add_at_position\n        )\n\n        calc_u = None\n\n        if 1977 <= year_of_retrofit <= 1981:\n            calc_u = 1.06\n        elif 1982 <= year_of_retrofit <= 1994:\n            calc_u = 0.6\n        elif 1995 <= year_of_retrofit <= 2001:\n            calc_u = 0.5\n        elif 2002 <= year_of_retrofit <= 2008:\n            calc_u = 0.45\n        elif 2009 <= year_of_retrofit <= 2013:\n            calc_u = 0.24\n        elif year_of_retrofit >= 2014:\n            calc_u = 0.24\n\n        self.set_insulation(material, calc_u, year_of_retrofit,\n                            ins_layer_index=ins_layer)\n\n\n    @property\n    def parent(self):",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.groundfloor:[183:204]\n==teaser.logic.buildingobjects.buildingphysics.interzonalfloor:[191:212]\n        material, year_of_retrofit, ins_layer = self.initialize_retrofit(\n            material, year_of_retrofit, add_at_position\n        )\n\n        calc_u = None\n\n        if 1977 <= year_of_retrofit <= 1981:\n            calc_u = 0.8\n        elif 1982 <= year_of_retrofit <= 1994:\n            calc_u = 0.7\n        elif 1995 <= year_of_retrofit <= 2001:\n            calc_u = 0.5\n        elif 2002 <= year_of_retrofit <= 2008:\n            calc_u = 0.4\n        elif 2009 <= year_of_retrofit <= 2013:\n            calc_u = 0.3\n        elif year_of_retrofit >= 2014:\n            calc_u = 0.3\n\n        self.set_insulation(material, calc_u, year_of_retrofit,\n                            ins_layer_index=ins_layer)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[521:553]\n==teaser.logic.buildingobjects.calculation.three_element:[1412:1444]\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1903:1935]\n==teaser.logic.buildingobjects.calculation.three_element:[419:451]\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1740:1772]\n==teaser.logic.buildingobjects.calculation.one_element:[288:320]\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[540:572]\n==teaser.logic.buildingobjects.calculation.one_element:[1040:1072]\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[467:571]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[421:525]\n                        data_class=self.parent.data,\n                    )\n                    window.name = key\n                    window.tilt = value[0]\n                    window.orientation = value[1]\n                    window.area = (\n                        self.facade_estimation_factors[self.building_age_group][\"win2\"]\n                        * zone.area\n                    ) / len(self.window_names_2)\n\n        if self.facade_estimation_factors[self.building_age_group][\"gf1\"] != 0:\n            for key, value in self.ground_floor_names_1.items():\n\n                for zone in self.thermal_zones:\n                    gf = GroundFloor(zone)\n                    gf.load_type_element(\n                        year=self.year_of_construction,\n                        construction=self._construction_data_1,\n                        data_class=self.parent.data,\n                    )\n                    gf.name = key\n                    gf.tilt = value[0]\n                    gf.orientation = value[1]\n                    gf.area = (\n                        self.facade_estimation_factors[self.building_age_group][\"gf1\"]\n                        * zone.area\n                    ) / len(self.ground_floor_names_1)\n\n        if self.facade_estimation_factors[self.building_age_group][\"gf2\"] != 0:\n            for key, value in self.ground_floor_names_2.items():\n\n                for zone in self.thermal_zones:\n                    gf = GroundFloor(zone)\n                    gf.load_type_element(\n                        year=self.year_of_construction,\n                        construction=self._construction_data_2,\n                        data_class=self.parent.data,\n                    )\n                    gf.name = key\n                    gf.tilt = value[0]\n                    gf.orientation = value[1]\n                    gf.area = (\n                        self.facade_estimation_factors[self.building_age_group][\"gf2\"]\n                        * zone.area\n                    ) / len(self.ground_floor_names_2)\n\n        if self.facade_estimation_factors[self.building_age_group][\"rt1\"] != 0:\n            for key, value in self.roof_names_1.items():\n\n                for zone in self.thermal_zones:\n                    rt = Rooftop(zone)\n                    rt.load_type_element(\n                        year=self.year_of_construction,\n                        construction=self._construction_data_1,\n                        data_class=self.parent.data,\n                    )\n                    rt.name = key\n                    rt.tilt = value[0]\n                    rt.orientation = value[1]\n                    rt.area = (\n                        self.facade_estimation_factors[self.building_age_group][\"rt1\"]\n                        * zone.area\n                    ) / len(self.roof_names_1)\n\n        if self.facade_estimation_factors[self.building_age_group][\"rt2\"] != 0:\n            for key, value in self.roof_names_2.items():\n\n                for zone in self.thermal_zones:\n                    rt = Rooftop(zone)\n                    rt.load_type_element(\n                        year=self.year_of_construction,\n                        construction=self._construction_data_2,\n                        data_class=self.parent.data,\n                    )\n                    rt.name = key\n                    rt.tilt = value[0]\n                    rt.orientation = value[1]\n                    rt.area = (\n                        self.facade_estimation_factors[self.building_age_group][\"rt2\"]\n                        * zone.area\n                    ) / len(self.roof_names_2)\n\n        if self.facade_estimation_factors[self.building_age_group][\"door\"] != 0:\n            for key, value in self.door_names.items():\n\n                for zone in self.thermal_zones:\n                    door = Door(zone)\n                    door.load_type_element(\n                        year=self.year_of_construction,\n                        construction=self._construction_data_1,\n                        data_class=self.parent.data,\n                    )\n                    door.name = key\n                    door.tilt = value[0]\n                    door.orientation = value[1]\n                    door.area = (\n                        self.facade_estimation_factors[self.building_age_group][\"door\"]\n                        * zone.area\n                    ) / len(self.door_names)\n\n        for key, value in self.inner_wall_names.items():\n\n            for zone in self.thermal_zones:\n                inner_wall = InnerWall(zone)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[268:290]\n==teaser.examples.verification.verification_ASHRAE_140_920:[267:289]\n    material_oww2.thermal_conduc = 0.04\n\n    layer_oww3 = Layer(parent=out_wall_west, id=2)\n    layer_oww3.thickness = 0.009\n\n    material_oww3 = Material(layer_oww3)\n    material_oww3.name = \"WoodSiding\"\n    material_oww3.density = 530\n    material_oww3.heat_capac = 900 / 1000\n    material_oww3.thermal_conduc = 0.14\n    material_oww3.solar_absorp = 0.6\n    material_oww3.ir_emissivity = 0.9\n\n    in_wall_floor = Floor(parent=tz)\n    in_wall_floor.name = \"InnerWallFloor\"\n    in_wall_floor.area = 6 * 8\n    in_wall_floor.orientation = -2.0\n    in_wall_floor.tilt = 0.0\n    in_wall_floor.inner_convection = 4.13\n    in_wall_floor.inner_radiation = 5.13\n\n    layer_iwf1 = Layer(parent=in_wall_floor, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.door:[150:178]\n==teaser.logic.buildingobjects.buildingphysics.outerwall:[147:175]\n        super(OuterWall, self).__init__(parent)\n\n        self._tilt = 90.0\n        self._inner_convection = 2.7\n        self._inner_radiation = 5.0\n        self._outer_convection = 20.0\n        self._outer_radiation = 5.0\n\n    @property\n    def parent(self):\n        return self.__parent\n\n    @parent.setter\n    def parent(self, value):\n        if value is not None:\n\n            ass_error_1 = \"Parent has to be an instance of ThermalZone()\"\n\n            assert type(value).__name__ == \"ThermalZone\", ass_error_1\n\n            self.__parent = value\n\n            if type(self).__name__ == \"OuterWall\":\n                self.__parent.outer_walls.append(self)\n            elif type(self).__name__ == \"Rooftop\":\n                self.__parent.rooftops.append(self)\n            elif type(self).__name__ == \"GroundFloor\":\n                self.__parent.ground_floors.append(self)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1472:1506]\n==teaser.logic.buildingobjects.calculation.four_element:[1346:1376]\n        )\n\n        for in_wall in inner_walls:\n            in_wall.calc_equivalent_res()\n            in_wall.calc_ua_value()\n\n        if 0 < len(inner_walls) <= 1:\n            # only one inner wall, no need to calculate chain matrix\n            self.r1_iw = inner_walls[0].r1\n            self.c1_iw = inner_walls[0].c1_korr\n        elif len(inner_walls) > 1:\n            # more than one inner wall, calculate chain matrix\n            self.r1_iw, self.c1_iw = self._calc_parallel_connection(\n                inner_walls, omega, mode='iw'\n            )\n        else:\n            warnings.warn(\n                \"No walls are defined as inner walls, please be \"\n                \"careful with results. In addition this might lead \"\n                \"to RunTimeErrors\"\n            )\n\n    def _calc_interzonal_elements(self):\n        \"\"\"Lumped parameter for neighboured zone border elements\n\n        Calculates lumped parameters for borders to\n        neighboured zones. No windows allowed.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        \"\"\"\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[655:685]\n==teaser.logic.buildingobjects.calculation.four_element:[622:652]\n            warnings.warn(\n                \"No walls are defined as outer walls for thermal \"\n                + \"zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", please be careful with results. In addition \"\n                + \"this might lead to RunTimeErrors\"\n            )\n        else:\n            self._sum_outer_wall_elements()\n        if (\n            len(\n                self.thermal_zone.inner_walls\n                + self.thermal_zone.floors\n                + self.thermal_zone.ceilings\n                + self.nzbs_for_iw\n            )\n            < 1\n        ):\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no inner walls have been defined.\"\n            )\n        else:\n            self._sum_inner_wall_elements()\n            self._calc_inner_elements()",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[622:673]\n==teaser.logic.buildingobjects.calculation.three_element:[503:554]\n            warnings.warn(\n                \"No walls are defined as outer walls for thermal \"\n                + \"zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", please be careful with results. In addition \"\n                + \"this might lead to RunTimeErrors\"\n            )\n        else:\n            self._sum_outer_wall_elements()\n        if (\n                len(\n                    self.thermal_zone.inner_walls\n                    + self.thermal_zone.floors\n                    + self.thermal_zone.ceilings\n                    + self.nzbs_for_iw\n                )\n                < 1\n        ):\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no inner walls have been defined.\"\n            )\n        else:\n            self._sum_inner_wall_elements()\n            self._calc_inner_elements()\n        if len(self.thermal_zone.windows) < 1:\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no windows have been defined.\"\n            )\n        else:\n            self._sum_window_elements()\n        if len(self.thermal_zone.ground_floors) < 1:\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no ground floors have been defined.\"\n            )\n        else:\n            self._sum_ground_floor_elements()\n            self._calc_ground_floor_elements()",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[863:881]\n==teaser.logic.buildingobjects.calculation.three_element:[1191:1210]\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.windows\n        )\n\n        tilt_orient = []\n        for element in outer_elements:\n            tilt_orient.append((element.orientation, element.tilt))\n        tilt_orient = list(set(tilt_orient))\n\n        for i in tilt_orient:\n            wall_rt_nzb = self.thermal_zone.find_walls(\n                i[0], i[1]\n            ) + self.thermal_zone.find_rts(\n                i[0], i[1]\n            ) + self.thermal_zone.find_izes_outer(\n                i[0], i[1]\n            )\n            wins = self.thermal_zone.find_wins(i[0], i[1])",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[364:381]\n==teaser.logic.buildingobjects.calculation.three_element:[497:514]\n        ):\n            inner_wall.calc_equivalent_res(t_bt=self.t_bt_layer)\n            inner_wall.calc_ua_value()\n\n        self.set_calc_default()\n        if len(outer_walls) < 1:\n            warnings.warn(\n                \"No walls are defined as outer walls for thermal \"\n                + \"zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", please be careful with results. In addition \"\n                + \"this might lead to RunTimeErrors\"\n            )\n        else:\n            self._sum_outer_wall_elements()",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.three_element:[489:505]\n==teaser.logic.buildingobjects.calculation.two_element:[419:435]\n        for win in self.thermal_zone.windows:\n            win.calc_equivalent_res()\n            win.calc_ua_value()\n        for inner_wall in (\n            self.thermal_zone.inner_walls\n            + self.thermal_zone.floors\n            + self.thermal_zone.ceilings\n            + self.nzbs_for_iw\n        ):\n            inner_wall.calc_equivalent_res(t_bt=self.t_bt_layer)\n            inner_wall.calc_ua_value()\n\n        self.set_calc_default()\n        if len(outer_walls) < 1:\n            warnings.warn(\n                \"No walls are defined as outer walls for thermal \"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1742:1857]\n==teaser.logic.buildingobjects.calculation.three_element:[1297:1412]\n            * 1\n            / 3600\n            * self.thermal_zone.heat_capac_air\n            * self.thermal_zone.density_air\n        )\n        self.heat_load_ground_factor = self.ua_value_gf\n        self.heat_load = \\\n            self.heat_load_outside_factor \\\n            * (self.thermal_zone.t_inside - self.thermal_zone.t_outside) \\\n            + self.heat_load_ground_factor \\\n            * (self.thermal_zone.t_inside - t_ground)\n\n    def set_calc_default(self):\n        \"\"\"sets default calculation parameters\n        \"\"\"\n\n        # Attributes of inner walls\n        self.area_iw = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_iw = 0.0\n        self.alpha_rad_inner_iw = 0.0\n        self.alpha_comb_inner_iw = 0.0\n        # coefficient of heat transfer facing the adjacent thermal zone\n        self.alpha_conv_outer_iw = 0.0\n        self.alpha_rad_outer_iw = 0.0\n        self.alpha_comb_outer_iw = 0.0\n\n        # UA-Value\n        self.ua_value_iw = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_iw = 0.0\n        self.r_rad_inner_iw = 0.0\n        self.r_comb_inner_iw = 0.0\n        self.r_conv_outer_iw = 0.0\n        self.r_rad_outer_iw = 0.0\n        self.r_comb_outer_iw = 0.0\n\n        # lumped resistance/capacity\n        self.r1_iw = 0.0\n        self.c1_iw = 0.0\n\n        # Attributes for outer walls\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for GroundFloor\n        self.area_gf = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_gf = 0.0\n        self.alpha_rad_inner_gf = 0.0\n        self.alpha_comb_inner_gf = 0.0\n\n        # UA-Value\n        self.ua_value_gf = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_gf = 0.0\n        self.r_rad_inner_gf = 0.0\n        self.r_comb_inner_gf = 0.0\n\n        # lumped resistances/capacity\n        self.r1_gf = 0.0\n        self.r_rest_gf = 0.0\n        self.c1_gf = 0.0\n        self.r_total_gf = 0.0\n\n        # Optical properties\n        self.ir_emissivity_inner_gf = 0.0\n\n        # Additional attributes\n\n        self.weightfactor_ground = 0.0\n\n        # Attributes for rooftops",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1742:1947]\n==teaser.logic.buildingobjects.calculation.four_element:[1579:1784]\n            * 1\n            / 3600\n            * self.thermal_zone.heat_capac_air\n            * self.thermal_zone.density_air\n        )\n        self.heat_load_ground_factor = self.ua_value_gf\n        self.heat_load = \\\n            self.heat_load_outside_factor \\\n            * (self.thermal_zone.t_inside - self.thermal_zone.t_outside) \\\n            + self.heat_load_ground_factor \\\n            * (self.thermal_zone.t_inside - t_ground)\n\n    def set_calc_default(self):\n        \"\"\"sets default calculation parameters\n        \"\"\"\n\n        # Attributes of inner walls\n        self.area_iw = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_iw = 0.0\n        self.alpha_rad_inner_iw = 0.0\n        self.alpha_comb_inner_iw = 0.0\n        # coefficient of heat transfer facing the adjacent thermal zone\n        self.alpha_conv_outer_iw = 0.0\n        self.alpha_rad_outer_iw = 0.0\n        self.alpha_comb_outer_iw = 0.0\n\n        # UA-Value\n        self.ua_value_iw = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_iw = 0.0\n        self.r_rad_inner_iw = 0.0\n        self.r_comb_inner_iw = 0.0\n        self.r_conv_outer_iw = 0.0\n        self.r_rad_outer_iw = 0.0\n        self.r_comb_outer_iw = 0.0\n\n        # lumped resistance/capacity\n        self.r1_iw = 0.0\n        self.c1_iw = 0.0\n\n        # Attributes for outer walls\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for GroundFloor\n        self.area_gf = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_gf = 0.0\n        self.alpha_rad_inner_gf = 0.0\n        self.alpha_comb_inner_gf = 0.0\n\n        # UA-Value\n        self.ua_value_gf = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_gf = 0.0\n        self.r_rad_inner_gf = 0.0\n        self.r_comb_inner_gf = 0.0\n\n        # lumped resistances/capacity\n        self.r1_gf = 0.0\n        self.r_rest_gf = 0.0\n        self.c1_gf = 0.0\n        self.r_total_gf = 0.0\n\n        # Optical properties\n        self.ir_emissivity_inner_gf = 0.0\n\n        # Additional attributes\n\n        self.weightfactor_ground = 0.0\n\n        # Attributes for rooftops\n        self.area_rt = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_rt = 0.0\n        self.alpha_rad_inner_rt = 0.0\n        self.alpha_comb_inner_rt = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_rt = 0.0\n        self.alpha_rad_outer_rt = 0.0\n        self.alpha_comb_outer_rt = 0.0\n\n        # UA-Value\n        self.ua_value_rt = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_rt = 0.0\n        self.r_rad_inner_rt = 0.0\n        self.r_comb_inner_rt = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_rt = 0.0\n        self.r_rad_outer_rt = 0.0\n        self.r_comb_outer_rt = 0.0\n\n        # lumped resistances/capacity\n        self.r1_rt = 0.0\n        self.r_rest_rt = 0.0\n        self.c1_rt = 0.0\n        self.r_total_rt = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_rt = 0.0\n        self.ir_emissivity_inner_rt = 0.0\n        self.solar_absorp_rt = 0.0\n\n        # Additional attributes\n        self.weightfactor_rt = []\n        self.rooftop_areas = []\n        self.tilt_rt = []\n        self.orientation_rt = []\n\n        # TODO: check this value\n        self.r_rad_rt_iw = 0.0\n\n        # Attributes for windows\n        self.area_win = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_win = 0.0\n        self.alpha_rad_inner_win = 0.0\n        self.alpha_comb_inner_win = 0.0\n        self.ratio_conv_rad_inner_win = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_win = 0.0\n        self.alpha_rad_outer_win = 0.0\n        self.alpha_comb_outer_win = 0.0\n\n        # UA-Value\n        self.ua_value_win = 0.0\n        self.u_value_win = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_win = 0.0\n        self.r_rad_inner_win = 0.0\n        self.r_comb_inner_win = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_win = 0.0\n        self.r_rad_outer_win = 0.0\n        self.r_comb_outer_win = 0.0\n\n        # lumped resistances/capacity\n        self.r1_win = 0.0\n\n        # Optical properties\n        self.ir_emissivity_win = 0.0\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Attributes for neighboured zones (vectorized - one element per other\n        # zone)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_900:[312:330]\n==teaser.examples.verification.verification_ASHRAE_140_920:[312:330]\n    win_1.inner_convection = 3.16\n    win_1.inner_radiation = 5.13\n    win_1.outer_convection = 16.37\n    win_1.outer_radiation = 4.63\n    win_1.g_value = 0.789\n    win_1.a_conv = 0.03  # for the given U-value extracted from VDI 6007-2/-3\n\n    win_1_layer = Layer(parent=win_1)\n    win_1_layer.id = 1\n    win_1_layer.thickness = 0.024\n\n    win_1_material = Material(win_1_layer)\n    win_1_material.name = \"GlasWindow\"\n    win_1_material.thermal_conduc = 0.15\n    win_1_material.transmittance = 0.907\n    win_1_material.ir_emissivity = 0.9\n\n    win_2 = Window(parent=tz)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[313:331]\n==teaser.examples.verification.verification_ASHRAE_140_620:[313:331]\n    win_1.inner_convection = 3.16\n    win_1.inner_radiation = 5.13\n    win_1.outer_convection = 16.37\n    win_1.outer_radiation = 4.63\n    win_1.g_value = 0.789\n    win_1.a_conv = 0.03  # for the given U-value extracted from VDI 6007-2/-3\n\n    win_1_layer = Layer(parent=win_1)\n    win_1_layer.id = 1\n    win_1_layer.thickness = 0.024\n\n    win_1_material = Material(win_1_layer)\n    win_1_material.name = \"GlasWindow\"\n    win_1_material.thermal_conduc = 0.15\n    win_1_material.transmittance = 0.907\n    win_1_material.ir_emissivity = 0.9\n\n    win_2 = Window(parent=tz)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.office:[419:442]\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[471:494]\n                    data_class=self.parent.data,\n                )\n                window.name = key\n                window.tilt = value[0]\n                window.orientation = value[1]\n\n        for key, value in self.roof_names.items():\n\n            self.outer_area[value[1]] = self._est_roof_area\n\n            for zone in self.thermal_zones:\n                roof = Rooftop(zone)\n                roof.load_type_element(\n                    year=self.year_of_construction,\n                    construction=self.construction_data.value,\n                    data_class=self.parent.data,\n                )\n                roof.name = key\n                roof.tilt = value[0]\n                roof.orientation = value[1]\n\n        for key, value in self.ground_floor_names.items():\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_900:[291:308]\n==teaser.examples.verification.verification_ASHRAE_140_920:[291:308]\n    material_iwf1 = Material(layer_iwf1)\n    material_iwf1.name = \"Concrete\"\n    material_iwf1.density = 1400\n    material_iwf1.heat_capac = 1000 / 1000\n    material_iwf1.thermal_conduc = 1.13\n    material_iwf1.ir_emissivity = 0.9\n\n    layer_iwf2 = Layer(parent=in_wall_floor, id=1)\n    layer_iwf2.thickness = 1.007\n\n    material_iwf2 = Material(layer_iwf2)\n    material_iwf2.name = \"Insulation\"\n    material_iwf2.density = 0.000000000001  # 0.0001, as small as possible\n    material_iwf2.heat_capac = 0.000000000001  # 0.0001, as small as possible\n    material_iwf2.thermal_conduc = 0.04\n\n    win_1 = Window(parent=tz)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1310:1327]\n==teaser.logic.buildingobjects.calculation.four_element:[1182:1199]\n                    conduction = 1 / sum(\n                        (1 / element.r_conduc) for element in outer_walls\n                    )\n\n                    self.r_rest_ow = conduction - self.r1_ow\n\n            except RuntimeError:\n                print(\n                    \"As no outer walls or no windows are defined lumped \"\n                    \"parameter cannot be calculated\"\n                )\n\n        if self.merge_windows is True:\n\n            try:\n                if (\n                    len(self.thermal_zone.windows) > 0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.apartmentblock:[102:117]\n==teaser.logic.archetypebuildings.tabula.dk.terracedhouse:[101:116]\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,\n            inner_wall_approximation_approach,\n            construction_data)\n\n        self.construction_data = construction_data\n        self.number_of_floors = number_of_floors\n        self.height_of_floors = height_of_floors\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[445:459]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[404:418]\n                        data_class=self.parent.data,\n                    )\n                    window.name = key\n                    window.tilt = value[0]\n                    window.orientation = value[1]\n                    window.area = (\n                        self.facade_estimation_factors[self.building_age_group][\"win1\"]\n                        * zone.area\n                    ) / len(self.window_names_1)\n\n        if self.facade_estimation_factors[self.building_age_group][\"win2\"] != 0:\n            for key, value in self.window_names_2.items():\n                for zone in self.thermal_zones:\n                    window = Window(zone)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[16:144]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[17:145]\nclass SingleFamilyHouse(Residential):\n    \"\"\"Archetype for German TABULA Single Family House.\n\n    This is an archetype building for german single family house according to\n    TABULA building typology (http://webtool.building-typology.eu/#bm). As\n    TABULA defines one reference building, whereas TEASER wants to provide a\n    methodology to generate individual building information, this archetype\n    underlies some assumptions. The made assumptions are explained in the\n    following:\n\n    Each building has four orientations for outer walls and windows (north,\n    east, south and west), two orientations for rooftops (south and north), with\n    tilt of 35 degree and one orientation for ground floors and one door (\n    default\n    orientation is west). The area of each surface is calculated using the\n    product of the given net_leased_area and specific estimation factors. These\n    estimation factors where build by dividing the given 'surface area' by the\n    'reference floor area' in TABULA. The estimation factors are calculated for\n    each building period ('construction year class'). Please note that the\n    number and height of the floors given in TEASER does not have any effect on\n    the surface area for heat transmission, but is only used to calculate the\n    interior wall area, which is not specified in TABULA at all. Further, TABULA\n    does not specify any specific user profile, by default the SingleFamilyHouse\n    class has exactly one usage zone, which is 'Living'. TABULA also does not\n    always specify the exact construction of building elements, but always\n    provides a prescribed U-Value. We used the U-Value and the given material\n    information to determine thickness of each layer and implemented it into\n    elements json ('teaser.data.input.inputdata.TypeElements_TABULA_DE.json'). The\n    material properties have been taken from MASEA Material data base\n    (http://www.masea-ensan.de/). As there might be some differences in the\n    assumptions for material properties from TABULA and MASEA the U-Value might\n    not always be exactly the same as in TABULA but is always in an acceptable\n    range. The U-Value has been calculated using combined constant values for\n    interior and exterior heat transmission, we used a resistance of 0.17\n    (m2*K)/W for outer walls, windows, flat roofs and doors; 0.34 (m2*K)/W  for\n    ground floors to unheated cellars and 0.17 (m2*K)/W  to direct ground\n    coupled floors, 0.21 (m2*K)/W  was taken for pitched roofs.\n\n    Parameters\n    ----------\n\n    parent: Project()\n        The parent class of this object, the Project the Building belongs to.\n        Allows for better control of hierarchical structures. If not None it\n        adds this Building instance to Project.buildings.\n        (default: None)\n    name : str\n        Individual name\n    year_of_construction : int\n        Year of first construction\n    height_of_floors : float [m]\n        Average height of the buildings' floors\n    number_of_floors : int\n        Number of building's floors above ground\n    net_leased_area : float [m2]\n        Total net leased area of building. This is area is NOT the footprint\n        of a building\n    with_ahu : Boolean\n        If set to True, an empty instance of BuildingAHU is instantiated and\n        assigned to attribute central_ahu. This instance holds information for\n        central Air Handling units. Default is False.\n    internal_gains_mode: int [1, 2, 3]\n        mode for the internal gains calculation done in AixLib:\n\n        1. Temperature and activity degree dependent heat flux calculation for persons. The\n           calculation is based on  SIA 2024 (default)\n        2. Temperature and activity degree independent heat flux calculation for persons, the max.\n           heatflowrate is prescribed by the parameter\n           fixed_heat_flow_rate_persons.\n        3. Temperature and activity degree dependent calculation with\n           consideration of moisture and co2. The moisture calculation is\n           based on SIA 2024 (2015) and regards persons and non-persons, the co2 calculation is based on\n           Engineering ToolBox (2004) and regards only persons.\n    inner_wall_approximation_approach : str\n        'teaser_default' (default) sets length of inner walls = typical\n            length * height of floors + 2 * typical width * height of floors\n        'typical_minus_outer' sets length of inner walls = 2 * typical\n            length * height of floors + 2 * typical width * height of floors\n            - length of outer or interzonal walls\n        'typical_minus_outer_extended' like 'typical_minus_outer', but also\n            considers that\n            a) a non-complete \"average room\" reduces its circumference\n              proportional to the square root of the area\n            b) rooftops, windows and ground floors (= walls with border to\n                soil) may have a vertical share\n\n    construction_data : str\n        Construction type of used wall constructions default is \"existing\n        state\"\n\n        - existing state:\n          construction of walls according to existing state in TABULA\n        - usual refurbishment:\n          construction of walls according to usual refurbishment in TABULA\n        - advanced refurbishment:\n          construction of walls according to advanced refurbishment in\n          TABULA\n\n\"\"\"\n\n    def __init__(\n        self,\n        parent,\n        name=None,\n        year_of_construction=None,\n        number_of_floors=None,\n        height_of_floors=None,\n        net_leased_area=None,\n        with_ahu=False,\n        internal_gains_mode=1,\n        inner_wall_approximation_approach='teaser_default',\n        construction_data=None,\n    ):\n\n        super(SingleFamilyHouse, self).__init__(\n            parent,\n            name,\n            year_of_construction,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,\n            inner_wall_approximation_approach\n        )\n\n        self.construction_data = construction_data\n        self.number_of_floors = number_of_floors\n        self.height_of_floors = height_of_floors\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.multifamilyhouse:[104:119]\n==teaser.logic.archetypebuildings.tabula.de.terracedhouse:[101:116]\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,\n            inner_wall_approximation_approach,\n            construction_data)\n\n        self.construction_data = construction_data\n        self.number_of_floors = number_of_floors\n        self.height_of_floors = height_of_floors\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.office:[383:400]\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[433:451]\n                )\n\n            for zone in self.thermal_zones:\n                # create wall and set building elements\n                outer_wall = OuterWall(zone)\n                outer_wall.load_type_element(\n                    year=self.year_of_construction,\n                    construction=self.construction_data.value,\n                    data_class=self.parent.data,\n                )\n                outer_wall.name = key\n                outer_wall.tilt = value[0]\n                outer_wall.orientation = value[1]\n\n        for key, value in self.window_names.items():\n\n            if value[1] == 0 or value[1] == 180:\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[403:416]\n==teaser.logic.archetypebuildings.urbanrenet.est1a:[257:270]\n        for key, value in self.zone_area_factors.items():\n            zone = ThermalZone(self)\n            zone.name = key\n            zone.area = type_bldg_area * value[0]\n            try:\n                zone.number_of_floors = value[2]['number_of_floors']\n            except (KeyError, IndexError):\n                pass\n            try:\n                zone.height_of_floors = value[2]['height_of_floors']\n            except (KeyError, IndexError):\n                pass\n            use_cond = UseCond(zone)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.urbanrenet.est4a:[95:109]\n==teaser.logic.archetypebuildings.urbanrenet.est4b:[97:111]\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,\n            neighbour_buildings,\n            construction_data,\n            inner_wall_approximation_approach)\n\n        self.number_of_apartments = number_of_apartments\n        self.est_factor_facade_to_volume = 0.28",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.interzonalfloor:[183:198]\n==teaser.logic.buildingobjects.buildingphysics.interzonalwall:[275:290]\n        if self.interzonal_type_material == 'inner':\n            return\n        elif add_at_position is None:\n            if self.interzonal_type_material == 'outer_reversed':\n                add_at_position = 0\n            elif self.interzonal_type_material == 'outer_ordered':\n                add_at_position = -1\n\n        material, year_of_retrofit, ins_layer = self.initialize_retrofit(\n            material, year_of_retrofit, add_at_position\n        )\n\n        calc_u = None\n\n        if 1977 <= year_of_retrofit <= 1981:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1564:1588]\n==teaser.logic.buildingobjects.calculation.four_element:[1392:1416]\n                wall.wf_out = wall.ua_value / self.ua_value_ow\n\n            for win in self.thermal_zone.windows:\n                win.wf_out = win.ua_value / self.ua_value_win\n\n            for rt in self.thermal_zone.rooftops:\n                rt.wf_out = rt.ua_value / self.ua_value_rt\n\n        else:\n            raise ValueError(\"specify merge window method correctly\")\n\n    def _calc_mean_values(self):\n        \"\"\"Calculates mean values for inner and outer elements\n\n        This function calculates mean values inside the thermal zone (e.g.\n        the mean value for coefficient of radiative heat transfer between\n        inner and outer walls\n        \"\"\"\n\n        self.alpha_rad_inner_mean = (\n            self.area_ow * self.alpha_rad_inner_ow\n            + self.area_win * self.alpha_rad_inner_win\n            + self.area_gf * self.alpha_rad_inner_gf\n            + self.area_rt * self.alpha_rad_inner_rt",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1271:1299]\n==teaser.logic.buildingobjects.calculation.three_element:[1048:1079]\n            )\n        try:\n            conduction = 1 / sum(\n                (1 / element.r_conduc) for element in self.thermal_zone.ground_floors\n            )\n\n            self.r_rest_gf = conduction - self.r1_gf\n        except RuntimeError:\n            print(\n                \"As no ground floors are defined lumped \"\n                \"parameter cannot be calculated\"\n            )\n\n    def _calc_rooftop_elements(self):\n        \"\"\"Lumped parameter for ground floor elements\n\n        Calculates lumped parameters for rooftops. Windows are considered in\n        outer wall calculation. This results in an error concerning the\n        interior radiation distribution. But currently there is no other option.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        \"\"\"\n\n        omega = 2 * math.pi / 86400 / self.t_bt\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[605:617]\n==teaser.logic.buildingobjects.calculation.three_element:[486:498]\n        for gf in self.thermal_zone.ground_floors:\n            gf.calc_equivalent_res(t_bt=self.t_bt_layer)\n            gf.calc_ua_value()\n        for win in self.thermal_zone.windows:\n            win.calc_equivalent_res()\n            win.calc_ua_value()\n        for inner_wall in (\n            self.thermal_zone.inner_walls\n            + self.thermal_zone.floors\n            + self.thermal_zone.ceilings\n            + self.nzbs_for_iw\n        ):",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1787:1812]\n==teaser.logic.buildingobjects.calculation.three_element:[1458:1483]\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0\n\n    @property\n    def nzbs_for_iw(self):\n        \"\"\"returns borders to neighboured zones to be considered as inner walls\n\n        Returns\n        -------\n        value : list\n            list of those interzonal elements that are NOT to be treated as\n            'outer_ordered' depending on their 'interzonal_type_export'\n            attribute\n\n        \"\"\"\n        elements = []\n        for i in self.thermal_zone.interzonal_elements:\n            if not i.interzonal_type_export == 'outer_ordered':\n                elements.append(i)\n            else:\n                pass\n        return elements",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.custom.institute4:[177:189]\n==teaser.logic.archetypebuildings.bmvbs.custom.institute8:[177:190]\n                                         name,\n                                         year_of_construction,\n                                         number_of_floors,\n                                         height_of_floors,\n                                         net_leased_area,\n                                         with_ahu,\n                                         internal_gains_mode,\n                                         office_layout,\n                                         inner_wall_approximation_approach,\n                                         window_layout,\n                                         construction_data)\n        self.zone_area_factors[\"Office\"] = \\",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.office:[303:328]\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[334:359]\n        if self.with_ahu is True:\n            self.central_ahu.temperature_profile = (\n                7 * [293.15] + 12 * [295.15] + 5 * [293.15]\n            )\n            #  according to :cite:`DeutschesInstitutfurNormung.2016`\n            self.central_ahu.min_relative_humidity_profile = 24 * [0.45]  #\n            #  according to :cite:`DeutschesInstitutfurNormung.2016b`  and\n            # :cite:`DeutschesInstitutfurNormung.2016`\n            self.central_ahu.max_relative_humidity_profile = 24 * [0.65]\n            self.central_ahu.v_flow_profile = (\n                7 * [0.0] + 12 * [1.0] + 5 * [0.0]\n            )  # according to user\n            # profile in :cite:`DeutschesInstitutfurNormung.2016`\n\n    def generate_archetype(self):\n        \"\"\"Generates an office building.\n\n        With given values, this class generates an office archetype building\n        according to TEASER requirements.\n        \"\"\"\n        # help area for the correct building area setting while using typeBldgs\n        self.thermal_zones = None\n        type_bldg_area = self.net_leased_area\n        self.net_leased_area = 0.0\n        # create zones with their corresponding area, name and usage",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[546:564]\n==teaser.logic.archetypebuildings.urbanrenet.est1a:[375:393]\n                    floor.name = key\n                    floor.tilt = value[0]\n                    floor.orientation = value[1]\n                    # zone.inner_walls.append(floor)\n        else:\n            pass\n\n        for key, value in self.outer_area.items():\n            self.set_outer_wall_area(value, key)\n        for key, value in self.window_area.items():\n            self.set_window_area(value, key)\n\n        for zone in self.thermal_zones:\n            zone.set_inner_wall_area()\n            zone.set_volume_zone()\n\n    @property\n    def residential_layout(self):",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.urbanrenet.est2:[97:110]\n==teaser.logic.archetypebuildings.urbanrenet.est6:[97:110]\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,\n            neighbour_buildings,\n            construction_data,\n            inner_wall_approximation_approach)\n\n        self.number_of_apartments = number_of_apartments",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.urbanrenet.est3:[97:110]\n==teaser.logic.archetypebuildings.urbanrenet.est5:[97:110]\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,\n            neighbour_buildings,\n            construction_data,\n            inner_wall_approximation_approach)\n\n        self.number_of_apartments = number_of_apartments",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.urbanrenet.est4a:[95:108]\n==teaser.logic.archetypebuildings.urbanrenet.est8b:[95:108]\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,\n            neighbour_buildings,\n            construction_data,\n            inner_wall_approximation_approach)\n\n        self.number_of_apartments = number_of_apartments",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.urbanrenet.est4b:[97:110]\n==teaser.logic.archetypebuildings.urbanrenet.est7:[95:108]\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,\n            neighbour_buildings,\n            construction_data,\n            inner_wall_approximation_approach)\n\n        self.number_of_apartments = number_of_apartments",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.urbanrenet.est1b:[97:110]\n==teaser.logic.archetypebuildings.urbanrenet.est8a:[95:108]\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,\n            neighbour_buildings,\n            construction_data,\n            inner_wall_approximation_approach)\n\n        self.number_of_apartments = number_of_apartments",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_620:[228:243]\n==teaser.examples.verification.verification_ASHRAE_140_900:[227:242]\n    material_ows2.thermal_conduc = 0.04\n\n    layer_ows3 = Layer(parent=out_wall_south, id=2)\n    layer_ows3.thickness = 0.009\n\n    material_ows3 = Material(layer_ows3)\n    material_ows3.name = \"WoodSiding\"\n    material_ows3.density = 530\n    material_ows3.heat_capac = 900 / 1000\n    material_ows3.thermal_conduc = 0.14\n    material_ows3.solar_absorp = 0.6\n    material_ows3.ir_emissivity = 0.9\n\n    out_wall_west = OuterWall(parent=tz)\n    out_wall_west.name = \"OuterWallWest\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_620:[188:203]\n==teaser.examples.verification.verification_ASHRAE_140_900:[187:202]\n    material_owe2.thermal_conduc = 0.04\n\n    layer_owe3 = Layer(parent=out_wall_east, id=2)\n    layer_owe3.thickness = 0.009\n\n    material_owe3 = Material(layer_owe3)\n    material_owe3.name = \"WoodSiding\"\n    material_owe3.density = 530\n    material_owe3.heat_capac = 900 / 1000\n    material_owe3.thermal_conduc = 0.14\n    material_owe3.solar_absorp = 0.6\n    material_owe3.ir_emissivity = 0.9\n\n    out_wall_south = OuterWall(parent=tz)\n    out_wall_south.name = \"OuterWallSouth\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_620:[148:163]\n==teaser.examples.verification.verification_ASHRAE_140_900:[147:162]\n    material_own2.thermal_conduc = 0.04\n\n    layer_own3 = Layer(parent=out_wall_north, id=2)\n    layer_own3.thickness = 0.009\n\n    material_own3 = Material(layer_own3)\n    material_own3.name = \"WoodSiding\"\n    material_own3.density = 530\n    material_own3.heat_capac = 900 / 1000\n    material_own3.thermal_conduc = 0.14\n    material_own3.solar_absorp = 0.6\n    material_own3.ir_emissivity = 0.9\n\n    out_wall_east = OuterWall(parent=tz)\n    out_wall_east.name = \"OuterWallEast\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[228:243]\n==teaser.examples.verification.verification_ASHRAE_140_920:[227:242]\n    material_ows2.thermal_conduc = 0.04\n\n    layer_ows3 = Layer(parent=out_wall_south, id=2)\n    layer_ows3.thickness = 0.009\n\n    material_ows3 = Material(layer_ows3)\n    material_ows3.name = \"WoodSiding\"\n    material_ows3.density = 530\n    material_ows3.heat_capac = 900 / 1000\n    material_ows3.thermal_conduc = 0.14\n    material_ows3.solar_absorp = 0.6\n    material_ows3.ir_emissivity = 0.9\n\n    out_wall_west = OuterWall(parent=tz)\n    out_wall_west.name = \"OuterWallWest\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[188:203]\n==teaser.examples.verification.verification_ASHRAE_140_920:[187:202]\n    material_owe2.thermal_conduc = 0.04\n\n    layer_owe3 = Layer(parent=out_wall_east, id=2)\n    layer_owe3.thickness = 0.009\n\n    material_owe3 = Material(layer_owe3)\n    material_owe3.name = \"WoodSiding\"\n    material_owe3.density = 530\n    material_owe3.heat_capac = 900 / 1000\n    material_owe3.thermal_conduc = 0.14\n    material_owe3.solar_absorp = 0.6\n    material_owe3.ir_emissivity = 0.9\n\n    out_wall_south = OuterWall(parent=tz)\n    out_wall_south.name = \"OuterWallSouth\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[148:163]\n==teaser.examples.verification.verification_ASHRAE_140_920:[147:162]\n    material_own2.thermal_conduc = 0.04\n\n    layer_own3 = Layer(parent=out_wall_north, id=2)\n    layer_own3.thickness = 0.009\n\n    material_own3 = Material(layer_own3)\n    material_own3.name = \"WoodSiding\"\n    material_own3.density = 530\n    material_own3.heat_capac = 900 / 1000\n    material_own3.thermal_conduc = 0.14\n    material_own3.solar_absorp = 0.6\n    material_own3.ir_emissivity = 0.9\n\n    out_wall_east = OuterWall(parent=tz)\n    out_wall_east.name = \"OuterWallEast\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[661:685]\n==teaser.logic.buildingobjects.calculation.two_element:[439:463]\n                + \", please be careful with results. In addition \"\n                + \"this might lead to RunTimeErrors\"\n            )\n        else:\n            self._sum_outer_wall_elements()\n        if (\n            len(\n                self.thermal_zone.inner_walls\n                + self.thermal_zone.floors\n                + self.thermal_zone.ceilings\n                + self.nzbs_for_iw\n            )\n            < 1\n        ):\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no inner walls have been defined.\"\n            )\n        else:\n            self._sum_inner_wall_elements()\n            self._calc_inner_elements()",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.aixlib:[282:296]\n==teaser.logic.buildingobjects.calculation.ibpsa:[77:91]\n        if path is None:\n            path = utilities.get_default_path()\n        else:\n            pass\n\n        utilities.create_path(path)\n        path = os.path.join(path, self.file_internal_gains)\n\n        export = pd.DataFrame(\n            index=pd.date_range(\"2019-01-01 00:00:00\", periods=8760, freq=\"h\")\n            .to_series()\n            .dt.strftime(\"%m-%d %H:%M:%S\")\n        )\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1472:1487]\n==teaser.logic.buildingobjects.calculation.three_element:[1084:1114]\n        )\n\n        for in_wall in inner_walls:\n            in_wall.calc_equivalent_res()\n            in_wall.calc_ua_value()\n\n        if 0 < len(inner_walls) <= 1:\n            # only one outer wall, no need to calculate chain matrix\n            self.r1_iw = inner_walls[0].r1\n            self.c1_iw = inner_walls[0].c1_korr\n        elif len(inner_walls) > 1:\n            # more than one outer wall, calculate chain matrix\n            self.r1_iw, self.c1_iw = self._calc_parallel_connection(\n                inner_walls, omega, mode='iw'\n            )\n\n    def _calc_wf(self):\n        \"\"\"Weightfactors for outer elements(walls, roof, ground floor, windows)\n\n        Calculates the weightfactors of the outer walls, including ground and\n        windows.\n\n        Parameters\n        ----------\n        outer_walls : list\n            List containing all TEASER Wall instances that are treated as same\n            outer wall type. In case of TwoElement model OuterWalls,\n            GroundFloors, Rooftops\n        \"\"\"\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[628:662]\n==teaser.logic.buildingobjects.calculation.two_element:[439:473]\n                + \", please be careful with results. In addition \"\n                + \"this might lead to RunTimeErrors\"\n            )\n        else:\n            self._sum_outer_wall_elements()\n        if (\n                len(\n                    self.thermal_zone.inner_walls\n                    + self.thermal_zone.floors\n                    + self.thermal_zone.ceilings\n                    + self.nzbs_for_iw\n                )\n                < 1\n        ):\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no inner walls have been defined.\"\n            )\n        else:\n            self._sum_inner_wall_elements()\n            self._calc_inner_elements()\n        if len(self.thermal_zone.windows) < 1:\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no windows have been defined.\"\n            )\n        else:\n            self._sum_window_elements()",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[622:633]\n==teaser.logic.buildingobjects.calculation.one_element:[370:381]\n            warnings.warn(\n                \"No walls are defined as outer walls for thermal \"\n                + \"zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", please be careful with results. In addition \"\n                + \"this might lead to RunTimeErrors\"\n            )\n        else:\n            self._sum_outer_wall_elements()",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[3:16]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[3:14]\nfrom teaser.logic.archetypebuildings.residential import Residential\nfrom teaser.logic.buildingobjects.useconditions import UseConditions as UseCond\nfrom teaser.logic.buildingobjects.buildingphysics.ceiling import Ceiling\nfrom teaser.logic.buildingobjects.buildingphysics.floor import Floor\nfrom teaser.logic.buildingobjects.buildingphysics.groundfloor import GroundFloor\nfrom teaser.logic.buildingobjects.buildingphysics.innerwall import InnerWall\nfrom teaser.logic.buildingobjects.buildingphysics.outerwall import OuterWall\nfrom teaser.logic.buildingobjects.buildingphysics.rooftop import Rooftop\nfrom teaser.logic.buildingobjects.buildingphysics.window import Window\nfrom teaser.logic.buildingobjects.buildingphysics.door import Door\nfrom teaser.logic.buildingobjects.thermalzone import ThermalZone\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[514:529]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[528:542]\n                    data_class=self.parent.data,\n                )\n                inner_wall.name = key\n                inner_wall.tilt = value[0]\n                inner_wall.orientation = value[1]\n                # zone.inner_walls.append(inner_wall)\n\n        if self.number_of_floors > 1:\n\n            for key, value in self.ceiling_names.items():\n\n                for zone in self.thermal_zones:\n                    ceiling = Ceiling(zone)\n                    ceiling.load_type_element(\n                        year=self.year_of_construction,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[28:39]\n==teaser.logic.buildingobjects.useconditions:[404:415]\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[27:38]\n==teaser.logic.buildingobjects.useconditions:[405:416]\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[859:870]\n==teaser.logic.buildingobjects.calculation.two_element:[1050:1061]\n        outer_elements = (\n            self.thermal_zone.outer_walls\n            + self.thermal_zone.find_izes_outer()\n            + self.thermal_zone.ground_floors\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.windows\n        )\n\n        tilt_orient = []\n        for element in outer_elements:\n            tilt_orient.append((element.orientation, element.tilt))",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[838:849]\n==teaser.logic.buildingobjects.calculation.two_element:[1071:1082]\n        outer_elements = (\n            self.thermal_zone.outer_walls\n            + self.thermal_zone.find_izes_outer()\n            + self.thermal_zone.ground_floors\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.windows\n        )\n\n        tilt_orient = []\n        for element in outer_elements:\n            tilt_orient.append((element.orientation, element.tilt))",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[842:862]\n==teaser.logic.buildingobjects.calculation.three_element:[1171:1191]\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.windows\n        )\n\n        tilt_orient = []\n        for element in outer_elements:\n            tilt_orient.append((element.orientation, element.tilt))\n        self.n_outer = len(list(set(tilt_orient)))\n\n    def _fill_zone_lists(self):\n        \"\"\"Fills lists like weightfactors and tilt, orientation\n\n        Fills the lists of a zone  according to orientation and tilt of the\n        zone. Therefore it compares orientation and tilt of all outer\n        elements and then creates lists for zone weightfactors, orientation,\n        tilt, ares and sunblinds.\"\"\"\n\n        outer_elements = (\n            self.thermal_zone.outer_walls\n            + self.thermal_zone.find_izes_outer()",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[652:662]\n==teaser.logic.buildingobjects.calculation.one_element:[381:391]\n        if len(self.thermal_zone.windows) < 1:\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no windows have been defined.\"\n            )\n        else:\n            self._sum_window_elements()",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.dk.apartmentblock:[260:271]\n==teaser.logic.archetypebuildings.tabula.dk.terracedhouse:[251:262]\n        self.building_age_group = None\n\n        if self.with_ahu is True:\n            self.central_ahu.profile_temperature = (\n                7 * [293.15] +\n                12 * [295.15] +\n                5 * [293.15])\n            self.central_ahu.profile_min_relative_humidity = (24 * [0.45])\n            self.central_ahu.profile_max_relative_humidity = (24 * [0.55])\n            self.central_ahu.profile_v_flow = (\n                7 * [0.0] + 12 * [1.0] + 5 * [0.0])",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.multifamilyhouse:[292:303]\n==teaser.logic.archetypebuildings.tabula.de.terracedhouse:[271:282]\n        self.building_age_group = None\n\n        if self.with_ahu is True:\n            self.central_ahu.temperature_profile = (\n                7 * [293.15] +\n                12 * [295.15] +\n                5 * [293.15])\n            self.central_ahu.min_relative_humidity_profile = (24 * [0.45])\n            self.central_ahu.max_relative_humidity_profile = (24 * [0.55])\n            self.central_ahu.v_flow_profile = (\n                7 * [0.0] + 12 * [1.0] + 5 * [0.0])",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.custom.institute8:[177:187]\n==teaser.logic.archetypebuildings.bmvbs.custom.institute:[178:188]\n                                         name,\n                                         year_of_construction,\n                                         number_of_floors,\n                                         height_of_floors,\n                                         net_leased_area,\n                                         with_ahu,\n                                         internal_gains_mode,\n                                         office_layout,\n                                         inner_wall_approximation_approach,\n                                         window_layout,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[530:543]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[543:555]\n                        data_class=self.parent.data,\n                    )\n                    ceiling.name = key\n                    ceiling.tilt = value[0]\n                    ceiling.orientation = value[1]\n\n            for key, value in self.floor_names.items():\n\n                for zone in self.thermal_zones:\n                    floor = Floor(zone)\n                    floor.load_type_element(\n                        year=self.year_of_construction,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[405:415]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[345:355]\n            zone.name = key\n            zone.area = type_bldg_area * value[0]\n            try:\n                zone.number_of_floors = value[2]['number_of_floors']\n            except (KeyError, IndexError):\n                pass\n            try:\n                zone.height_of_floors = value[2]['height_of_floors']\n            except (KeyError, IndexError):\n                pass",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.office:[7:19]\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[4:15]\nfrom teaser.logic.buildingobjects.useconditions import UseConditions as UseCond\nfrom teaser.logic.buildingobjects.buildingphysics.ceiling import Ceiling\nfrom teaser.logic.buildingobjects.buildingphysics.floor import Floor\nfrom teaser.logic.buildingobjects.buildingphysics.groundfloor import GroundFloor\nfrom teaser.logic.buildingobjects.buildingphysics.innerwall import InnerWall\nfrom teaser.logic.buildingobjects.buildingphysics.outerwall import OuterWall\nfrom teaser.logic.buildingobjects.buildingphysics.rooftop import Rooftop\nfrom teaser.logic.buildingobjects.buildingphysics.window import Window\nfrom teaser.logic.buildingobjects.thermalzone import ThermalZone\nimport teaser.data.utilities as datahandling\n\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[383:393]\n==teaser.logic.archetypebuildings.urbanrenet.est1a:[259:269]\n            zone.name = key\n            zone.area = type_bldg_area * value[0]\n            try:\n                zone.number_of_floors = value[2]['number_of_floors']\n            except (KeyError, IndexError):\n                pass\n            try:\n                zone.height_of_floors = value[2]['height_of_floors']\n            except (KeyError, IndexError):\n                pass",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[29:39]\n==teaser.logic.buildingobjects.useconditions:[404:414]\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[27:37]\n==teaser.logic.buildingobjects.useconditions:[406:416]\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e10_adjust_schedules:[0:24]\n==teaser.examples.e1_generate_archetype:[13:41]\n    from teaser.project import Project\n\n    # To use the API, instantiate the Project class and rename the project.\n    # Be careful: Dymola does not like whitespaces in names and filenames, thus we will delete them anyway in TEASER.\n\n    prj = Project()\n    prj.name = \"ArchetypeExample\"\n\n    # There are two different types of archetype groups: residential and\n    # non-residential buildings. Two API functions offer the opportunity to\n    # generate specific archetypes.\n\n    # To generate residential archetype buildings the function\n    # Project.add_residential() is used. Seven parameters are compulsory,\n    # additional parameters can be set according to the used method. `construction_data`\n    # and `geometry_data` are used to distinguish between different construction and archetype\n    # methods. The name, year_of_construction, number and height of floors\n    # and net_leased_area need to be set to provide enough information for\n    # archetype generation. For specific information on the parameters please\n    # read the docs.\n\n    prj.add_residential(\n        construction_data='iwu_heavy',\n        geometry_data='iwu_single_family_dwelling',\n        name=\"ResidentialBuilding\",\n        year_of_construction=1988,\n        number_of_floors=2,\n        height_of_floors=3.2,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.door:[180:191]\n==teaser.logic.buildingobjects.buildingphysics.outerwall:[175:214]\n            else:\n                raise ValueError('Instance of OuterWall not known')\n\n            if self.parent.parent is not None:\n                self.year_of_construction = \\\n                    self.parent.parent.year_of_construction\n            else:\n                pass\n        else:\n\n            self.__parent = None",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.three_element:[1293:1302]\n==teaser.logic.buildingobjects.calculation.two_element:[1189:1198]\n        self.heat_load_outside_factor = (\n            (ua_value_ow_temp + self.ua_value_win)\n            + self.thermal_zone.volume\n            * self.thermal_zone.use_conditions.normative_infiltration\n            * 1\n            / 3600\n            * self.thermal_zone.heat_capac_air\n            * self.thermal_zone.density_air\n        )",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[391:401]\n==teaser.logic.buildingobjects.calculation.three_element:[554:564]\n        if len(outer_walls) >= 1 or len(self.thermal_zone.windows) >= 1:\n            self._calc_outer_elements()\n            self._calc_wf()\n            self._calc_mean_values()\n        if len(self.thermal_zone.interzonal_elements) >= 1:\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1585:1665]\n==teaser.logic.buildingobjects.calculation.two_element:[1199:1279]\n        self.heat_load = \\\n            self.heat_load_outside_factor \\\n            * (self.thermal_zone.t_inside - self.thermal_zone.t_outside) \\\n            + self.heat_load_ground_factor \\\n            * (self.thermal_zone.t_inside - t_ground)\n\n    def set_calc_default(self):\n        \"\"\"sets default calculation parameters\n        \"\"\"\n\n        # Attributes of inner walls\n        self.area_iw = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_iw = 0.0\n        self.alpha_rad_inner_iw = 0.0\n        self.alpha_comb_inner_iw = 0.0\n        # coefficient of heat transfer facing the adjacent thermal zone\n        self.alpha_conv_outer_iw = 0.0\n        self.alpha_rad_outer_iw = 0.0\n        self.alpha_comb_outer_iw = 0.0\n\n        # UA-Value\n        self.ua_value_iw = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_iw = 0.0\n        self.r_rad_inner_iw = 0.0\n        self.r_comb_inner_iw = 0.0\n        self.r_conv_outer_iw = 0.0\n        self.r_rad_outer_iw = 0.0\n        self.r_comb_outer_iw = 0.0\n\n        # lumped resistance/capacity\n        self.r1_iw = 0.0\n        self.c1_iw = 0.0\n\n        # Attributes for outer walls\n        self.area_ow = 0.0\n\n        # coefficient of heat transfer facing the inside of this thermal zone\n        self.alpha_conv_inner_ow = 0.0\n        self.alpha_rad_inner_ow = 0.0\n        self.alpha_comb_inner_ow = 0.0\n\n        # coefficient of heat transfer facing the ambient\n        self.alpha_conv_outer_ow = 0.0\n        self.alpha_rad_outer_ow = 0.0\n        self.alpha_comb_outer_ow = 0.0\n\n        # UA-Value\n        self.ua_value_ow = 0.0\n\n        # resistances for heat transfer facing the inside of this thermal zone\n        self.r_conv_inner_ow = 0.0\n        self.r_rad_inner_ow = 0.0\n        self.r_comb_inner_ow = 0.0\n\n        # resistances for heat transfer facing the ambient\n        self.r_conv_outer_ow = 0.0\n        self.r_rad_outer_ow = 0.0\n        self.r_comb_outer_ow = 0.0\n\n        # lumped resistances/capacity\n        self.r1_ow = 0.0\n        self.r_rest_ow = 0.0\n        self.c1_ow = 0.0\n        self.r_total_ow = 0.0\n\n        # Optical properties\n        self.ir_emissivity_outer_ow = 0.0\n        self.ir_emissivity_inner_ow = 0.0\n        self.solar_absorp_ow = 0.0\n\n        # Additional attributes\n        self.weightfactor_ow = []\n        self.weightfactor_ground = 0.0\n        self.outer_wall_areas = []\n\n        # Attributes for GroundFloor",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[608:617]\n==teaser.logic.buildingobjects.calculation.two_element:[419:428]\n        for win in self.thermal_zone.windows:\n            win.calc_equivalent_res()\n            win.calc_ua_value()\n        for inner_wall in (\n            self.thermal_zone.inner_walls\n            + self.thermal_zone.floors\n            + self.thermal_zone.ceilings\n            + self.nzbs_for_iw\n        ):",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1392:1401]\n==teaser.logic.buildingobjects.calculation.four_element:[1307:1316]\n            )\n        else:\n            warnings.warn(\n                \"No walls are defined as ground floors, please be \"\n                \"careful with results. In addition this might lead \"\n                \"to RunTimeErrors\"\n            )\n        try:\n            conduction = 1 / sum(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1434:1443]\n==teaser.logic.buildingobjects.calculation.four_element:[1265:1274]\n            )\n        else:\n            warnings.warn(\n                \"No walls are defined as ground floors, please be \"\n                \"careful with results. In addition this might lead \"\n                \"to RunTimeErrors\"\n            )\n        try:\n            conduction = 1 / sum(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[617:630]\n==teaser.logic.buildingobjects.calculation.four_element:[585:594]\n        self.alpha_rad_inner_mean = 0.0\n        self.alpha_rad_outer_mean = 0.0\n        self.n_outer = 0\n        self.n_rt = 0\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1575:1584]\n==teaser.logic.buildingobjects.calculation.one_element:[974:983]\n        self.heat_load_outside_factor = (\n            (ua_value_ow_temp + self.ua_value_win)\n            + self.thermal_zone.volume\n            * self.thermal_zone.use_conditions.normative_infiltration\n            * 1\n            / 3600\n            * self.thermal_zone.heat_capac_air\n            * self.thermal_zone.density_air\n        )",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1562:1574]\n==teaser.logic.buildingobjects.calculation.one_element:[958:970]\n        if self.thermal_zone.use_conditions.base_infiltration > 0.5:\n            warnings.warn(\"The base_infiltration is larger than 0.5, \"\n                          \"which could lead to ideal heaters being too small.\")\n\n        self.heat_load = 0.0\n\n        if self.thermal_zone.parent.parent.t_soil_mode == 2:\n            t_ground = self.thermal_zone.t_ground \\\n                       - self.thermal_zone.t_ground_amplitude\n        else:\n            t_ground = self.thermal_zone.t_ground\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.apartmentblock:[134:148]\n==teaser.logic.archetypebuildings.tabula.dk.terracedhouse:[129:143]\n        self.roof_names_1 = {\"Rooftop_1\": [0, -1]}  # [0, -1]\n\n        self.roof_names_2 = {\"Rooftop_2\": [0, -1]}\n\n        self.ground_floor_names_1 = {\n            \"GroundFloor_1\": [0, -2]}  # [0, -2]\n\n        self.ground_floor_names_2 = {\n            \"GroundFloor_2\": [0, -2]}\n\n        self.door_names = {\"Door\": [90.0, 270]}\n\n        self.window_names_1 = {\n            \"WindowFacadeNorth_1\": [90.0, 0.0],",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[623:639]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[556:572]\n                            data_class=self.parent.data,\n                        )\n                    floor.name = key\n                    floor.tilt = value[0]\n                    floor.orientation = value[1]\n\n        for zone in self.thermal_zones:\n            zone.set_inner_wall_area()\n            zone.set_volume_zone()\n\n    @property\n    def construction_data(self):\n        return self._construction_data\n\n    @construction_data.setter\n    def construction_data(self, value):",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[581:593]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[528:540]\n                        data_class=self.parent.data,\n                    )\n                inner_wall.name = key\n                inner_wall.tilt = value[0]\n                inner_wall.orientation = value[1]\n\n        if self.number_of_floors > 1:\n\n            for key, value in self.ceiling_names.items():\n\n                for zone in self.thermal_zones:\n                    ceiling = Ceiling(zone)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.multifamilyhouse:[136:150]\n==teaser.logic.archetypebuildings.tabula.de.terracedhouse:[129:143]\n        self.roof_names_1 = {\"Rooftop_1\": [0, -1]}  # [0, -1]\n\n        self.roof_names_2 = {\"Rooftop_2\": [0, -1]}\n\n        self.ground_floor_names_1 = {\n            \"GroundFloor_1\": [0, -2]}  # [0, -2]\n\n        self.ground_floor_names_2 = {\n            \"GroundFloor_2\": [0, -2]}\n\n        self.door_names = {\"Door\": [90.0, 270]}\n\n        self.window_names_1 = {\n            \"WindowFacadeNorth_1\": [90.0, 0.0],",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[467:477]\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[441:450]\n                    )\n                    window.load_type_element(\n                        self.year_of_construction,\n                        construction=construction,\n                        data_class=self.parent.data,\n                    )\n                    window.name = key\n                    window.tilt = value[0]\n                    window.orientation = value[1]",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[3:12]\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[3:12]\nfrom teaser.logic.archetypebuildings.residential import Residential\nfrom teaser.logic.buildingobjects.useconditions import UseConditions as UseCond\nfrom teaser.logic.buildingobjects.buildingphysics.ceiling import Ceiling\nfrom teaser.logic.buildingobjects.buildingphysics.floor import Floor\nfrom teaser.logic.buildingobjects.buildingphysics.groundfloor import GroundFloor\nfrom teaser.logic.buildingobjects.buildingphysics.innerwall import InnerWall\nfrom teaser.logic.buildingobjects.buildingphysics.outerwall import OuterWall\nfrom teaser.logic.buildingobjects.buildingphysics.rooftop import Rooftop\nfrom teaser.logic.buildingobjects.buildingphysics.window import Window",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.office:[330:339]\n==teaser.logic.archetypebuildings.urbanrenet.est1a:[260:269]\n            zone.area = type_bldg_area * value[0]\n            try:\n                zone.number_of_floors = value[2]['number_of_floors']\n            except (KeyError, IndexError):\n                pass\n            try:\n                zone.height_of_floors = value[2]['height_of_floors']\n            except (KeyError, IndexError):\n                pass",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.nonresidential:[140:158]\n==teaser.logic.archetypebuildings.residential:[140:158]\n            parent,\n            name,\n            year_of_construction,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,\n            inner_wall_approximation_approach\n        )\n\n    def generate_archetype(self):\n        \"\"\"Generates an archetype building.\n\n        If you want to define you own archetype methodology please use this\n        function call to do so.\n\n        \"\"\"\n\n        pass",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[30:39]\n==teaser.logic.buildingobjects.useconditions:[404:413]\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[27:36]\n==teaser.logic.buildingobjects.useconditions:[407:416]\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.data.output.aixlib_output:[128:136]\n==teaser.data.output.ibpsa_output:[97:105]\n    modelica_output.create_package(\n        path=path,\n        name=prj.name,\n        uses=uses)\n    modelica_output.create_package_order(\n        path=path,\n        package_list=buildings,\n        extra=None)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.data.output.aixlib_output:[206:215]\n==teaser.data.output.besmod_output:[250:259]\n                out_file.close()\n\n        modelica_output.create_package(\n            path=zone_path,\n            name=bldg.name + '_DataBase',\n            within=prj.name + '.' + bldg.name)\n        modelica_output.create_package_order(\n            path=zone_path,\n            package_list=bldg.thermal_zones,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.data.input.teaserjson_input:[363:372]\n==teaser.data.output.teaserjson_output:[330:339]\n    if (\n        type(element).__name__ == \"OuterWall\"\n        or type(element).__name__ == \"Rooftop\"\n        or type(element).__name__ == \"Door\"\n        or type(element).__name__ == \"InterzonalWall\"\n        or type(element).__name__ == \"InterzonalCeiling\"\n        or type(element).__name__ == \"InterzonalFloor\"\n    ):\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.buildingelement:[526:534]\n==teaser.logic.buildingobjects.buildingphysics.layer:[96:104]\n        if isinstance(value, float):\n            pass\n        elif value is None:\n            pass\n        else:\n            try:\n                value = float(value)\n            except:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.three_element:[1058:1116]\n==teaser.logic.buildingobjects.calculation.two_element:[933:991]\n                \"parameter cannot be calculated\"\n            )\n\n    def _calc_inner_elements(self):\n        \"\"\"Lumped parameter for outer wall elements\n\n        Calculates all necessary parameters for inner walls. This includes\n        InnerWalls, Ceilings and Floors.\n\n        Attributes\n        ----------\n        omega : float [1/s]\n            angular frequency with given time period.\n        outer_walls : list\n            List containing all TEASER Wall instances that are treated as same\n            outer wall type. In case of TwoElement model OuterWalls,\n            GroundFloors, Rooftops\n        \"\"\"\n\n        omega = 2 * math.pi / 86400 / self.t_bt\n\n        inner_walls = (\n            self.thermal_zone.inner_walls\n            + self.thermal_zone.floors\n            + self.thermal_zone.ceilings\n            + self.nzbs_for_iw\n        )\n\n        for in_wall in inner_walls:\n            in_wall.calc_equivalent_res()\n            in_wall.calc_ua_value()\n\n        if 0 < len(inner_walls) <= 1:\n            # only one outer wall, no need to calculate chain matrix\n            self.r1_iw = inner_walls[0].r1\n            self.c1_iw = inner_walls[0].c1_korr\n        elif len(inner_walls) > 1:\n            # more than one outer wall, calculate chain matrix\n            self.r1_iw, self.c1_iw = self._calc_parallel_connection(\n                inner_walls, omega, mode='iw'\n            )\n\n    def _calc_wf(self):\n        \"\"\"Weightfactors for outer elements(walls, roof, ground floor, windows)\n\n        Calculates the weightfactors of the outer walls, including ground and\n        windows.\n\n        Parameters\n        ----------\n        outer_walls : list\n            List containing all TEASER Wall instances that are treated as same\n            outer wall type. In case of TwoElement model OuterWalls,\n            GroundFloors, Rooftops\n        \"\"\"\n\n        outer_walls = (\n                self.thermal_zone.outer_walls",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.three_element:[1444:1457]\n==teaser.logic.buildingobjects.calculation.two_element:[384:397]\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Misc values\n\n        self.alpha_rad_inner_mean = 0.0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.three_element:[452:465]\n==teaser.logic.buildingobjects.calculation.two_element:[1311:1324]\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Misc values\n\n        self.alpha_rad_inner_mean = 0.0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[642:650]\n==teaser.logic.buildingobjects.calculation.one_element:[357:365]\n        for win in self.thermal_zone.windows:\n            win.calc_equivalent_res()\n            win.calc_ua_value()\n        for inner_wall in (\n            self.thermal_zone.inner_walls\n            + self.thermal_zone.floors\n            + self.thermal_zone.ceilings\n        ):",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[681:692]\n==teaser.logic.buildingobjects.calculation.three_element:[944:955]\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.find_izes_outer()\n        )\n\n        if 0 < len(outer_walls) <= 1:\n            # only one outer wall, no need to calculate chain matrix\n            self.r1_ow = outer_walls[0].r1\n            self.c1_ow = outer_walls[0].c1_korr\n        elif len(outer_walls) > 1:\n            # more than one outer wall, calculate chain matrix\n            self.r1_ow, self.c1_ow = self._calc_parallel_connection(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1607:1625]\n==teaser.logic.buildingobjects.calculation.four_element:[1439:1457]\n        tilt_orient = []\n        for element in outer_elements:\n            tilt_orient.append((element.orientation, element.tilt))\n        self.n_outer = len(list(set(tilt_orient)))\n\n        tilt_orient_rt = []\n        for roof in self.thermal_zone.rooftops:\n            tilt_orient_rt.append((roof.orientation, roof.tilt))\n        self.n_rt = len(list(set(tilt_orient_rt)))\n\n    def _fill_zone_lists(self):\n        \"\"\"Fills lists like weightfactors and tilt, orientation\n\n        Fills the lists of a zone  according to orientation and tilt of the\n        zone. Therefore it compares orientation and tilt of all outer\n        elements and then creates lists for zone weightfactors, orientation,\n        tilt, ares and sunblinds.\"\"\"\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[747:786]\n==teaser.logic.buildingobjects.calculation.four_element:[702:738]\n            )\n        self._calc_number_of_elements()\n        self._fill_zone_lists()\n        self._calc_heat_load()\n        self.cool_load = -self.heat_load\n\n        return True\n\n    @staticmethod\n    def _calc_parallel_connection(element_list, omega, mode='iw'):\n        \"\"\"Parallel connection of walls according to VDI 6007\n\n        Calculates the parallel connection of wall elements according to VDI\n        6007, resulting in R1 and C1 (equation 23, 24).\n\n        Parameters\n        ----------\n        element_list : list\n            List of inner or outer walls\n        omega : float\n            VDI 6007 frequency\n        mode : str\n            'ow' uses r1 and c1_korr\n            'iw' uses r1 and c1 (function falls back here for other strings)\n            'izw_backwards' uses r2 and c1_korr because heat flow goes towards\n                this thermal zone (instead of away from it) for interzonal\n                elements between heated and unheated zones\n\n        Returns\n        ----------\n        r1 : float [K/W]\n            VDI 6007 resistance for all inner or outer walls\n        c1 : float [K/W]\n            VDI 6007 capacity all for inner or outer walls\n        \"\"\"\n\n        for wall_count in range(len(element_list) - 1):\n\n            if wall_count == 0:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[699:708]\n==teaser.logic.buildingobjects.calculation.one_element:[402:433]\n                + \"will treat them as outer walls or inner walls depending on \"\n                + \"the project parameter 'method_interzonal_export'. Consider \"\n                + \"using FiveElement instead.\"\n            )\n        self._calc_number_of_elements()\n        self._fill_zone_lists()\n        self._calc_heat_load()\n        self.cool_load = -self.heat_load\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[689:698]\n==teaser.logic.buildingobjects.calculation.one_element:[392:401]\n            self._calc_outer_elements()\n            self._calc_wf()\n            self._calc_mean_values()\n        if len(self.thermal_zone.interzonal_elements) >= 1:\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1772:1785]\n==teaser.logic.buildingobjects.calculation.one_element:[321:334]\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Misc values\n\n        self.alpha_rad_inner_mean = 0.0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[573:586]\n==teaser.logic.buildingobjects.calculation.one_element:[1072:1085]\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Misc values\n\n        self.alpha_rad_inner_mean = 0.0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.material:[196:204]\n==teaser.logic.buildingobjects.thermalzone:[761:769]\n        if isinstance(value, float):\n            pass\n        elif value is None:\n            pass\n        else:\n            try:\n                value = float(value)\n            except:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[603:613]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[543:553]\n                        data_class=self.parent.data,\n                    )\n                    ceiling.name = key\n                    ceiling.tilt = value[0]\n                    ceiling.orientation = value[1]\n\n            for key, value in self.floor_names.items():\n\n                for zone in self.thermal_zones:\n                    floor = Floor(zone)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.custom.institute4:[196:205]\n==teaser.logic.archetypebuildings.bmvbs.custom.institute8:[197:205]\n        self.zone_area_factors[\"Meeting\"] = \\\n            [0.04, \"Meeting, Conference, seminar\"]\n        self.zone_area_factors[\"Restroom\"] = \\\n            [0.04, \"WC and sanitary rooms in non-residential buildings\"]\n        self.zone_area_factors[\"ICT\"] = \\\n            [0.02, \"Data center\"]\n        self.est_exponent_wall = 0.6177\n        self.est_factor_wall_area = 13.895\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.office:[7:15]\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[4:12]\nfrom teaser.logic.buildingobjects.useconditions import UseConditions as UseCond\nfrom teaser.logic.buildingobjects.buildingphysics.ceiling import Ceiling\nfrom teaser.logic.buildingobjects.buildingphysics.floor import Floor\nfrom teaser.logic.buildingobjects.buildingphysics.groundfloor import GroundFloor\nfrom teaser.logic.buildingobjects.buildingphysics.innerwall import InnerWall\nfrom teaser.logic.buildingobjects.buildingphysics.outerwall import OuterWall\nfrom teaser.logic.buildingobjects.buildingphysics.rooftop import Rooftop\nfrom teaser.logic.buildingobjects.buildingphysics.window import Window",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.custom.institute:[199:208]\n==teaser.logic.archetypebuildings.bmvbs.office:[221:231]\n            \"Stock, technical equipment, archives\",\n        ]\n        self.zone_area_factors[\"Meeting\"] = [0.04, \"Meeting, Conference, seminar\"]\n        self.zone_area_factors[\"Restroom\"] = [\n            0.04,\n            \"WC and sanitary rooms in non-residential buildings\",\n        ]\n        self.zone_area_factors[\"ICT\"] = [0.02, \"Data center\"]\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[472:483]\n==teaser.logic.archetypebuildings.urbanrenet.est1a:[316:327]\n                                         )\n                window.name = key\n                window.tilt = value[0]\n                window.orientation = value[1]\n\n        for key, value in self.roof_names.items():\n\n            self.outer_area[value[1]] = self._est_roof_area\n\n            for zone in self.thermal_zones:\n                roof = Rooftop(zone)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.dk.apartmentblock:[102:110]\n==teaser.logic.archetypebuildings.urbanrenet.est8b:[95:103]\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.dk.terracedhouse:[101:109]\n==teaser.logic.archetypebuildings.urbanrenet.est4a:[95:103]\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.apartmentblock:[102:110]\n==teaser.logic.archetypebuildings.urbanrenet.est7:[95:103]\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.multifamilyhouse:[104:112]\n==teaser.logic.archetypebuildings.urbanrenet.est4b:[97:105]\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.terracedhouse:[101:109]\n==teaser.logic.archetypebuildings.urbanrenet.est1b:[97:105]\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.custom.institute:[177:185]\n==teaser.logic.archetypebuildings.urbanrenet.est8a:[95:103]\n            parent,\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.residential:[140:157]\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[131:140]\n            parent,\n            name,\n            year_of_construction,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,\n            inner_wall_approximation_approach\n        )\n\n    def generate_archetype(self):\n        \"\"\"Generates an archetype building.\n\n        If you want to define you own archetype methodology please use this\n        function call to do so.\n\n        \"\"\"\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[206:215]\n==teaser.logic.archetypebuildings.nonresidential:[140:157]\n            parent,\n            name,\n            year_of_construction,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,\n            inner_wall_approximation_approach\n        )\n\n    def generate_archetype(self):\n        \"\"\"Generates an archetype building.\n\n        If you want to define you own archetype methodology please use this\n        function call to do so.\n\n        \"\"\"\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[31:39]\n==teaser.logic.buildingobjects.useconditions:[404:412]\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[27:35]\n==teaser.logic.buildingobjects.useconditions:[408:416]\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e2_export_aixlib_models:[49:75]\n==teaser.examples.e3_export_ibpsa_models:[39:65]\n    prj.weather_file_path = utilities.get_full_path(\n        os.path.join(\n            \"data\",\n            \"input\",\n            \"inputdata\",\n            \"weatherdata\",\n            \"DEU_BW_Mannheim_107290_TRY2010_12_Jahr_BBSR.mos\"))\n\n    # To make sure the parameters are calculated correctly we recommend to\n    # run calc_all_buildings() function\n\n    prj.calc_all_buildings()\n\n    # To export the ready-to-run models simply call Project.export_aixlib().\n    # You can specify the path, where the model files should be saved.\n    # None means, that the default path in your home directory\n    # will be used. If you only want to export one specific building, you can\n    # pass over the internal_id of that building and only this model will be\n    # exported. In this case we want to export all buildings to our home\n    # directory, thus we are passing over None for both parameters.\n\n    # We might want not have all data stored in our result file. By defining\n    # export_vars as following we can specify which results we want to store\n    # and define a collection name under which these results are stored. This\n    # feature only works with Dymola.\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.data.output.besmod_output:[255:308]\n==teaser.data.output.ibpsa_output:[162:171]\n            within=prj.name + '.' + bldg.name)\n        modelica_output.create_package_order(\n            path=zone_path,\n            package_list=bldg.thermal_zones,\n            addition=bldg.name + \"_\")\n\n    print(\"Exports can be found here:\")\n    print(path)\n\n\ndef convert_input(building_zones_input: Union[float, Dict[Union[int, str], Union[float, Dict[str, float]]]],\n                  buildings: List[Building]) -> Dict[str, str]:\n    \"\"\"\n    Convert input values for BESMod zone specific parameters to a dictionary.\n\n    Supports single values, dictionaries keyed by construction year, or\n    dictionaries keyed by building names.\n    If single values are given then all buildings and zones get this values set.\n    If a dictionary keyed by construction year is given then all zones of a building get the\n    value set of the next higher year corresponding to the construction year of the building.\n    If a dictionary keyed by building name is given the value must be a single value for all zones\n    or another dictionary specifying for each zone name a value.\n\n    Parameters\n    ----------\n    building_zones_input : Union[float, Dict[Union[int, str], Union[float, Dict[str, float]]]]\n        Input value(s) for BESMod parameters. Can be a single value, a dictionary keyed by construction year,\n        or a dictionary keyed by building name.\n        Example:\n        - Single value: 328.15\n        - Dictionary keyed by construction year: {1970: 348.15, 1990: 328.15}\n        - Dictionary keyed by building name: {\n            \"Building1\": 328.15,\n            \"Building2\": {\n                \"Zone1\": 328.15,\n                \"Zone2\": 308.15\n            }\n        }\n    buildings : List[Building]\n        List of TEASER Building instances.\n\n    Returns\n    -------\n    Dict[str, str]\n        Dictionary mapping building names to BESMod parameter input strings.\n\n    Raises\n    ------\n    ValueError\n        If the input dictionary has invalid values.\n    KeyError\n        If the input dictionary is missing required keys.\n    \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.outerwall:[178:214]\n==teaser.logic.buildingobjects.buildingphysics.window:[243:254]\n            if self.parent.parent is not None:\n                self.year_of_construction = \\\n                    self.parent.parent.year_of_construction\n            else:\n                pass\n        else:\n\n            self.__parent = None\n\n    @property\n    def g_value(self):",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.door:[183:191]\n==teaser.logic.buildingobjects.buildingphysics.interzonalwall:[329:337]\n            if self.parent.parent is not None:\n                self.year_of_construction = \\\n                    self.parent.parent.year_of_construction\n            else:\n                pass\n        else:\n\n            self.__parent = None",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.layer:[98:106]\n==teaser.logic.buildingobjects.buildingphysics.material:[317:327]\n        elif value is None:\n            pass\n        else:\n            try:\n                value = float(value)\n            except:\n                raise ValueError(\"Can't convert thickness to float\")\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.buildingelement:[456:466]\n==teaser.logic.buildingobjects.buildingphysics.material:[181:191]\n        else:\n            try:\n                value = str(value)\n                regex = re.compile('[^a-zA-z0-9]')\n                self._name = regex.sub('', value)\n            except ValueError:\n                print(\"Can't convert name to string\")\n\n    @property\n    def thermal_conduc(self):",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1286:1295]\n==teaser.logic.buildingobjects.calculation.two_element:[856:866]\n        if 0 < len(outer_walls) <= 1:\n            # only one outer wall, no need to calculate chain matrix\n            self.r1_ow = outer_walls[0].r1\n            self.c1_ow = outer_walls[0].c1_korr\n        elif len(outer_walls) > 1:\n            # more than one outer wall, calculate chain matrix\n            self.r1_ow, self.c1_ow = self._calc_parallel_connection(\n                outer_walls, omega, mode='ow'\n            )",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[642:649]\n==teaser.logic.buildingobjects.calculation.three_element:[489:496]\n        for win in self.thermal_zone.windows:\n            win.calc_equivalent_res()\n            win.calc_ua_value()\n        for inner_wall in (\n            self.thermal_zone.inner_walls\n            + self.thermal_zone.floors\n            + self.thermal_zone.ceilings",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1992:2011]\n==teaser.logic.buildingobjects.calculation.three_element:[1458:1478]\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0\n\n    @property\n    def nzbs_for_iw(self):\n        \"\"\"returns borders to neighboured zones to be considered as inner walls\n\n        Returns\n        -------\n        value : list\n            list of those interzonal elements that are to be treated as\n            'inner' depending on their 'interzonal_type_export' attribute\n\n        \"\"\"\n        elements = []\n        for i in self.thermal_zone.interzonal_elements:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[364:372]\n==teaser.logic.buildingobjects.calculation.two_element:[427:435]\n        ):\n            inner_wall.calc_equivalent_res(t_bt=self.t_bt_layer)\n            inner_wall.calc_ua_value()\n\n        self.set_calc_default()\n        if len(outer_walls) < 1:\n            warnings.warn(\n                \"No walls are defined as outer walls for thermal \"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1300:1309]\n==teaser.logic.buildingobjects.calculation.one_element:[693:702]\n            )\n\n        if self.merge_windows is False:\n            try:\n\n                if len(self.thermal_zone.windows) > 0:\n                    self.r1_win = 1 / sum(\n                        (1 / win.r1) for win in self.thermal_zone.windows\n                    )",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[824:841]\n==teaser.logic.buildingobjects.calculation.three_element:[1154:1171]\n        self.alpha_rad_outer_mean = (\n            self.area_ow * self.alpha_rad_outer_ow\n            + self.area_win * self.alpha_rad_outer_win\n        ) / (self.area_ow + self.area_win)\n\n    def _calc_number_of_elements(self):\n        \"\"\"Calculates the number of facade elements with different tilt/orient\n\n        This function calculates the number of outer elements with a\n        different combination of orientation and tilt, this includes the\n        rooftops and borders to unheated neighboured zones if\n        this zone is heated.\n        \"\"\"\n\n        outer_elements = (\n            self.thermal_zone.outer_walls\n            + self.thermal_zone.find_izes_outer()",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[403:433]\n==teaser.logic.buildingobjects.calculation.three_element:[566:574]\n                + \"the project parameter 'method_interzonal_export'. Consider \"\n                + \"using FiveElement instead.\"\n            )\n        self._calc_number_of_elements()\n        self._fill_zone_lists()\n        self._calc_heat_load()\n        self.cool_load = -self.heat_load\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1719:1729]\n==teaser.logic.buildingobjects.calculation.four_element:[1566:1575]\n        self.heat_load = 0.0\n\n        if self.thermal_zone.parent.parent.t_soil_mode == 2:\n            t_ground = self.thermal_zone.t_ground \\\n                       - self.thermal_zone.t_ground_amplitude\n        else:\n            t_ground = self.thermal_zone.t_ground\n\n        ua_value_ow_temp = self.ua_value_rt + self.ua_value_ow",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1589:1605]\n==teaser.logic.buildingobjects.calculation.four_element:[1416:1433]\n            + self.area_iw * self.alpha_rad_inner_iw\n        ) / (self.area_ow + self.area_win + self.area_iw + self.area_gf + self.area_rt)\n        self.alpha_rad_outer_mean = (\n            self.area_ow * self.alpha_rad_outer_ow\n            + self.area_rt * self.alpha_rad_outer_rt\n            + self.area_win * self.alpha_rad_outer_win\n        ) / (self.area_ow + self.area_rt + self.area_win)\n\n    def _calc_number_of_elements(self):\n        \"\"\"Calculates the number of facade elements with different tilt/orient\n\n        This function calculates the number of outer elements with a\n        different combination of orientation and tilt, this includes the\n        outer walls and borders to unheated neighboured zones if\n        this zone is heated.\n        \"\"\"\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[687:694]\n==teaser.logic.buildingobjects.calculation.four_element:[640:647]\n                < 1\n        ):\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[619:630]\n==teaser.logic.buildingobjects.calculation.four_element:[1785:1805]\n        self.n_outer = 0\n        self.n_rt = 0\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0\n\n    @property\n    def nzbs_for_iw(self):\n        \"\"\"returns borders to neighboured zones to be considered as inner walls\n\n        Returns\n        -------\n        value : list\n            list of those interzonal elements that are NOT to be treated as\n            'outer_ordered' depending on their 'interzonal_type_export'\n            attribute\n\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1990:2009]\n==teaser.logic.buildingobjects.calculation.four_element:[587:594]\n        self.n_outer = 0\n        self.n_rt = 0\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0\n\n    @property\n    def nzbs_for_iw(self):\n        \"\"\"returns borders to neighboured zones to be considered as inner walls\n\n        Returns\n        -------\n        value : list\n            list of those interzonal elements that are to be treated as\n            'inner' depending on their 'interzonal_type_export' attribute\n\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[554:566]\n==teaser.logic.buildingobjects.calculation.four_element:[1772:1784]\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Misc values\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1935:1947]\n==teaser.logic.buildingobjects.calculation.four_element:[573:585]\n        self.solar_absorp_win = 0.0\n\n        # Additional attributes\n        self.weightfactor_win = []\n        self.window_areas = []\n        self.transparent_areas = []\n        self.shading_g_total = []\n        self.shading_max_irr = []\n        self.weighted_g_value = 0.0\n\n        # Misc values\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1470:1478]\n==teaser.logic.buildingobjects.calculation.three_element:[1204:1212]\n                i[0], i[1]\n            ) + self.thermal_zone.find_izes_outer(\n                i[0], i[1]\n            )\n            wins = self.thermal_zone.find_wins(i[0], i[1])\n\n            if self.merge_windows is True:\n                self.facade_areas.append(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1158:1167]\n==teaser.logic.buildingobjects.calculation.three_element:[948:958]\n        if 0 < len(outer_walls) <= 1:\n            # only one outer wall, no need to calculate chain matrix\n            self.r1_ow = outer_walls[0].r1\n            self.c1_ow = outer_walls[0].c1_korr\n        elif len(outer_walls) > 1:\n            # more than one outer wall, calculate chain matrix\n            self.r1_ow, self.c1_ow = self._calc_parallel_connection(\n                outer_walls, omega, mode='ow'\n            )\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1460:1469]\n==teaser.logic.buildingobjects.calculation.one_element:[864:873]\n            + self.thermal_zone.windows\n        )\n\n        tilt_orient = []\n        for element in outer_elements:\n            tilt_orient.append((element.orientation, element.tilt))\n        tilt_orient = list(set(tilt_orient))\n\n        for i in tilt_orient:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[608:615]\n==teaser.logic.buildingobjects.calculation.one_element:[357:364]\n        for win in self.thermal_zone.windows:\n            win.calc_equivalent_res()\n            win.calc_ua_value()\n        for inner_wall in (\n                self.thermal_zone.inner_walls\n                + self.thermal_zone.floors\n                + self.thermal_zone.ceilings",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[589:599]\n==teaser.logic.buildingobjects.calculation.one_element:[336:347]\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0\n        self.heat_load_outside_factor = 0.0\n        self.heat_load_ground_factor = 0.0\n\n    def calc_attributes(self):\n        \"\"\"Calls all necessary function to calculate model attributes\"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.layer:[96:103]\n==teaser.logic.buildingobjects.thermalzone:[824:831]\n        if isinstance(value, float):\n            pass\n        elif value is None:\n            pass\n        else:\n            try:\n                value = float(value)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.material:[196:203]\n==teaser.logic.buildingobjects.thermalzone:[798:805]\n        if isinstance(value, float):\n            pass\n        elif value is None:\n            pass\n        else:\n            try:\n                value = float(value)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.office:[444:510]\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[496:564]\n            for zone in self.thermal_zones:\n                ground_floor = GroundFloor(zone)\n                ground_floor.load_type_element(\n                    year=self.year_of_construction,\n                    construction=self.construction_data.value,\n                    data_class=self.parent.data,\n                )\n                ground_floor.name = key\n                ground_floor.tilt = value[0]\n                ground_floor.orientation = value[1]\n\n        for key, value in self.inner_wall_names.items():\n\n            for zone in self.thermal_zones:\n                inner_wall = InnerWall(zone)\n                inner_wall.load_type_element(\n                    year=self.year_of_construction,\n                    construction=self.construction_data.value,\n                    data_class=self.parent.data,\n                )\n                inner_wall.name = key\n                inner_wall.tilt = value[0]\n                inner_wall.orientation = value[1]\n\n        if self.number_of_floors > 1:\n\n            for key, value in self.ceiling_names.items():\n\n                for zone in self.thermal_zones:\n                    ceiling = Ceiling(zone)\n                    ceiling.load_type_element(\n                        year=self.year_of_construction,\n                        construction=self.construction_data.value,\n                        data_class=self.parent.data,\n                    )\n                    ceiling.name = key\n                    ceiling.tilt = value[0]\n                    ceiling.orientation = value[1]\n                    # zone.inner_walls.append(ceiling)\n\n            for key, value in self.floor_names.items():\n\n                for zone in self.thermal_zones:\n                    floor = Floor(zone)\n                    floor.load_type_element(\n                        year=self.year_of_construction,\n                        construction=self.construction_data.value,\n                        data_class=self.parent.data,\n                    )\n                    floor.name = key\n                    floor.tilt = value[0]\n                    floor.orientation = value[1]\n        else:\n            pass\n\n        for key, value in self.outer_area.items():\n            self.set_outer_wall_area(value, key)\n        for key, value in self.window_area.items():\n            self.set_window_area(value, key)\n\n        for zone in self.thermal_zones:\n            zone.set_inner_wall_area()\n            zone.set_volume_zone()\n\n    @property\n    def office_layout(self):",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[516:527]\n==teaser.logic.archetypebuildings.urbanrenet.est1a:[351:362]\n                inner_wall.name = key\n                inner_wall.tilt = value[0]\n                inner_wall.orientation = value[1]\n                # zone.inner_walls.append(inner_wall)\n\n        if self.number_of_floors > 1:\n\n            for key, value in self.ceiling_names.items():\n\n                for zone in self.thermal_zones:\n                    ceiling = Ceiling(zone)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[488:498]\n==teaser.logic.archetypebuildings.urbanrenet.est1a:[329:339]\n                roof.name = key\n                roof.tilt = value[0]\n                roof.orientation = value[1]\n\n        for key, value in self.ground_floor_names.items():\n\n            self.outer_area[value[1]] = self._est_ground_floor_area\n\n            for zone in self.thermal_zones:\n                ground_floor = GroundFloor(zone)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.custom.institute4:[177:184]\n==teaser.logic.archetypebuildings.urbanrenet.est1b:[98:105]\n                                         name,\n                                         year_of_construction,\n                                         number_of_floors,\n                                         height_of_floors,\n                                         net_leased_area,\n                                         with_ahu,\n                                         internal_gains_mode,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.custom.institute8:[177:184]\n==teaser.logic.archetypebuildings.urbanrenet.est8a:[96:103]\n            name,\n            year_of_construction,\n            number_of_floors,\n            height_of_floors,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_620:[244:252]\n==teaser.examples.verification.verification_ASHRAE_140_900:[243:251]\n    out_wall_west.orientation = 270.0\n    out_wall_west.tilt = 90.0\n    out_wall_west.inner_convection = 3.16\n    out_wall_west.outer_convection = 24.67\n    out_wall_west.inner_radiation = 5.13\n    out_wall_west.outer_radiation = 4.63\n\n    layer_oww1 = Layer(parent=out_wall_west, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_620:[204:212]\n==teaser.examples.verification.verification_ASHRAE_140_900:[203:211]\n    out_wall_south.orientation = 180.0\n    out_wall_south.tilt = 90.0\n    out_wall_south.inner_convection = 3.16\n    out_wall_south.outer_convection = 24.67\n    out_wall_south.inner_radiation = 5.13\n    out_wall_south.outer_radiation = 4.63\n\n    layer_ows1 = Layer(parent=out_wall_south, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_620:[164:172]\n==teaser.examples.verification.verification_ASHRAE_140_900:[163:171]\n    out_wall_east.orientation = 90.0\n    out_wall_east.tilt = 90.0\n    out_wall_east.inner_convection = 3.16\n    out_wall_east.outer_convection = 24.67\n    out_wall_east.inner_radiation = 5.13\n    out_wall_east.outer_radiation = 4.63\n\n    layer_owe1 = Layer(parent=out_wall_east, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[244:252]\n==teaser.examples.verification.verification_ASHRAE_140_920:[243:251]\n    out_wall_west.orientation = 270.0\n    out_wall_west.tilt = 90.0\n    out_wall_west.inner_convection = 3.16\n    out_wall_west.outer_convection = 24.67\n    out_wall_west.inner_radiation = 5.13\n    out_wall_west.outer_radiation = 4.63\n\n    layer_oww1 = Layer(parent=out_wall_west, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[204:212]\n==teaser.examples.verification.verification_ASHRAE_140_920:[203:211]\n    out_wall_south.orientation = 180.0\n    out_wall_south.tilt = 90.0\n    out_wall_south.inner_convection = 3.16\n    out_wall_south.outer_convection = 24.67\n    out_wall_south.inner_radiation = 5.13\n    out_wall_south.outer_radiation = 4.63\n\n    layer_ows1 = Layer(parent=out_wall_south, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[164:172]\n==teaser.examples.verification.verification_ASHRAE_140_920:[163:171]\n    out_wall_east.orientation = 90.0\n    out_wall_east.tilt = 90.0\n    out_wall_east.inner_convection = 3.16\n    out_wall_east.outer_convection = 24.67\n    out_wall_east.inner_radiation = 5.13\n    out_wall_east.outer_radiation = 4.63\n\n    layer_owe1 = Layer(parent=out_wall_east, id=0)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_VDI_6007_room1:[37:48]\n==teaser.examples.verification.verification_VDI_6007_room3:[39:50]\n    print(\"area_iw: \", prj.buildings[0].thermal_zones[0].model_attr.area_iw,\n          \"m2 ---\", \"Rouvel: 75.5 m2\")\n    print(\"alpha_weight_conv_iw: \",\n          prj.buildings[0].thermal_zones[0].model_attr.alpha_conv_inner_iw,\n          \"W/(m2*K) ---\", \"Rouvel: 2.236423594 W/(m2*K)\")\n\n    \"\"\"\n    parameters outer wall Typraum L\n    \"\"\"\n    print(\"\\nParameters for outer wall\")\n    print(\"r_rest_ow\", prj.buildings[0].thermal_zones[0].model_attr.r_rest_ow,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[32:39]\n==teaser.logic.buildingobjects.useconditions:[404:411]\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[27:34]\n==teaser.logic.buildingobjects.useconditions:[409:416]\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[39:47]\n==teaser.logic.buildingobjects.useconditions:[364:371]\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n    ]\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.data.output.aixlib_output:[128:134]\n==teaser.data.output.besmod_output:[153:159]\n    modelica_output.create_package(\n        path=path,\n        name=prj.name,\n        uses=uses)\n    modelica_output.create_package_order(\n        path=path,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.data.output.buildingelement_output:[145:152]\n==teaser.data.output.teaserjson_output:[374:381]\n    layer_dict = collections.OrderedDict()\n    for layer in element.layer:\n\n        layer_dict[layer.id] = collections.OrderedDict()\n        layer_dict[layer.id][\"thickness\"] = layer.thickness\n        layer_dict[layer.id][\"material\"] = collections.OrderedDict()\n        layer_dict[layer.id][\"material\"][\"name\"] = layer.material.name",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.data.output.buildingelement_output:[115:122]\n==teaser.data.output.teaserjson_output:[344:351]\n        wall_out[\"outer_radiation\"] = element.outer_radiation\n        wall_out[\"outer_convection\"] = element.outer_convection\n        wall_out[\"g_value\"] = element.g_value\n        wall_out[\"a_conv\"] = element.a_conv\n        wall_out[\"shading_g_total\"] = element.shading_g_total\n        wall_out[\"shading_max_irr\"] = element.shading_max_irr\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[678:685]\n==teaser.logic.buildingobjects.calculation.two_element:[989:996]\n        outer_walls = (\n            self.thermal_zone.outer_walls\n            + self.thermal_zone.ground_floors\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.find_izes_outer()\n        )\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[480:487]\n==teaser.logic.buildingobjects.calculation.two_element:[409:416]\n        outer_walls = (\n            self.thermal_zone.outer_walls\n            + self.thermal_zone.ground_floors\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.find_izes_outer()\n        )\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[347:354]\n==teaser.logic.buildingobjects.calculation.two_element:[574:581]\n        outer_walls = (\n            self.thermal_zone.outer_walls\n            + self.thermal_zone.ground_floors\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.find_izes_outer()\n        )\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1719:1727]\n==teaser.logic.buildingobjects.calculation.one_element:[962:970]\n        self.heat_load = 0.0\n\n        if self.thermal_zone.parent.parent.t_soil_mode == 2:\n            t_ground = self.thermal_zone.t_ground \\\n                       - self.thermal_zone.t_ground_amplitude\n        else:\n            t_ground = self.thermal_zone.t_ground\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[863:870]\n==teaser.logic.buildingobjects.calculation.three_element:[1171:1178]\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.windows\n        )\n\n        tilt_orient = []\n        for element in outer_elements:\n            tilt_orient.append((element.orientation, element.tilt))",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[842:849]\n==teaser.logic.buildingobjects.calculation.three_element:[1191:1198]\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.windows\n        )\n\n        tilt_orient = []\n        for element in outer_elements:\n            tilt_orient.append((element.orientation, element.tilt))",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[350:357]\n==teaser.logic.buildingobjects.calculation.three_element:[479:486]\n            + self.thermal_zone.rooftops\n            + self.thermal_zone.find_izes_outer()\n        )\n\n        for out_wall in outer_walls:\n            out_wall.calc_equivalent_res(t_bt=self.t_bt_layer)\n            out_wall.calc_ua_value()",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[1085:1091]\n==teaser.logic.buildingobjects.calculation.three_element:[466:472]\n        self.n_outer = 0\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[335:341]\n==teaser.logic.buildingobjects.calculation.three_element:[1457:1476]\n        self.n_outer = 0\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0\n\n    @property\n    def nzbs_for_iw(self):\n        \"\"\"returns borders to neighboured zones to be considered as inner walls\n\n        Returns\n        -------\n        value : list\n            list of those interzonal elements that are NOT to be treated as\n            'outer_ordered' depending on their 'interzonal_type_export'\n            attribute\n\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1553:1563]\n==teaser.logic.buildingobjects.calculation.four_element:[1381:1391]\n                wall.wf_out = wall.ua_value / (self.ua_value_ow + self.ua_value_win)\n\n            for win in self.thermal_zone.windows:\n                win.wf_out = win.ua_value / (self.ua_value_ow + self.ua_value_win)\n\n            for rt in self.thermal_zone.rooftops:\n                rt.wf_out = rt.ua_value / self.ua_value_rt\n\n        elif self.merge_windows is False:\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[862:873]\n==teaser.logic.buildingobjects.calculation.four_element:[816:827]\n            )\n        ) / self.area_ow\n\n        self.alpha_conv_inner_ow = 1 / (self.r_conv_inner_ow * self.area_ow)\n        self.alpha_rad_inner_ow = 1 / (self.r_rad_inner_ow * self.area_ow)\n        self.alpha_comb_inner_ow = 1 / (self.r_comb_inner_ow * self.area_ow)\n\n        # values facing the ambient\n        # ground floor does not have any coefficients on ambient side\n\n        self.r_conv_outer_ow = 1 / (",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[791:797]\n==teaser.logic.buildingobjects.calculation.four_element:[740:746]\n                    c1_before = element_list[wall_count].c1_korr\n                else:\n                    c1_before = element_list[wall_count].c1\n            else:\n                r1_before = r1\n                c1_before = c1",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1400:1415]\n==teaser.logic.buildingobjects.calculation.three_element:[1137:1152]\n        else:\n            raise ValueError(\"specify merge window method correctly\")\n\n    def _calc_mean_values(self):\n        \"\"\"Calculates mean values for inner and outer elements\n\n        This function calculates mean values inside the thermal zone (e.g.\n        the mean value for coefficient of radiative heat transfer between\n        inner and outer walls\n        \"\"\"\n\n        self.alpha_rad_inner_mean = (\n            self.area_ow * self.alpha_rad_inner_ow\n            + self.area_win * self.alpha_rad_inner_win\n            + self.area_gf * self.alpha_rad_inner_gf",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1339:1361]\n==teaser.logic.buildingobjects.calculation.three_element:[1077:1114]\n        omega = 2 * math.pi / 86400 / self.t_bt\n\n        inner_walls = (\n                self.thermal_zone.inner_walls\n                + self.thermal_zone.floors\n                + self.thermal_zone.ceilings\n                + self.nzbs_for_iw\n        )\n\n        for in_wall in inner_walls:\n            in_wall.calc_equivalent_res()\n            in_wall.calc_ua_value()\n\n        if 0 < len(inner_walls) <= 1:\n            # only one inner wall, no need to calculate chain matrix\n            self.r1_iw = inner_walls[0].r1\n            self.c1_iw = inner_walls[0].c1_korr\n        elif len(inner_walls) > 1:\n            # more than one inner wall, calculate chain matrix\n            self.r1_iw, self.c1_iw = self._calc_parallel_connection(\n                inner_walls, omega, mode='iw'\n            )",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1436:1444]\n==teaser.logic.buildingobjects.calculation.one_element:[843:859]\n            + self.thermal_zone.windows\n        )\n\n        tilt_orient = []\n        for element in outer_elements:\n            tilt_orient.append((element.orientation, element.tilt))\n        self.n_outer = len(list(set(tilt_orient)))\n\n    def _fill_zone_lists(self):\n        \"\"\"Fills lists like weightfactors and tilt, orientation\n\n        Fills the lists of a zone  according to orientation and tilt of the\n        zone. Therefore it compares orientation and tilt of all outer\n        elements and then creates lists for zone weightfactors, orientation,\n        tilt, ares and sunblinds.\"\"\"\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.material:[317:323]\n==teaser.logic.buildingobjects.thermalzone:[763:769]\n        elif value is None:\n            pass\n        else:\n            try:\n                value = float(value)\n            except:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[539:545]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[475:481]\n                        data_class=self.parent.data,\n                    )\n                    rt.name = key\n                    rt.tilt = value[0]\n                    rt.orientation = value[1]\n                    rt.area = (",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[521:527]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[493:499]\n                        data_class=self.parent.data,\n                    )\n                    rt.name = key\n                    rt.tilt = value[0]\n                    rt.orientation = value[1]\n                    rt.area = (",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[503:509]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[439:445]\n                        data_class=self.parent.data,\n                    )\n                    gf.name = key\n                    gf.tilt = value[0]\n                    gf.orientation = value[1]\n                    gf.area = (",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[485:491]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[457:463]\n                        data_class=self.parent.data,\n                    )\n                    gf.name = key\n                    gf.tilt = value[0]\n                    gf.orientation = value[1]\n                    gf.area = (",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[467:473]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[404:410]\n                        data_class=self.parent.data,\n                    )\n                    window.name = key\n                    window.tilt = value[0]\n                    window.orientation = value[1]\n                    window.area = (",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[445:451]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[421:427]\n                        data_class=self.parent.data,\n                    )\n                    window.name = key\n                    window.tilt = value[0]\n                    window.orientation = value[1]\n                    window.area = (",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[423:429]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[370:376]\n                        data_class=self.parent.data,\n                    )\n                    outer_wall.name = key\n                    outer_wall.tilt = value[0]\n                    outer_wall.orientation = value[1]\n                    outer_wall.area = (",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[406:412]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[387:393]\n                        data_class=self.parent.data,\n                    )\n                    outer_wall.name = key\n                    outer_wall.tilt = value[0]\n                    outer_wall.orientation = value[1]\n                    outer_wall.area = (",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[532:541]\n==teaser.logic.archetypebuildings.urbanrenet.est1a:[364:373]\n                    ceiling.name = key\n                    ceiling.tilt = value[0]\n                    ceiling.orientation = value[1]\n                    # zone.inner_walls.append(ceiling)\n\n            for key, value in self.floor_names.items():\n\n                for zone in self.thermal_zones:\n                    floor = Floor(zone)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[503:511]\n==teaser.logic.archetypebuildings.urbanrenet.est1a:[341:349]\n                ground_floor.name = key\n                ground_floor.tilt = value[0]\n                ground_floor.orientation = value[1]\n\n        for key, value in self.inner_wall_names.items():\n\n            for zone in self.thermal_zones:\n                inner_wall = InnerWall(zone)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[8:15]\n==teaser.logic.archetypebuildings.urbanrenet.est1a:[11:18]\nfrom teaser.logic.buildingobjects.buildingphysics.innerwall import InnerWall\nfrom teaser.logic.buildingobjects.buildingphysics.outerwall import OuterWall\nfrom teaser.logic.buildingobjects.buildingphysics.rooftop import Rooftop\nfrom teaser.logic.buildingobjects.buildingphysics.window import Window\nfrom teaser.logic.buildingobjects.thermalzone import ThermalZone\nimport teaser.data.utilities as datahandling\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.office:[194:200]\n==teaser.logic.archetypebuildings.residential:[140:146]\n            parent,\n            name,\n            year_of_construction,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.nonresidential:[140:146]\n==teaser.logic.archetypebuildings.urbanrenet.est1a:[151:157]\n            parent,\n            name,\n            year_of_construction,\n            net_leased_area,\n            with_ahu,\n            internal_gains_mode,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_620:[302:309]\n==teaser.examples.verification.verification_ASHRAE_140_900:[301:308]\n    material_iwf2 = Material(layer_iwf2)\n    material_iwf2.name = \"Insulation\"\n    material_iwf2.density = 0.000000000001  # 0.0001, as small as possible\n    material_iwf2.heat_capac = 0.000000000001  # 0.0001, as small as possible\n    material_iwf2.thermal_conduc = 0.04\n\n    win_1 = Window(parent=tz)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_VDI_6007_room3:[59:65]\n==teaser.examples.verification.verification_VDI_6007_room8:[60:66]\n    print(\"alpha_conv_inner_ow: \",\n          prj.buildings[0].thermal_zones[0].model_attr.alpha_conv_inner_ow,\n          \"W/(m2*K) ---\", \"Rouvel: 2.7 W/(m2*K)\")\n    print(\"alpha_comb_outer_ow: \",\n          prj.buildings[0].thermal_zones[0].model_attr.alpha_comb_outer_ow,\n          \"W/(m2*K) ---\", \"Rouvel: 25.0 W/(m2*K)\")",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_ASHRAE_140_600:[302:309]\n==teaser.examples.verification.verification_ASHRAE_140_920:[301:308]\n    material_iwf2 = Material(layer_iwf2)\n    material_iwf2.name = \"Insulation\"\n    material_iwf2.density = 0.000000000001  # 0.0001, as small as possible\n    material_iwf2.heat_capac = 0.000000000001  # 0.0001, as small as possible\n    material_iwf2.thermal_conduc = 0.04\n\n    win_1 = Window(parent=tz)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_VDI_6007_room1:[17:26]\n==teaser.examples.verification.verification_VDI_6007_room3:[20:29]\n    prj.buildings[0].calc_building_parameter(\n        number_of_elements=2,\n        merge_windows=True,\n        used_library='AixLib')\n\n    return prj\n\n\nif __name__ == \"__main__\":",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[33:39]\n==teaser.logic.buildingobjects.useconditions:[404:410]\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[27:33]\n==teaser.logic.buildingobjects.useconditions:[410:416]\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[39:45]\n==teaser.logic.buildingobjects.useconditions:[347:353]\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[21:27]\n==teaser.logic.buildingobjects.useconditions:[346:352]\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e11_export_besmod_models:[83:90]\n==teaser.examples.e3_export_ibpsa_models:[40:50]\n        os.path.join(\n            \"data\",\n            \"input\",\n            \"inputdata\",\n            \"weatherdata\",\n            \"DEU_BW_Mannheim_107290_TRY2010_12_Jahr_BBSR.mos\"))\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e9_building_data_import_from_excel:[620:626]\n==teaser.project:[117:123]\n        \"data\",\n        \"input\",\n        \"inputdata\",\n        \"weatherdata\",\n        \"DEU_BW_Mannheim_107290_TRY2010_12_Jahr_BBSR.mos\",\n    )",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.outerwall:[157:169]\n==teaser.logic.buildingobjects.buildingphysics.window:[226:238]\n        return self.__parent\n\n    @parent.setter\n    def parent(self, value):\n        if value is not None:\n\n            ass_error_1 = \"Parent has to be an instance of ThermalZone()\"\n\n            assert type(value).__name__ == \"ThermalZone\", ass_error_1\n\n            self.__parent = value\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.door:[152:160]\n==teaser.logic.buildingobjects.buildingphysics.window:[165:182]\n        self._tilt = 90.0\n        self._inner_convection = 2.7\n        self._inner_radiation = 5.0\n        self._outer_convection = 20.0\n        self._outer_radiation = 5.0\n\n    @property\n    def parent(self):",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.door:[160:172]\n==teaser.logic.buildingobjects.buildingphysics.interzonalwall:[308:320]\n        return self.__parent\n\n    @parent.setter\n    def parent(self, value):\n        if value is not None:\n\n            ass_error_1 = \"Parent has to be an instance of ThermalZone()\"\n\n            assert type(value).__name__ == \"ThermalZone\", ass_error_1\n\n            self.__parent = value\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[699:709]\n==teaser.logic.buildingobjects.calculation.two_element:[463:473]\n        if len(self.thermal_zone.windows) < 1:\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no windows have been defined.\"\n            )\n        else:\n            self._sum_window_elements()",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[710:715]\n==teaser.logic.buildingobjects.calculation.two_element:[478:483]\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[700:705]\n==teaser.logic.buildingobjects.calculation.two_element:[453:458]\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[689:694]\n==teaser.logic.buildingobjects.calculation.two_element:[464:469]\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1992:2009]\n==teaser.logic.buildingobjects.calculation.two_element:[399:404]\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0\n\n    @property\n    def nzbs_for_iw(self):\n        \"\"\"returns borders to neighboured zones to be considered as inner walls\n\n        Returns\n        -------\n        value : list\n            list of those interzonal elements that are to be treated as\n            'inner' depending on their 'interzonal_type_export' attribute\n\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.aixlib:[316:335]\n==teaser.logic.buildingobjects.calculation.ibpsa:[120:139]\n            export.to_csv(f, sep=\"\\t\", header=False, index_label=False)\n\n    def _delete_file(self, path):\n        \"\"\"Delete a file before new information is written to it.\n\n        If a building with the exact name and project name is generated, we need to make\n        sure to delete the old information in the text files. This helper function is a\n        wrapper to delete a file with given filepath.\n\n        Parameters:\n        -----------\n        path : str\n            Absolute path to the file to be deleted.\n\n        \"\"\"\n        try:\n            os.remove(path)\n        except OSError:\n            pass",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.aixlib:[129:135]\n==teaser.logic.buildingobjects.calculation.ibpsa:[77:83]\n        if path is None:\n            path = utilities.get_default_path()\n        else:\n            pass\n\n        utilities.create_path(path)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.three_element:[1137:1151]\n==teaser.logic.buildingobjects.calculation.two_element:[1020:1034]\n        else:\n            raise ValueError(\"specify merge window method correctly\")\n\n    def _calc_mean_values(self):\n        \"\"\"Calculates mean values for inner and outer elements\n\n        This function calculates mean values inside the thermal zone (e.g.\n        the mean value for coefficient of radiative heat transfer between\n        inner and outer walls\n        \"\"\"\n\n        self.alpha_rad_inner_mean = (\n            self.area_ow * self.alpha_rad_inner_ow\n            + self.area_win * self.alpha_rad_inner_win",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1466:1472]\n==teaser.logic.buildingobjects.calculation.three_element:[1077:1083]\n        omega = 2 * math.pi / 86400 / self.t_bt\n\n        inner_walls = (\n            self.thermal_zone.inner_walls\n            + self.thermal_zone.floors\n            + self.thermal_zone.ceilings",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[699:720]\n==teaser.logic.buildingobjects.calculation.three_element:[533:554]\n        if len(self.thermal_zone.windows) < 1:\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no windows have been defined.\"\n            )\n        else:\n            self._sum_window_elements()\n        if len(self.thermal_zone.ground_floors) < 1:\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no ground floors have been defined.\"\n            )\n        else:\n            self._sum_ground_floor_elements()\n            self._calc_ground_floor_elements()",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[675:680]\n==teaser.logic.buildingobjects.calculation.three_element:[559:564]\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[621:630]\n==teaser.logic.buildingobjects.calculation.three_element:[467:472]\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0\n\n    def calc_attributes(self):\n        \"\"\"Calls all necessary function to calculate model attributes\"\"\"\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[797:805]\n==teaser.logic.buildingobjects.calculation.three_element:[1129:1137]\n        elif self.merge_windows is False:\n\n            for wall in outer_walls:\n                wall.wf_out = wall.ua_value / self.ua_value_ow\n\n            for win in self.thermal_zone.windows:\n                win.wf_out = win.ua_value / self.ua_value_win\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.one_element:[785:793]\n==teaser.logic.buildingobjects.calculation.three_element:[1121:1129]\n        if self.merge_windows is True:\n\n            for wall in outer_walls:\n                wall.wf_out = wall.ua_value / (self.ua_value_ow + self.ua_value_win)\n\n            for win in self.thermal_zone.windows:\n                win.wf_out = win.ua_value / (self.ua_value_ow + self.ua_value_win)\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1989:2011]\n==teaser.logic.buildingobjects.calculation.four_element:[1784:1807]\n        self.alpha_rad_inner_mean = 0.0\n        self.n_outer = 0\n        self.n_rt = 0\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0\n\n    @property\n    def nzbs_for_iw(self):\n        \"\"\"returns borders to neighboured zones to be considered as inner walls\n\n        Returns\n        -------\n        value : list\n            list of those interzonal elements that are NOT to be treated as\n            'outer_ordered' depending on their 'interzonal_type_export'\n            attribute\n\n        \"\"\"\n        elements = []\n        for i in self.thermal_zone.interzonal_elements:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[1627:1633]\n==teaser.logic.buildingobjects.calculation.four_element:[1463:1469]\n        tilt_orient = []\n        for element in outer_elements:\n            tilt_orient.append((element.orientation, element.tilt))\n        tilt_orient = list(set(tilt_orient))\n\n        for i in tilt_orient:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.five_element:[699:734]\n==teaser.logic.buildingobjects.calculation.four_element:[652:687]\n        if len(self.thermal_zone.windows) < 1:\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no windows have been defined.\"\n            )\n        else:\n            self._sum_window_elements()\n        if len(self.thermal_zone.ground_floors) < 1:\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no ground floors have been defined.\"\n            )\n        else:\n            self._sum_ground_floor_elements()\n            self._calc_ground_floor_elements()\n        if len(self.thermal_zone.rooftops) < 1:\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name\n                + \", no rooftops have been defined.\"\n            )\n        else:\n            self._sum_rooftop_elements()\n            self._calc_rooftop_elements()\n        if (\n                len(self.thermal_zone.outer_walls) >= 1\n                or len(self.thermal_zone.windows) >= 1",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[693:698]\n==teaser.logic.buildingobjects.calculation.three_element:[544:549]\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[674:679]\n==teaser.logic.buildingobjects.calculation.three_element:[534:539]\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[663:668]\n==teaser.logic.buildingobjects.calculation.three_element:[523:528]\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1585:1596]\n==teaser.logic.buildingobjects.calculation.one_element:[984:995]\n        self.heat_load = \\\n            self.heat_load_outside_factor \\\n            * (self.thermal_zone.t_inside - self.thermal_zone.t_outside) \\\n            + self.heat_load_ground_factor \\\n            * (self.thermal_zone.t_inside - t_ground)\n\n    def set_calc_default(self):\n        \"\"\"sets default calculation parameters\n        \"\"\"\n\n        # Attributes for outer walls (OuterWall, Rooftop, GroundFloor)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1400:1414]\n==teaser.logic.buildingobjects.calculation.one_element:[809:823]\n        else:\n            raise ValueError(\"specify merge window method correctly\")\n\n    def _calc_mean_values(self):\n        \"\"\"Calculates mean values for inner and outer elements\n\n        This function calculates mean values inside the thermal zone (e.g.\n        the mean value for coefficient of radiative heat transfer between\n        inner and outer walls\n        \"\"\"\n\n        self.alpha_rad_inner_mean = (\n            self.area_ow * self.alpha_rad_inner_ow\n            + self.area_win * self.alpha_rad_inner_win",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1158:1165]\n==teaser.logic.buildingobjects.calculation.one_element:[685:692]\n        if 0 < len(outer_walls) <= 1:\n            # only one outer wall, no need to calculate chain matrix\n            self.r1_ow = outer_walls[0].r1\n            self.c1_ow = outer_walls[0].c1_korr\n        elif len(outer_walls) > 1:\n            # more than one outer wall, calculate chain matrix\n            self.r1_ow, self.c1_ow = self._calc_parallel_connection(",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[653:658]\n==teaser.logic.buildingobjects.calculation.one_element:[396:401]\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[642:647]\n==teaser.logic.buildingobjects.calculation.one_element:[382:387]\n            warnings.warn(\n                \"For thermal zone \"\n                + self.thermal_zone.name\n                + \" in building \"\n                + self.thermal_zone.parent.name",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[1787:1805]\n==teaser.logic.buildingobjects.calculation.one_element:[336:341]\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0\n\n    @property\n    def nzbs_for_iw(self):\n        \"\"\"returns borders to neighboured zones to be considered as inner walls\n\n        Returns\n        -------\n        value : list\n            list of those interzonal elements that are NOT to be treated as\n            'outer_ordered' depending on their 'interzonal_type_export'\n            attribute\n\n        \"\"\"",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[589:594]\n==teaser.logic.buildingobjects.calculation.one_element:[1086:1091]\n        self.facade_areas = []\n        self.tilt_facade = []\n        self.orientation_facade = []\n        self.heat_load = 0.0\n        self.cool_load = 0.0",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.calculation.four_element:[387:395]\n==teaser.logic.buildingobjects.calculation.one_element:[238:246]\n        self.internal_id = random.random()\n\n        self.thermal_zone = thermal_zone\n        self.merge_windows = merge_windows\n        self.t_bt = t_bt\n        self.t_bt_layer = t_bt_layer\n\n        # Attributes for outer walls (OuterWall, Rooftop, GroundFloor)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.buildingelement:[617:630]\n==teaser.logic.buildingobjects.thermalzone:[756:769]\n        return self._area\n\n    @area.setter\n    def area(self, value):\n\n        if isinstance(value, float):\n            pass\n        elif value is None:\n            pass\n        else:\n            try:\n                value = float(value)\n            except:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.buildingelement:[574:581]\n==teaser.logic.buildingobjects.thermalzone:[843:850]\n        if isinstance(value, float):\n            pass\n        elif value is None:\n            pass\n        else:\n            try:\n                value = float(value)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.buildingelement:[550:557]\n==teaser.logic.buildingobjects.thermalzone:[824:831]\n        if isinstance(value, float):\n            pass\n        elif value is None:\n            pass\n        else:\n            try:\n                value = float(value)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.buildingelement:[526:533]\n==teaser.logic.buildingobjects.thermalzone:[798:805]\n        if isinstance(value, float):\n            pass\n        elif value is None:\n            pass\n        else:\n            try:\n                value = float(value)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.buildingelement:[526:534]\n==teaser.logic.buildingobjects.thermalzone:[761:769]\n        if isinstance(value, float):\n            pass\n        elif value is None:\n            pass\n        else:\n            try:\n                value = float(value)\n            except:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.buildingelement:[472:477]\n==teaser.logic.buildingobjects.thermalzone:[762:767]\n            pass\n        elif value is None:\n            pass\n        else:\n            try:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.material:[341:346]\n==teaser.logic.buildingobjects.thermalzone:[764:769]\n            pass\n        else:\n            try:\n                value = float(value)\n            except:",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.buildingobjects.buildingphysics.material:[317:322]\n==teaser.logic.buildingobjects.thermalzone:[800:805]\n        elif value is None:\n            pass\n        else:\n            try:\n                value = float(value)",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[195:206]\n==teaser.logic.archetypebuildings.tabula.dk.terracedhouse:[150:161]\n        self.inner_wall_names = {\"InnerWall\": [90.0, 0.0]}\n\n        self.ceiling_names = {\"Ceiling\": [0.0, -1]}\n\n        self.floor_names = {\"Floor\": [0.0, -2]}\n\n        # Rooftop1, Rooftop2, Wall1, Wall2, GroundFloor1, GroundFloor2,\n        # Window1, Window2, Door\n        # Area/ReferenceFloorArea\n        self.facade_estimation_factors = {\n            (2007, 2010): {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.apartmentblock:[144:150]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[178:184]\n        self.door_names = {\"Door\": [90.0, 270]}\n\n        self.window_names_1 = {\n            \"WindowFacadeNorth_1\": [90.0, 0.0],\n            \"WindowFacadeEast_1\": [90.0, 90.0],\n            \"WindowFacadeSouth_1\": [90.0, 180.0],",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.apartmentblock:[120:126]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[148:154]\n        self.zone_area_factors = {\"SingleDwelling\": [1, \"Living\"]}\n\n        self._outer_wall_names_1 = {\n            \"ExteriorFacadeNorth_1\": [90.0, 0.0],\n            \"ExteriorFacadeEast_1\": [90.0, 90.0],\n            \"ExteriorFacadeSouth_1\": [90.0, 180.0],",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.multifamilyhouse:[161:172]\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[198:209]\n        self.inner_wall_names = {\"InnerWall\": [90.0, 0.0]}\n\n        self.ceiling_names = {\"Ceiling\": [0.0, -1]}\n\n        self.floor_names = {\"Floor\": [0.0, -2]}\n\n        # Rooftop1, Rooftop2, Wall1, Wall2, GroundFloor1, GroundFloor2,\n        # Window1, Window2, Door\n        # Area/ReferenceFloorArea\n        self.facade_estimation_factors = {\n            (0, 1859): {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.multifamilyhouse:[146:152]\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[181:187]\n        self.door_names = {\"Door\": [90.0, 270]}\n\n        self.window_names_1 = {\n            \"WindowFacadeNorth_1\": [90.0, 0.0],\n            \"WindowFacadeEast_1\": [90.0, 90.0],\n            \"WindowFacadeSouth_1\": [90.0, 180.0],",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.multifamilyhouse:[122:128]\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[151:157]\n        self.zone_area_factors = {\"SingleDwelling\": [1, \"Living\"]}\n\n        self._outer_wall_names_1 = {\n            \"ExteriorFacadeNorth_1\": [90.0, 0.0],\n            \"ExteriorFacadeEast_1\": [90.0, 90.0],\n            \"ExteriorFacadeSouth_1\": [90.0, 180.0],",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.tabula.de.apartmentblock:[159:170]\n==teaser.logic.archetypebuildings.tabula.de.terracedhouse:[150:161]\n        self.inner_wall_names = {\"InnerWall\": [90.0, 0.0]}\n\n        self.ceiling_names = {\"Ceiling\": [0.0, -1]}\n\n        self.floor_names = {\"Floor\": [0.0, -2]}\n\n        # Rooftop1, Rooftop2, Wall1, Wall2, GroundFloor1, GroundFloor2,\n        # Window1, Window2, Door\n        # Area/ReferenceFloorArea\n        self.facade_estimation_factors = {\n            (1860, 1918): {",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[507:513]\n==teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse:[521:527]\n        for key, value in self.inner_wall_names.items():\n\n            for zone in self.thermal_zones:\n                inner_wall = InnerWall(zone)\n                inner_wall.load_type_element(\n                    year=self.year_of_construction,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[461:466]\n==teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse:[435:440]\n                for zone in self.thermal_zones:\n                    window = Window(zone)\n                    construction = (\n                        \"Waermeschutzverglasung, dreifach\"\n                        if self.construction_data.is_kfw()",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[575:586]\n==teaser.logic.archetypebuildings.urbanrenet.est1a:[401:412]\n        return self._neighbour_buildings\n\n    @neighbour_buildings.setter\n    def neighbour_buildings(self, value):\n        if value is not None:\n            self._neighbour_buildings = value\n        else:\n            self._neighbour_buildings = 0\n\n    @property\n    def number_of_apartments(self):",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling:[443:451]\n==teaser.logic.archetypebuildings.urbanrenet.est1a:[291:299]\n                outer_wall.name = key\n                outer_wall.tilt = value[0]\n                outer_wall.orientation = value[1]\n\n        for key, value in self.window_names.items():\n\n            if value[1] == 0 or value[1] == 180:\n",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.verification.verification_VDI_6007_room1:[54:59]\n==teaser.examples.verification.verification_VDI_6007_room3:[56:61]\n        0].model_attr.area_ow + prj.buildings[0].thermal_zones[\n        0].model_attr.area_win,\n        \"m2 ---\", \"Rouvel: 10.5 m2\")\n    print(\"alpha_conv_inner_ow: \",\n          prj.buildings[0].thermal_zones[0].model_attr.alpha_conv_inner_ow,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[34:39]\n==teaser.logic.buildingobjects.useconditions:[404:409]\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[27:32]\n==teaser.logic.buildingobjects.useconditions:[411:416]\n            1.0,\n            1.0,\n            1.0,\n            1.0,\n            1.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[40:45]\n==teaser.logic.buildingobjects.useconditions:[364:369]\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[39:44]\n==teaser.logic.buildingobjects.useconditions:[365:370]\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[22:27]\n==teaser.logic.buildingobjects.useconditions:[346:351]\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e8_change_boundary_conditions:[21:26]\n==teaser.logic.buildingobjects.useconditions:[348:353]\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e2_export_aixlib_models:[50:55]\n==teaser.project:[1032:1037]\n            os.path.join(\n                \"data\",\n                \"input\",\n                \"inputdata\",\n                \"weatherdata\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e11_export_besmod_models:[83:88]\n==teaser.project:[128:133]\n        os.path.join(\n            \"data\",\n            \"input\",\n            \"inputdata\",\n            \"weatherdata\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "duplicate-code",
            "message": "Similar lines in 2 files\n==teaser.examples.e3_export_ibpsa_models:[40:45]\n==teaser.project:[116:121]\n            os.path.join(\n                \"data\",\n                \"input\",\n                \"inputdata\",\n                \"weatherdata\",",
            "message-id": "R0801"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.urbanrenet.est1a)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.logic.buildingobjects.building -> teaser.logic.buildingobjects.buildingsystems.buildingahu)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.urbanrenet.est8a -> teaser.logic.archetypebuildings.urbanrenet.est1a)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.urbanrenet.est1b -> teaser.logic.archetypebuildings.urbanrenet.est1a)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.urbanrenet.est4b -> teaser.logic.archetypebuildings.urbanrenet.est1a)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.urbanrenet.est7 -> teaser.logic.archetypebuildings.urbanrenet.est1a)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.urbanrenet.est4a -> teaser.logic.archetypebuildings.urbanrenet.est1a)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.urbanrenet.est8b -> teaser.logic.archetypebuildings.urbanrenet.est1a)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.urbanrenet.est5 -> teaser.logic.archetypebuildings.urbanrenet.est1a)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.urbanrenet.est3 -> teaser.logic.archetypebuildings.urbanrenet.est1a)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.urbanrenet.est2 -> teaser.logic.archetypebuildings.urbanrenet.est1a)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.urbanrenet.est6 -> teaser.logic.archetypebuildings.urbanrenet.est1a)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.bmvbs.custom.institute -> teaser.logic.archetypebuildings.bmvbs.office)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.bmvbs.custom.institute8 -> teaser.logic.archetypebuildings.bmvbs.office)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.bmvbs.custom.institute4 -> teaser.logic.archetypebuildings.bmvbs.office)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.tabula.de.multifamilyhouse -> teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.tabula.de.terracedhouse -> teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.tabula.dk.apartmentblock -> teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.tabula.de.apartmentblock -> teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.tabula.dk.terracedhouse -> teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse)",
            "message-id": "R0401"
        },
        {
            "type": "refactor",
            "module": "teaser.data.input.inputdata.weatherdata.__init__",
            "obj": "",
            "line": 1,
            "column": 0,
            "path": "teaser/data/input/inputdata/weatherdata/__init__.py",
            "symbol": "cyclic-import",
            "message": "Cyclic import (teaser.data.utilities -> teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse)",
            "message-id": "R0401"
        }
    ],
    "stats": {
        "bad_names": {
            "argument": 1,
            "attr": 8,
            "klass": 0,
            "class_attribute": 0,
            "class_const": 36,
            "const": 2,
            "inlinevar": 0,
            "function": 2,
            "method": 1,
            "module": 8,
            "variable": 100,
            "typevar": 0,
            "typealias": 0
        },
        "by_module": {
            "teaser": {
                "convention": 2,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 16,
                "warning": 1
            },
            "teaser.project": {
                "convention": 16,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.examples.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.examples.e7_retrofit": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 7,
                "warning": 0
            },
            "teaser.examples.e6_generate_building": {
                "convention": 17,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 125,
                "warning": 1
            },
            "teaser.examples.e5_load": {
                "convention": 5,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 17,
                "warning": 0
            },
            "teaser.examples.e3_export_ibpsa_models": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 15,
                "warning": 0
            },
            "teaser.examples.e4_save": {
                "convention": 4,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 12,
                "warning": 0
            },
            "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps": {
                "convention": 27,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 8,
                "statement": 416,
                "warning": 3
            },
            "teaser.examples.e10_adjust_schedules": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 18,
                "warning": 1
            },
            "teaser.examples.e9_building_data_import_from_excel": {
                "convention": 21,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 4,
                "statement": 216,
                "warning": 0
            },
            "teaser.examples.e1_generate_archetype": {
                "convention": 6,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 14,
                "warning": 1
            },
            "teaser.examples.e8_change_boundary_conditions": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 28,
                "warning": 0
            },
            "teaser.examples.e11_export_besmod_models": {
                "convention": 16,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 28,
                "warning": 0
            },
            "teaser.examples.e2_export_aixlib_models": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 17,
                "warning": 0
            },
            "teaser.examples.verification.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.examples.verification.verification_VDI_6007_room1": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 24,
                "warning": 3
            },
            "teaser.examples.verification.verification_ASHRAE_140_600": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 278,
                "warning": 0
            },
            "teaser.examples.verification.verification_VDI_6007_room3": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 24,
                "warning": 2
            },
            "teaser.examples.verification.verification_ASHRAE_140_620": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 278,
                "warning": 0
            },
            "teaser.examples.verification.verification_ASHRAE_140_900": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 278,
                "warning": 0
            },
            "teaser.examples.verification.verification_VDI_6007_room8": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 28,
                "warning": 2
            },
            "teaser.examples.verification.verification_ASHRAE_140_920": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 278,
                "warning": 0
            },
            "teaser.logic.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.retrofit": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 37,
                "warning": 0
            },
            "teaser.logic.utilities": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 48,
                "warning": 2
            },
            "teaser.logic.archetypebuildings.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.nonresidential": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 1
            },
            "teaser.logic.archetypebuildings.residential": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 1
            },
            "teaser.logic.archetypebuildings.urbanrenet.est8a": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est1b": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est4b": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est7": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est4a": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est8b": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est5": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est3": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est2": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est1a": {
                "convention": 7,
                "error": 8,
                "fatal": 0,
                "info": 0,
                "refactor": 5,
                "statement": 158,
                "warning": 1
            },
            "teaser.logic.archetypebuildings.urbanrenet.est6": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.bmvbs.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling": {
                "convention": 7,
                "error": 8,
                "fatal": 0,
                "info": 0,
                "refactor": 8,
                "statement": 235,
                "warning": 3
            },
            "teaser.logic.archetypebuildings.bmvbs.office": {
                "convention": 5,
                "error": 8,
                "fatal": 0,
                "info": 0,
                "refactor": 7,
                "statement": 189,
                "warning": 2
            },
            "teaser.logic.archetypebuildings.bmvbs.custom.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.bmvbs.custom.institute8": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 13,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.bmvbs.custom.institute4": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 15,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.bmvbs.custom.institute": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 13,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.de.terracedhouse": {
                "convention": 4,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.de.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.de.multifamilyhouse": {
                "convention": 4,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse": {
                "convention": 7,
                "error": 13,
                "fatal": 0,
                "info": 0,
                "refactor": 5,
                "statement": 189,
                "warning": 1
            },
            "teaser.logic.archetypebuildings.tabula.de.apartmentblock": {
                "convention": 4,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.dk.terracedhouse": {
                "convention": 4,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.dk.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse": {
                "convention": 7,
                "error": 13,
                "fatal": 0,
                "info": 0,
                "refactor": 5,
                "statement": 179,
                "warning": 1
            },
            "teaser.logic.archetypebuildings.tabula.dk.apartmentblock": {
                "convention": 4,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.simulation.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.simulation.modelicainfo": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 10,
                "warning": 0
            },
            "teaser.logic.buildingobjects.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.buildingobjects.useconditions": {
                "convention": 23,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 12,
                "statement": 242,
                "warning": 6
            },
            "teaser.logic.buildingobjects.building": {
                "convention": 17,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 4,
                "statement": 321,
                "warning": 4
            },
            "teaser.logic.buildingobjects.thermalzone": {
                "convention": 26,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 391,
                "warning": 14
            },
            "teaser.logic.buildingobjects.calculation.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.buildingobjects.calculation.four_element": {
                "convention": 9,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 20,
                "statement": 549,
                "warning": 4
            },
            "teaser.logic.buildingobjects.calculation.one_element": {
                "convention": 5,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 17,
                "statement": 315,
                "warning": 3
            },
            "teaser.logic.buildingobjects.calculation.three_element": {
                "convention": 5,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 17,
                "statement": 432,
                "warning": 1
            },
            "teaser.logic.buildingobjects.calculation.aixlib": {
                "convention": 15,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 105,
                "warning": 4
            },
            "teaser.logic.buildingobjects.calculation.five_element": {
                "convention": 12,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 23,
                "statement": 673,
                "warning": 9
            },
            "teaser.logic.buildingobjects.calculation.ibpsa": {
                "convention": 5,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 31,
                "warning": 1
            },
            "teaser.logic.buildingobjects.calculation.two_element": {
                "convention": 5,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 17,
                "statement": 383,
                "warning": 2
            },
            "teaser.logic.buildingobjects.buildingphysics.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingphysics.wall": {
                "convention": 7,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 9,
                "statement": 197,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingphysics.ceiling": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 6,
                "warning": 1
            },
            "teaser.logic.buildingobjects.buildingphysics.interzonalfloor": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingphysics.material": {
                "convention": 12,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 161,
                "warning": 11
            },
            "teaser.logic.buildingobjects.buildingphysics.door": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingphysics.buildingelement": {
                "convention": 22,
                "error": 6,
                "fatal": 0,
                "info": 0,
                "refactor": 6,
                "statement": 293,
                "warning": 12
            },
            "teaser.logic.buildingobjects.buildingphysics.groundfloor": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 27,
                "warning": 1
            },
            "teaser.logic.buildingobjects.buildingphysics.interzonalwall": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 5,
                "statement": 79,
                "warning": 1
            },
            "teaser.logic.buildingobjects.buildingphysics.layer": {
                "convention": 7,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 43,
                "warning": 2
            },
            "teaser.logic.buildingobjects.buildingphysics.window": {
                "convention": 7,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 95,
                "warning": 5
            },
            "teaser.logic.buildingobjects.buildingphysics.outerwall": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 43,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingphysics.floor": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 1
            },
            "teaser.logic.buildingobjects.buildingphysics.rooftop": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 26,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingphysics.interzonalceiling": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingphysics.innerwall": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 27,
                "warning": 1
            },
            "teaser.logic.buildingobjects.buildingsystems.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingsystems.buildingahu": {
                "convention": 8,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 59,
                "warning": 0
            },
            "teaser.data.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.data.dataclass": {
                "convention": 8,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 66,
                "warning": 9
            },
            "teaser.data.utilities": {
                "convention": 63,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 103,
                "warning": 0
            },
            "teaser.data.output.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.data.output.teaserjson_output": {
                "convention": 8,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 6,
                "statement": 202,
                "warning": 2
            },
            "teaser.data.output.besmod_output": {
                "convention": 13,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.data.output.material_output": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 26,
                "warning": 3
            },
            "teaser.data.output.usecond_output": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 49,
                "warning": 1
            },
            "teaser.data.output.runUnitTests": {
                "convention": 16,
                "error": 3,
                "fatal": 0,
                "info": 0,
                "refactor": 5,
                "statement": 81,
                "warning": 4
            },
            "teaser.data.output.buildingelement_output": {
                "convention": 5,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 47,
                "warning": 2
            },
            "teaser.data.output.aixlib_output": {
                "convention": 0,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 6,
                "statement": 100,
                "warning": 4
            },
            "teaser.data.output.modelica_output": {
                "convention": 1,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 16,
                "warning": 2
            },
            "teaser.data.output.ibpsa_output": {
                "convention": 3,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 42,
                "warning": 2
            },
            "teaser.data.output.reports.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.data.output.reports.model_report": {
                "convention": 13,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 22,
                "statement": 273,
                "warning": 11
            },
            "teaser.data.input.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.data.input.teaserjson_input": {
                "convention": 11,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 12,
                "statement": 232,
                "warning": 1
            },
            "teaser.data.input.usecond_input": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 37,
                "warning": 0
            },
            "teaser.data.input.material_input_json": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 24,
                "warning": 2
            },
            "teaser.data.input.buildingelement_input_json": {
                "convention": 7,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 47,
                "warning": 3
            },
            "teaser.data.input.inputdata.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.data.input.inputdata.weatherdata.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 376,
                "statement": 0,
                "warning": 0
            }
        },
        "by_msg": {
            "missing-function-docstring": 129,
            "invalid-name": 158,
            "unspecified-encoding": 25,
            "consider-using-with": 3,
            "import-error": 19,
            "line-too-long": 115,
            "too-many-lines": 6,
            "astroid-error": 2,
            "missing-module-docstring": 55,
            "too-many-locals": 17,
            "import-outside-toplevel": 31,
            "reimported": 1,
            "too-many-statements": 32,
            "consider-using-from-import": 28,
            "wrong-import-order": 35,
            "f-string-without-interpolation": 8,
            "consider-using-in": 14,
            "too-many-branches": 22,
            "unused-variable": 7,
            "redefined-outer-name": 9,
            "unidiomatic-typecheck": 3,
            "consider-using-f-string": 27,
            "consider-using-dict-items": 1,
            "pointless-string-statement": 6,
            "implicit-str-concat": 7,
            "unnecessary-comprehension": 1,
            "superfluous-parens": 13,
            "no-else-return": 10,
            "raising-format-tuple": 2,
            "too-many-arguments": 33,
            "super-with-arguments": 36,
            "unnecessary-pass": 2,
            "too-many-instance-attributes": 35,
            "not-an-iterable": 51,
            "attribute-defined-outside-init": 17,
            "too-few-public-methods": 2,
            "trailing-newlines": 1,
            "redefined-builtin": 8,
            "useless-object-inheritance": 15,
            "no-else-break": 1,
            "too-many-nested-blocks": 1,
            "self-assigning-variable": 9,
            "simplifiable-if-statement": 1,
            "no-else-raise": 3,
            "protected-access": 2,
            "too-many-public-methods": 3,
            "raise-missing-from": 34,
            "fixme": 7,
            "consider-using-generator": 66,
            "eval-used": 2,
            "missing-final-newline": 2,
            "undefined-variable": 1,
            "abstract-method": 3,
            "no-member": 2,
            "unsubscriptable-object": 4,
            "unused-import": 2,
            "signature-differs": 1,
            "used-before-assignment": 1,
            "too-many-boolean-expressions": 3,
            "consider-using-sys-exit": 3,
            "consider-iterating-dictionary": 2,
            "use-dict-literal": 19,
            "broad-exception-caught": 1,
            "unused-argument": 1,
            "unnecessary-dunder-call": 2,
            "logging-fstring-interpolation": 1,
            "duplicate-code": 354,
            "cyclic-import": 22
        },
        "code_type_count": {
            "code": 0,
            "comment": 0,
            "docstring": 0,
            "empty": 0,
            "total": 0
        },
        "dependencies": {
            "teaser.examples.e1_generate_archetype": [
                "teaser.examples.e3_export_ibpsa_models",
                "teaser.examples.e7_retrofit",
                "teaser.examples.e2_export_aixlib_models",
                "teaser.examples.e11_export_besmod_models",
                "teaser.examples.e8_change_boundary_conditions",
                "teaser.examples.e4_save"
            ],
            "teaser.project": [
                "teaser.examples.e1_generate_archetype",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.examples.verification.verification_VDI_6007_room8",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_VDI_6007_room3",
                "teaser.examples.e6_generate_building",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.examples.e10_adjust_schedules",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
                "teaser.examples.verification.verification_VDI_6007_room1",
                "teaser.examples.e5_load"
            ],
            "teaser.data.utilities": [
                "teaser.logic.retrofit",
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.data.dataclass",
                "teaser.examples.e6_generate_building",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.data.dataclass": [
                "teaser.examples.e6_generate_building",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.building": [
                "teaser.logic.retrofit",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.buildingobjects.buildingsystems.buildingahu",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.e6_generate_building",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.buildingobjects.thermalzone",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
                "teaser.logic.archetypebuildings.residential",
                "teaser.logic.archetypebuildings.nonresidential"
            ],
            "teaser.logic.buildingobjects.thermalzone": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.e6_generate_building",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.useconditions": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.e6_generate_building",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.buildingphysics.rooftop": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.e6_generate_building",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.buildingphysics.layer": [
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.buildingobjects.buildingphysics.wall",
                "teaser.data.input.buildingelement_input_json",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.e6_generate_building",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
                "teaser.logic.buildingobjects.buildingphysics.buildingelement"
            ],
            "teaser.logic.buildingobjects.buildingphysics.material": [
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.buildingobjects.buildingphysics.wall",
                "teaser.data.input.buildingelement_input_json",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.e6_generate_building",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.buildingphysics.outerwall": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.logic.buildingobjects.buildingphysics.door",
                "teaser.logic.buildingobjects.buildingphysics.rooftop",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.e6_generate_building",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.logic.buildingobjects.buildingphysics.groundfloor",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.buildingobjects.buildingphysics.innerwall": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.buildingobjects.buildingphysics.floor",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.e6_generate_building",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.logic.buildingobjects.buildingphysics.ceiling",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.buildingobjects.buildingphysics.groundfloor": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.e6_generate_building",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.buildingphysics.window": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.e6_generate_building",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.utilities": [
                "teaser.data.output.usecond_output",
                "teaser.logic.buildingobjects.useconditions",
                "teaser.examples.e4_save",
                "teaser.data.output.buildingelement_output",
                "teaser.examples.verification.verification_VDI_6007_room1",
                "teaser.examples.e3_export_ibpsa_models",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
                "teaser.logic.buildingobjects.calculation.aixlib",
                "teaser.data.output.modelica_output",
                "teaser.data.output.ibpsa_output",
                "teaser.examples.e2_export_aixlib_models",
                "teaser.examples.e11_export_besmod_models",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.data.dataclass",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.data.output.material_output",
                "teaser.examples.verification.verification_VDI_6007_room8",
                "teaser.examples.verification.verification_VDI_6007_room3",
                "teaser.data.output.aixlib_output",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.logic.buildingobjects.calculation.ibpsa",
                "teaser.examples.e5_load"
            ],
            "teaser.logic.buildingobjects.buildingphysics.interzonalwall": [
                "teaser.logic.buildingobjects.buildingphysics.interzonalfloor",
                "teaser.logic.buildingobjects.buildingphysics.interzonalceiling",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.buildingphysics.interzonalceiling": [
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.buildingphysics.interzonalfloor": [
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.buildingphysics.floor": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.buildingobjects.buildingphysics.ceiling": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est1a": [
                "teaser.logic.archetypebuildings.urbanrenet.est4b",
                "teaser.logic.archetypebuildings.urbanrenet.est2",
                "teaser.logic.archetypebuildings.urbanrenet.est8a",
                "teaser.logic.archetypebuildings.urbanrenet.est1b",
                "teaser.data.utilities",
                "teaser.logic.archetypebuildings.urbanrenet.est8b",
                "teaser.logic.archetypebuildings.urbanrenet.est3",
                "teaser.logic.archetypebuildings.urbanrenet.est6",
                "teaser.logic.archetypebuildings.urbanrenet.est4a",
                "teaser.logic.archetypebuildings.urbanrenet.est7",
                "teaser.logic.archetypebuildings.urbanrenet.est5"
            ],
            "teaser.logic.archetypebuildings.residential": [
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse"
            ],
            "teaser.logic.archetypebuildings.nonresidential": [
                "teaser.logic.archetypebuildings.bmvbs.office"
            ],
            "teaser.logic.archetypebuildings.bmvbs.office": [
                "teaser.data.utilities",
                "teaser.logic.archetypebuildings.bmvbs.custom.institute",
                "teaser.logic.archetypebuildings.bmvbs.custom.institute8",
                "teaser.data.input.teaserjson_input",
                "teaser.logic.archetypebuildings.bmvbs.custom.institute4"
            ],
            "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse": [
                "teaser.data.utilities",
                "teaser.logic.archetypebuildings.tabula.dk.terracedhouse",
                "teaser.logic.archetypebuildings.tabula.de.multifamilyhouse",
                "teaser.logic.archetypebuildings.tabula.dk.apartmentblock",
                "teaser.data.input.teaserjson_input",
                "teaser.logic.archetypebuildings.tabula.de.terracedhouse",
                "teaser.logic.archetypebuildings.tabula.de.apartmentblock"
            ],
            "teaser.logic.buildingobjects.buildingphysics.door": [
                "teaser.data.input.teaserjson_input",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse"
            ],
            "teaser.data.input.usecond_input": [
                "teaser.logic.buildingobjects.useconditions"
            ],
            "teaser.data.output.usecond_output": [
                "teaser.logic.buildingobjects.useconditions"
            ],
            "teaser.logic.buildingobjects.calculation.aixlib": [
                "teaser.logic.buildingobjects.building"
            ],
            "teaser.logic.buildingobjects.calculation.ibpsa": [
                "teaser.logic.buildingobjects.building"
            ],
            "teaser.logic.buildingobjects.buildingsystems.buildingahu": [
                "teaser.logic.buildingobjects.building",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.buildingobjects.calculation.one_element": [
                "teaser.logic.buildingobjects.thermalzone"
            ],
            "teaser.logic.buildingobjects.calculation.two_element": [
                "teaser.logic.buildingobjects.thermalzone"
            ],
            "teaser.logic.buildingobjects.calculation.three_element": [
                "teaser.logic.buildingobjects.thermalzone"
            ],
            "teaser.logic.buildingobjects.calculation.four_element": [
                "teaser.logic.buildingobjects.thermalzone"
            ],
            "teaser.logic.buildingobjects.calculation.five_element": [
                "teaser.logic.buildingobjects.thermalzone"
            ],
            "teaser.logic.buildingobjects.buildingphysics.buildingelement": [
                "teaser.logic.buildingobjects.buildingphysics.wall",
                "teaser.logic.buildingobjects.buildingphysics.window",
                "teaser.logic.buildingobjects.buildingphysics.interzonalwall"
            ],
            "teaser.data.input.material_input_json": [
                "teaser.data.input.buildingelement_input_json",
                "teaser.logic.buildingobjects.buildingphysics.material"
            ],
            "teaser.data.output.material_output": [
                "teaser.logic.buildingobjects.buildingphysics.material"
            ],
            "teaser.data.input.buildingelement_input_json": [
                "teaser.logic.buildingobjects.buildingphysics.buildingelement"
            ],
            "teaser.data.output.buildingelement_output": [
                "teaser.logic.buildingobjects.buildingphysics.buildingelement"
            ],
            "teaser.logic.buildingobjects.buildingphysics.wall": [
                "teaser.logic.buildingobjects.buildingphysics.outerwall",
                "teaser.logic.buildingobjects.buildingphysics.interzonalwall",
                "teaser.logic.buildingobjects.buildingphysics.innerwall"
            ],
            "teaser.logic.archetypebuildings.bmvbs.custom.institute": [
                "teaser.data.utilities",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.archetypebuildings.bmvbs.custom.institute4": [
                "teaser.data.utilities",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.archetypebuildings.bmvbs.custom.institute8": [
                "teaser.data.utilities",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est1b": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est2": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est3": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est4a": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est4b": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est5": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est6": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est7": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est8a": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est8b": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.tabula.de.terracedhouse": [
                "teaser.data.utilities",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.archetypebuildings.tabula.dk.terracedhouse": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.tabula.de.multifamilyhouse": [
                "teaser.data.utilities",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.archetypebuildings.tabula.de.apartmentblock": [
                "teaser.data.utilities",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.archetypebuildings.tabula.dk.apartmentblock": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling": [
                "teaser.data.utilities",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser": [
                "teaser.data.output.teaserjson_output",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.data.output.modelica_output": [
                "teaser.data.output.aixlib_output",
                "teaser.data.output.ibpsa_output"
            ]
        },
        "duplicated_lines": {
            "nb_duplicated_lines": 0,
            "percent_duplicated_lines": 0.0
        },
        "node_count": {
            "function": 80,
            "klass": 55,
            "method": 435,
            "module": 112
        },
        "undocumented": {
            "function": 14,
            "klass": 0,
            "method": 115,
            "module": 55
        },
        "convention": 580,
        "error": 78,
        "fatal": 2,
        "info": 0,
        "refactor": 724,
        "statement": 9363,
        "warning": 155,
        "global_note": 0,
        "nb_duplicated_lines": 5992,
        "percent_duplicated_lines": 19.33152664859982
    },
    "previous": {
        "bad_names": {
            "argument": 1,
            "attr": 8,
            "klass": 0,
            "class_attribute": 0,
            "class_const": 36,
            "const": 2,
            "inlinevar": 0,
            "function": 2,
            "method": 1,
            "module": 8,
            "variable": 100,
            "typevar": 0,
            "typealias": 0
        },
        "by_module": {
            "teaser": {
                "convention": 2,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 16,
                "warning": 1
            },
            "teaser.project": {
                "convention": 16,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.examples.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.examples.e7_retrofit": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 7,
                "warning": 0
            },
            "teaser.examples.e6_generate_building": {
                "convention": 17,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 125,
                "warning": 1
            },
            "teaser.examples.e5_load": {
                "convention": 5,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 17,
                "warning": 0
            },
            "teaser.examples.e3_export_ibpsa_models": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 15,
                "warning": 0
            },
            "teaser.examples.e4_save": {
                "convention": 4,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 12,
                "warning": 0
            },
            "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps": {
                "convention": 27,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 8,
                "statement": 416,
                "warning": 3
            },
            "teaser.examples.e10_adjust_schedules": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 18,
                "warning": 1
            },
            "teaser.examples.e9_building_data_import_from_excel": {
                "convention": 21,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 4,
                "statement": 216,
                "warning": 0
            },
            "teaser.examples.e1_generate_archetype": {
                "convention": 6,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 14,
                "warning": 1
            },
            "teaser.examples.e8_change_boundary_conditions": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 28,
                "warning": 0
            },
            "teaser.examples.e11_export_besmod_models": {
                "convention": 16,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 28,
                "warning": 0
            },
            "teaser.examples.e2_export_aixlib_models": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 17,
                "warning": 0
            },
            "teaser.examples.verification.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.examples.verification.verification_VDI_6007_room1": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 24,
                "warning": 3
            },
            "teaser.examples.verification.verification_ASHRAE_140_600": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 278,
                "warning": 0
            },
            "teaser.examples.verification.verification_VDI_6007_room3": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 24,
                "warning": 2
            },
            "teaser.examples.verification.verification_ASHRAE_140_620": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 278,
                "warning": 0
            },
            "teaser.examples.verification.verification_ASHRAE_140_900": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 278,
                "warning": 0
            },
            "teaser.examples.verification.verification_VDI_6007_room8": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 28,
                "warning": 2
            },
            "teaser.examples.verification.verification_ASHRAE_140_920": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 278,
                "warning": 0
            },
            "teaser.logic.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.retrofit": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 37,
                "warning": 0
            },
            "teaser.logic.utilities": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 48,
                "warning": 2
            },
            "teaser.logic.archetypebuildings.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.nonresidential": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 1
            },
            "teaser.logic.archetypebuildings.residential": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 1
            },
            "teaser.logic.archetypebuildings.urbanrenet.est8a": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est1b": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est4b": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est7": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est4a": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est8b": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est5": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est3": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est2": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.urbanrenet.est1a": {
                "convention": 7,
                "error": 8,
                "fatal": 0,
                "info": 0,
                "refactor": 5,
                "statement": 158,
                "warning": 1
            },
            "teaser.logic.archetypebuildings.urbanrenet.est6": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.bmvbs.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling": {
                "convention": 7,
                "error": 8,
                "fatal": 0,
                "info": 0,
                "refactor": 8,
                "statement": 235,
                "warning": 3
            },
            "teaser.logic.archetypebuildings.bmvbs.office": {
                "convention": 5,
                "error": 8,
                "fatal": 0,
                "info": 0,
                "refactor": 7,
                "statement": 189,
                "warning": 2
            },
            "teaser.logic.archetypebuildings.bmvbs.custom.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.bmvbs.custom.institute8": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 13,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.bmvbs.custom.institute4": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 15,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.bmvbs.custom.institute": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 13,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.de.terracedhouse": {
                "convention": 4,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.de.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.de.multifamilyhouse": {
                "convention": 4,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse": {
                "convention": 7,
                "error": 13,
                "fatal": 0,
                "info": 0,
                "refactor": 5,
                "statement": 189,
                "warning": 1
            },
            "teaser.logic.archetypebuildings.tabula.de.apartmentblock": {
                "convention": 4,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.dk.terracedhouse": {
                "convention": 4,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.dk.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse": {
                "convention": 7,
                "error": 13,
                "fatal": 0,
                "info": 0,
                "refactor": 5,
                "statement": 179,
                "warning": 1
            },
            "teaser.logic.archetypebuildings.tabula.dk.apartmentblock": {
                "convention": 4,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.simulation.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.simulation.modelicainfo": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 10,
                "warning": 0
            },
            "teaser.logic.buildingobjects.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.buildingobjects.useconditions": {
                "convention": 23,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 12,
                "statement": 242,
                "warning": 6
            },
            "teaser.logic.buildingobjects.building": {
                "convention": 17,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 4,
                "statement": 321,
                "warning": 4
            },
            "teaser.logic.buildingobjects.thermalzone": {
                "convention": 26,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 391,
                "warning": 14
            },
            "teaser.logic.buildingobjects.calculation.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.buildingobjects.calculation.four_element": {
                "convention": 9,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 20,
                "statement": 549,
                "warning": 4
            },
            "teaser.logic.buildingobjects.calculation.one_element": {
                "convention": 5,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 17,
                "statement": 315,
                "warning": 3
            },
            "teaser.logic.buildingobjects.calculation.three_element": {
                "convention": 5,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 17,
                "statement": 432,
                "warning": 1
            },
            "teaser.logic.buildingobjects.calculation.aixlib": {
                "convention": 15,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 105,
                "warning": 4
            },
            "teaser.logic.buildingobjects.calculation.five_element": {
                "convention": 12,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 23,
                "statement": 673,
                "warning": 9
            },
            "teaser.logic.buildingobjects.calculation.ibpsa": {
                "convention": 5,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 31,
                "warning": 1
            },
            "teaser.logic.buildingobjects.calculation.two_element": {
                "convention": 5,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 17,
                "statement": 383,
                "warning": 2
            },
            "teaser.logic.buildingobjects.buildingphysics.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingphysics.wall": {
                "convention": 7,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 9,
                "statement": 197,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingphysics.ceiling": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 6,
                "warning": 1
            },
            "teaser.logic.buildingobjects.buildingphysics.interzonalfloor": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingphysics.material": {
                "convention": 12,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 161,
                "warning": 11
            },
            "teaser.logic.buildingobjects.buildingphysics.door": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingphysics.buildingelement": {
                "convention": 22,
                "error": 6,
                "fatal": 0,
                "info": 0,
                "refactor": 6,
                "statement": 293,
                "warning": 12
            },
            "teaser.logic.buildingobjects.buildingphysics.groundfloor": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 27,
                "warning": 1
            },
            "teaser.logic.buildingobjects.buildingphysics.interzonalwall": {
                "convention": 3,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 5,
                "statement": 79,
                "warning": 1
            },
            "teaser.logic.buildingobjects.buildingphysics.layer": {
                "convention": 7,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 43,
                "warning": 2
            },
            "teaser.logic.buildingobjects.buildingphysics.window": {
                "convention": 7,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 95,
                "warning": 5
            },
            "teaser.logic.buildingobjects.buildingphysics.outerwall": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 43,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingphysics.floor": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 6,
                "warning": 1
            },
            "teaser.logic.buildingobjects.buildingphysics.rooftop": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 26,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingphysics.interzonalceiling": {
                "convention": 1,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 29,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingphysics.innerwall": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 27,
                "warning": 1
            },
            "teaser.logic.buildingobjects.buildingsystems.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.logic.buildingobjects.buildingsystems.buildingahu": {
                "convention": 8,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 59,
                "warning": 0
            },
            "teaser.data.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.data.dataclass": {
                "convention": 8,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 66,
                "warning": 9
            },
            "teaser.data.utilities": {
                "convention": 63,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 103,
                "warning": 0
            },
            "teaser.data.output.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.data.output.teaserjson_output": {
                "convention": 8,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 6,
                "statement": 202,
                "warning": 2
            },
            "teaser.data.output.besmod_output": {
                "convention": 13,
                "error": 0,
                "fatal": 1,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.data.output.material_output": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 26,
                "warning": 3
            },
            "teaser.data.output.usecond_output": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 49,
                "warning": 1
            },
            "teaser.data.output.runUnitTests": {
                "convention": 16,
                "error": 3,
                "fatal": 0,
                "info": 0,
                "refactor": 5,
                "statement": 81,
                "warning": 4
            },
            "teaser.data.output.buildingelement_output": {
                "convention": 5,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 47,
                "warning": 2
            },
            "teaser.data.output.aixlib_output": {
                "convention": 0,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 6,
                "statement": 100,
                "warning": 4
            },
            "teaser.data.output.modelica_output": {
                "convention": 1,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 1,
                "statement": 16,
                "warning": 2
            },
            "teaser.data.output.ibpsa_output": {
                "convention": 3,
                "error": 2,
                "fatal": 0,
                "info": 0,
                "refactor": 3,
                "statement": 42,
                "warning": 2
            },
            "teaser.data.output.reports.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.data.output.reports.model_report": {
                "convention": 13,
                "error": 1,
                "fatal": 0,
                "info": 0,
                "refactor": 22,
                "statement": 273,
                "warning": 11
            },
            "teaser.data.input.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.data.input.teaserjson_input": {
                "convention": 11,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 12,
                "statement": 232,
                "warning": 1
            },
            "teaser.data.input.usecond_input": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 37,
                "warning": 0
            },
            "teaser.data.input.material_input_json": {
                "convention": 2,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 24,
                "warning": 2
            },
            "teaser.data.input.buildingelement_input_json": {
                "convention": 7,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 2,
                "statement": 47,
                "warning": 3
            },
            "teaser.data.input.inputdata.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 0,
                "statement": 0,
                "warning": 0
            },
            "teaser.data.input.inputdata.weatherdata.__init__": {
                "convention": 0,
                "error": 0,
                "fatal": 0,
                "info": 0,
                "refactor": 377,
                "statement": 0,
                "warning": 0
            }
        },
        "by_msg": {
            "missing-function-docstring": 129,
            "invalid-name": 158,
            "unspecified-encoding": 25,
            "consider-using-with": 3,
            "import-error": 19,
            "line-too-long": 115,
            "too-many-lines": 6,
            "astroid-error": 2,
            "missing-module-docstring": 55,
            "too-many-locals": 17,
            "import-outside-toplevel": 31,
            "reimported": 1,
            "too-many-statements": 32,
            "consider-using-from-import": 28,
            "wrong-import-order": 35,
            "f-string-without-interpolation": 8,
            "consider-using-in": 14,
            "too-many-branches": 22,
            "unused-variable": 7,
            "redefined-outer-name": 9,
            "unidiomatic-typecheck": 3,
            "consider-using-f-string": 27,
            "consider-using-dict-items": 1,
            "pointless-string-statement": 6,
            "implicit-str-concat": 7,
            "unnecessary-comprehension": 1,
            "superfluous-parens": 13,
            "no-else-return": 10,
            "raising-format-tuple": 2,
            "too-many-arguments": 33,
            "super-with-arguments": 36,
            "unnecessary-pass": 2,
            "too-many-instance-attributes": 35,
            "not-an-iterable": 51,
            "attribute-defined-outside-init": 17,
            "too-few-public-methods": 2,
            "trailing-newlines": 1,
            "redefined-builtin": 8,
            "useless-object-inheritance": 15,
            "no-else-break": 1,
            "too-many-nested-blocks": 1,
            "self-assigning-variable": 9,
            "simplifiable-if-statement": 1,
            "no-else-raise": 3,
            "protected-access": 2,
            "too-many-public-methods": 3,
            "raise-missing-from": 34,
            "fixme": 7,
            "consider-using-generator": 66,
            "eval-used": 2,
            "missing-final-newline": 2,
            "undefined-variable": 1,
            "abstract-method": 3,
            "no-member": 2,
            "unsubscriptable-object": 4,
            "unused-import": 2,
            "signature-differs": 1,
            "used-before-assignment": 1,
            "too-many-boolean-expressions": 3,
            "consider-using-sys-exit": 3,
            "consider-iterating-dictionary": 2,
            "use-dict-literal": 19,
            "broad-exception-caught": 1,
            "unused-argument": 1,
            "unnecessary-dunder-call": 2,
            "logging-fstring-interpolation": 1,
            "duplicate-code": 354,
            "cyclic-import": 23
        },
        "code_type_count": {
            "code": 0,
            "comment": 0,
            "docstring": 0,
            "empty": 0,
            "total": 0
        },
        "dependencies": {
            "teaser.examples.e1_generate_archetype": [
                "teaser.examples.e3_export_ibpsa_models",
                "teaser.examples.e7_retrofit",
                "teaser.examples.e2_export_aixlib_models",
                "teaser.examples.e11_export_besmod_models",
                "teaser.examples.e8_change_boundary_conditions",
                "teaser.examples.e4_save"
            ],
            "teaser.project": [
                "teaser.examples.e1_generate_archetype",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.examples.verification.verification_VDI_6007_room8",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_VDI_6007_room3",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.examples.e10_adjust_schedules",
                "teaser.examples.e6_generate_building",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
                "teaser.examples.verification.verification_VDI_6007_room1",
                "teaser.examples.e5_load"
            ],
            "teaser.data.utilities": [
                "teaser.logic.retrofit",
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.data.dataclass",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.examples.e6_generate_building",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.data.dataclass": [
                "teaser.examples.e6_generate_building",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.building": [
                "teaser.logic.retrofit",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.buildingobjects.buildingsystems.buildingahu",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.examples.e6_generate_building",
                "teaser.logic.buildingobjects.thermalzone",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
                "teaser.logic.archetypebuildings.residential",
                "teaser.logic.archetypebuildings.nonresidential"
            ],
            "teaser.logic.buildingobjects.thermalzone": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.examples.e6_generate_building",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.useconditions": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.examples.e6_generate_building",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.buildingphysics.rooftop": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.examples.e6_generate_building",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.buildingphysics.layer": [
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.buildingobjects.buildingphysics.wall",
                "teaser.data.input.buildingelement_input_json",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e6_generate_building",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
                "teaser.logic.buildingobjects.buildingphysics.buildingelement"
            ],
            "teaser.logic.buildingobjects.buildingphysics.material": [
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.buildingobjects.buildingphysics.wall",
                "teaser.data.input.buildingelement_input_json",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e6_generate_building",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.buildingphysics.outerwall": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.logic.buildingobjects.buildingphysics.rooftop",
                "teaser.logic.buildingobjects.buildingphysics.door",
                "teaser.logic.buildingobjects.buildingphysics.groundfloor",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
                "teaser.examples.e6_generate_building"
            ],
            "teaser.logic.buildingobjects.buildingphysics.innerwall": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.buildingobjects.buildingphysics.floor",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.examples.e6_generate_building",
                "teaser.logic.buildingobjects.buildingphysics.ceiling",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.buildingobjects.buildingphysics.groundfloor": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.examples.e6_generate_building",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.buildingphysics.window": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.examples.e6_generate_building",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.utilities": [
                "teaser.data.output.usecond_output",
                "teaser.logic.buildingobjects.useconditions",
                "teaser.data.output.buildingelement_output",
                "teaser.examples.e4_save",
                "teaser.examples.verification.verification_VDI_6007_room1",
                "teaser.examples.e3_export_ibpsa_models",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps",
                "teaser.logic.buildingobjects.calculation.aixlib",
                "teaser.data.output.modelica_output",
                "teaser.data.output.ibpsa_output",
                "teaser.examples.e2_export_aixlib_models",
                "teaser.examples.e11_export_besmod_models",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.data.dataclass",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.data.output.material_output",
                "teaser.examples.verification.verification_VDI_6007_room8",
                "teaser.examples.verification.verification_VDI_6007_room3",
                "teaser.data.output.aixlib_output",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.logic.buildingobjects.calculation.ibpsa",
                "teaser.examples.e5_load"
            ],
            "teaser.logic.buildingobjects.buildingphysics.interzonalwall": [
                "teaser.logic.buildingobjects.buildingphysics.interzonalfloor",
                "teaser.logic.buildingobjects.buildingphysics.interzonalceiling",
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.buildingphysics.interzonalceiling": [
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.buildingphysics.interzonalfloor": [
                "teaser.data.input.teaserjson_input",
                "teaser.examples.e12_include_adjacent_zones_and_varying_soil_temps"
            ],
            "teaser.logic.buildingobjects.buildingphysics.floor": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.examples.verification.verification_ASHRAE_140_900",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.verification.verification_ASHRAE_140_920",
                "teaser.examples.verification.verification_ASHRAE_140_600",
                "teaser.examples.verification.verification_ASHRAE_140_620",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.buildingobjects.buildingphysics.ceiling": [
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.examples.e9_building_data_import_from_excel",
                "teaser.logic.archetypebuildings.bmvbs.office",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est1a": [
                "teaser.logic.archetypebuildings.urbanrenet.est4b",
                "teaser.logic.archetypebuildings.urbanrenet.est2",
                "teaser.data.utilities",
                "teaser.logic.archetypebuildings.urbanrenet.est1b",
                "teaser.logic.archetypebuildings.urbanrenet.est8a",
                "teaser.logic.archetypebuildings.urbanrenet.est3",
                "teaser.logic.archetypebuildings.urbanrenet.est6",
                "teaser.logic.archetypebuildings.urbanrenet.est8b",
                "teaser.logic.archetypebuildings.urbanrenet.est4a",
                "teaser.logic.archetypebuildings.urbanrenet.est7",
                "teaser.logic.archetypebuildings.urbanrenet.est5"
            ],
            "teaser.logic.archetypebuildings.residential": [
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling",
                "teaser.logic.archetypebuildings.urbanrenet.est1a",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse"
            ],
            "teaser.logic.archetypebuildings.nonresidential": [
                "teaser.logic.archetypebuildings.bmvbs.office"
            ],
            "teaser.logic.archetypebuildings.bmvbs.office": [
                "teaser.data.utilities",
                "teaser.logic.archetypebuildings.bmvbs.custom.institute",
                "teaser.logic.archetypebuildings.bmvbs.custom.institute8",
                "teaser.data.input.teaserjson_input",
                "teaser.logic.archetypebuildings.bmvbs.custom.institute4"
            ],
            "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse": [
                "teaser.data.utilities",
                "teaser.logic.archetypebuildings.tabula.dk.terracedhouse",
                "teaser.logic.archetypebuildings.tabula.de.multifamilyhouse",
                "teaser.logic.archetypebuildings.tabula.dk.apartmentblock",
                "teaser.data.input.teaserjson_input",
                "teaser.logic.archetypebuildings.tabula.de.terracedhouse",
                "teaser.logic.archetypebuildings.tabula.de.apartmentblock"
            ],
            "teaser.logic.buildingobjects.buildingphysics.door": [
                "teaser.data.input.teaserjson_input",
                "teaser.logic.archetypebuildings.tabula.de.singlefamilyhouse",
                "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse"
            ],
            "teaser.data.input.usecond_input": [
                "teaser.logic.buildingobjects.useconditions"
            ],
            "teaser.data.output.usecond_output": [
                "teaser.logic.buildingobjects.useconditions"
            ],
            "teaser.logic.buildingobjects.calculation.aixlib": [
                "teaser.logic.buildingobjects.building"
            ],
            "teaser.logic.buildingobjects.calculation.ibpsa": [
                "teaser.logic.buildingobjects.building"
            ],
            "teaser.logic.buildingobjects.buildingsystems.buildingahu": [
                "teaser.logic.buildingobjects.building",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.buildingobjects.calculation.one_element": [
                "teaser.logic.buildingobjects.thermalzone"
            ],
            "teaser.logic.buildingobjects.calculation.two_element": [
                "teaser.logic.buildingobjects.thermalzone"
            ],
            "teaser.logic.buildingobjects.calculation.three_element": [
                "teaser.logic.buildingobjects.thermalzone"
            ],
            "teaser.logic.buildingobjects.calculation.four_element": [
                "teaser.logic.buildingobjects.thermalzone"
            ],
            "teaser.logic.buildingobjects.calculation.five_element": [
                "teaser.logic.buildingobjects.thermalzone"
            ],
            "teaser.logic.buildingobjects.buildingphysics.buildingelement": [
                "teaser.logic.buildingobjects.buildingphysics.wall",
                "teaser.logic.buildingobjects.buildingphysics.window",
                "teaser.logic.buildingobjects.buildingphysics.interzonalwall"
            ],
            "teaser.data.input.material_input_json": [
                "teaser.logic.buildingobjects.buildingphysics.material",
                "teaser.data.input.buildingelement_input_json"
            ],
            "teaser.data.output.material_output": [
                "teaser.logic.buildingobjects.buildingphysics.material"
            ],
            "teaser.data.input.buildingelement_input_json": [
                "teaser.logic.buildingobjects.buildingphysics.buildingelement"
            ],
            "teaser.data.output.buildingelement_output": [
                "teaser.logic.buildingobjects.buildingphysics.buildingelement"
            ],
            "teaser.logic.buildingobjects.buildingphysics.wall": [
                "teaser.logic.buildingobjects.buildingphysics.outerwall",
                "teaser.logic.buildingobjects.buildingphysics.interzonalwall",
                "teaser.logic.buildingobjects.buildingphysics.innerwall"
            ],
            "teaser.logic.archetypebuildings.bmvbs.custom.institute": [
                "teaser.data.utilities",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.archetypebuildings.bmvbs.custom.institute4": [
                "teaser.data.utilities",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.archetypebuildings.bmvbs.custom.institute8": [
                "teaser.data.utilities",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est1b": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est2": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est3": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est4a": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est4b": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est5": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est6": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est7": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est8a": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.urbanrenet.est8b": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.tabula.dk.singlefamilyhouse": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.tabula.de.terracedhouse": [
                "teaser.data.utilities",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.archetypebuildings.tabula.dk.terracedhouse": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.tabula.de.multifamilyhouse": [
                "teaser.data.utilities",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.archetypebuildings.tabula.de.apartmentblock": [
                "teaser.data.utilities",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.logic.archetypebuildings.tabula.dk.apartmentblock": [
                "teaser.data.utilities"
            ],
            "teaser.logic.archetypebuildings.bmvbs.singlefamilydwelling": [
                "teaser.data.utilities",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser": [
                "teaser.data.output.teaserjson_output",
                "teaser.data.input.teaserjson_input"
            ],
            "teaser.data.output.modelica_output": [
                "teaser.data.output.aixlib_output",
                "teaser.data.output.ibpsa_output"
            ]
        },
        "duplicated_lines": {
            "nb_duplicated_lines": 0,
            "percent_duplicated_lines": 0.0
        },
        "node_count": {
            "function": 80,
            "klass": 55,
            "method": 435,
            "module": 112
        },
        "undocumented": {
            "function": 14,
            "klass": 0,
            "method": 115,
            "module": 55
        },
        "convention": 580,
        "error": 78,
        "fatal": 2,
        "info": 0,
        "refactor": 725,
        "statement": 9363,
        "warning": 155,
        "global_note": 8.024137562746983,
        "nb_duplicated_lines": 5992,
        "percent_duplicated_lines": 19.33152664859982
    }
}
