# ./pyxb/bundles/opengis/citygml/raw/energy.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:fff7d52f330eaefc45c15083a384e82fc6a8e682
# Generated 2015-05-04 11:02:46.492895 by PyXB version 1.2.4 using Python 2.7.9.final.0
# Namespace http://www.sig3d.org/citygml/2.0/energy/0.5.0

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:53bb4c94-f23c-11e4-a7ea-000c29ce1afb')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.4'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes
import teaser.Data.SchemaBindings.opengis.citygml.raw.building
import teaser.Data.SchemaBindings.opengis.raw.gml
import pyxb.bundles.common.xlink
import teaser.Data.SchemaBindings.opengis.citygml.raw.base

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.sig3d.org/citygml/2.0/energy/0.5.0', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_gml = teaser.Data.SchemaBindings.opengis.raw.gml.Namespace
_Namespace_gml.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_core = teaser.Data.SchemaBindings.opengis.citygml.raw.base.Namespace
_Namespace_core.configureCategories(['typeBinding', 'elementBinding'])
_Namespace = pyxb.bundles.common.xlink.Namespace
_Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ConditioningTypeType
class ConditioningTypeType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConditioningTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 117, 2)
    _Documentation = None
ConditioningTypeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ConditioningTypeType, enum_prefix=None)
ConditioningTypeType.Conditioned = ConditioningTypeType._CF_enumeration.addEnumeration(unicode_value='Conditioned', tag='Conditioned')
ConditioningTypeType.Unconditioned = ConditioningTypeType._CF_enumeration.addEnumeration(unicode_value='Unconditioned', tag='Unconditioned')
ConditioningTypeType.None_ = ConditioningTypeType._CF_enumeration.addEnumeration(unicode_value='None', tag='None_')
ConditioningTypeType._InitializeFacetMap(ConditioningTypeType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ConditioningTypeType', ConditioningTypeType)

# Atomic simple type: {http://www.sig3d.org/citygml/2.0/energy/0.5.0}SurfaceSideType
class SurfaceSideType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SurfaceSideType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1114, 2)
    _Documentation = None
SurfaceSideType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SurfaceSideType, enum_prefix=None)
SurfaceSideType.Inside = SurfaceSideType._CF_enumeration.addEnumeration(unicode_value='Inside', tag='Inside')
SurfaceSideType.Outside = SurfaceSideType._CF_enumeration.addEnumeration(unicode_value='Outside', tag='Outside')
SurfaceSideType._InitializeFacetMap(SurfaceSideType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SurfaceSideType', SurfaceSideType)

# Atomic simple type: {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalBoundarySurfaceTypeTypeType
class ThermalBoundarySurfaceTypeTypeType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalBoundarySurfaceTypeTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1157, 2)
    _Documentation = None
ThermalBoundarySurfaceTypeTypeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ThermalBoundarySurfaceTypeTypeType, enum_prefix=None)
ThermalBoundarySurfaceTypeTypeType.OuterWall = ThermalBoundarySurfaceTypeTypeType._CF_enumeration.addEnumeration(unicode_value='OuterWall', tag='OuterWall')
ThermalBoundarySurfaceTypeTypeType.SharedWall = ThermalBoundarySurfaceTypeTypeType._CF_enumeration.addEnumeration(unicode_value='SharedWall', tag='SharedWall')
ThermalBoundarySurfaceTypeTypeType.FlatRoof = ThermalBoundarySurfaceTypeTypeType._CF_enumeration.addEnumeration(unicode_value='FlatRoof', tag='FlatRoof')
ThermalBoundarySurfaceTypeTypeType.PitchedRoof = ThermalBoundarySurfaceTypeTypeType._CF_enumeration.addEnumeration(unicode_value='PitchedRoof', tag='PitchedRoof')
ThermalBoundarySurfaceTypeTypeType.CellarCeiling = ThermalBoundarySurfaceTypeTypeType._CF_enumeration.addEnumeration(unicode_value='CellarCeiling', tag='CellarCeiling')
ThermalBoundarySurfaceTypeTypeType.BasementFloor = ThermalBoundarySurfaceTypeTypeType._CF_enumeration.addEnumeration(unicode_value='BasementFloor', tag='BasementFloor')
ThermalBoundarySurfaceTypeTypeType.TopCeiling = ThermalBoundarySurfaceTypeTypeType._CF_enumeration.addEnumeration(unicode_value='TopCeiling', tag='TopCeiling')
ThermalBoundarySurfaceTypeTypeType._InitializeFacetMap(ThermalBoundarySurfaceTypeTypeType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ThermalBoundarySurfaceTypeTypeType', ThermalBoundarySurfaceTypeTypeType)

# Atomic simple type: {http://www.sig3d.org/citygml/2.0/energy/0.5.0}WavelengthRangeTypeType
class WavelengthRangeTypeType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'WavelengthRangeTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1361, 2)
    _Documentation = None
WavelengthRangeTypeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=WavelengthRangeTypeType, enum_prefix=None)
WavelengthRangeTypeType.Solar = WavelengthRangeTypeType._CF_enumeration.addEnumeration(unicode_value='Solar', tag='Solar')
WavelengthRangeTypeType.IR = WavelengthRangeTypeType._CF_enumeration.addEnumeration(unicode_value='IR', tag='IR')
WavelengthRangeTypeType.Visible = WavelengthRangeTypeType._CF_enumeration.addEnumeration(unicode_value='Visible', tag='Visible')
WavelengthRangeTypeType.Total = WavelengthRangeTypeType._CF_enumeration.addEnumeration(unicode_value='Total', tag='Total')
WavelengthRangeTypeType._InitializeFacetMap(WavelengthRangeTypeType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'WavelengthRangeTypeType', WavelengthRangeTypeType)

# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbsorptanceType with content type ELEMENT_ONLY
class AbsorptanceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbsorptanceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbsorptanceType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 11, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}percentage uses Python identifier percentage
    __percentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'percentage'), 'percentage', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbsorptanceType_httpwww_sig3d_orgcitygml2_0energy0_5_0percentage', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 13, 6), )

    
    percentage = property(__percentage.value, __percentage.set, None, 'Percentage of energy absorptance')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}surface uses Python identifier surface
    __surface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surface'), 'surface', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbsorptanceType_httpwww_sig3d_orgcitygml2_0energy0_5_0surface', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 18, 6), )

    
    surface = property(__surface.value, __surface.set, None, 'Wavelength range')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}wavelengthRange uses Python identifier wavelengthRange
    __wavelengthRange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'wavelengthRange'), 'wavelengthRange', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbsorptanceType_httpwww_sig3d_orgcitygml2_0energy0_5_0wavelengthRange', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 23, 6), )

    
    wavelengthRange = property(__wavelengthRange.value, __wavelengthRange.set, None, None)

    _ElementMap.update({
        __percentage.name() : __percentage,
        __surface.name() : __surface,
        __wavelengthRange.name() : __wavelengthRange
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'AbsorptanceType', AbsorptanceType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbsorptancePropertyType with content type ELEMENT_ONLY
class AbsorptancePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbsorptancePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbsorptancePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 26, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}Absorptance uses Python identifier Absorptance
    __Absorptance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Absorptance'), 'Absorptance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbsorptancePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0Absorptance', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 6, 2), )

    
    Absorptance = property(__Absorptance.value, __Absorptance.set, None, 'Percentaged  energy absorptance in different wavelength ranges')

    _ElementMap.update({
        __Absorptance.name() : __Absorptance
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'AbsorptancePropertyType', AbsorptancePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbstractMaterialType with content type ELEMENT_ONLY
class AbstractMaterialType (teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbstractMaterialType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractMaterialType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 36, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType
    
    # Element creationDate ({http://www.opengis.net/citygml/1.0}creationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element terminationDate ({http://www.opengis.net/citygml/1.0}terminationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element externalReference ({http://www.opengis.net/citygml/1.0}externalReference) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element generalizesTo ({http://www.opengis.net/citygml/1.0}generalizesTo) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element GenericApplicationPropertyOfCityObject ({http://www.opengis.net/citygml/1.0}_GenericApplicationPropertyOfCityObject) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}referenceURI uses Python identifier referenceURI
    __referenceURI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'referenceURI'), 'referenceURI', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbstractMaterialType_httpwww_sig3d_orgcitygml2_0energy0_5_0referenceURI', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 40, 10), )

    
    referenceURI = property(__referenceURI.value, __referenceURI.set, None, 'Reference to internal or external information sources.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}imageTexture uses Python identifier imageTexture
    __imageTexture = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'imageTexture'), 'imageTexture', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbstractMaterialType_httpwww_sig3d_orgcitygml2_0energy0_5_0imageTexture', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 45, 10), )

    
    imageTexture = property(__imageTexture.value, __imageTexture.set, None, 'Reference to a texture file')

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __referenceURI.name() : __referenceURI,
        __imageTexture.name() : __imageTexture
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'AbstractMaterialType', AbstractMaterialType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbstractMaterialPropertyType with content type ELEMENT_ONLY
class AbstractMaterialPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbstractMaterialPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractMaterialPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 54, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbstractMaterial uses Python identifier AbstractMaterial
    __AbstractMaterial = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractMaterial'), 'AbstractMaterial', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbstractMaterialPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0AbstractMaterial', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 31, 2), )

    
    AbstractMaterial = property(__AbstractMaterial.value, __AbstractMaterial.set, None, 'Abstract superclass for all Material classes. A Material is a homogeneous substance that can be used to form elements.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbstractMaterialPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbstractMaterialPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbstractMaterialPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbstractMaterialPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbstractMaterialPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbstractMaterialPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbstractMaterialPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_AbstractMaterialPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __AbstractMaterial.name() : __AbstractMaterial
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'AbstractMaterialPropertyType', AbstractMaterialPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}BoilerPropertyType with content type ELEMENT_ONLY
class BoilerPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}BoilerPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BoilerPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 70, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}Boiler uses Python identifier Boiler
    __Boiler = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Boiler'), 'Boiler', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BoilerPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0Boiler', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 60, 2), )

    
    Boiler = property(__Boiler.value, __Boiler.set, None, None)

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BoilerPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BoilerPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BoilerPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BoilerPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BoilerPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BoilerPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BoilerPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BoilerPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Boiler.name() : __Boiler
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'BoilerPropertyType', BoilerPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}BuildingUnitType with content type ELEMENT_ONLY
class BuildingUnitType (teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}BuildingUnitType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BuildingUnitType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 81, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType
    
    # Element creationDate ({http://www.opengis.net/citygml/1.0}creationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element terminationDate ({http://www.opengis.net/citygml/1.0}terminationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element externalReference ({http://www.opengis.net/citygml/1.0}externalReference) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element generalizesTo ({http://www.opengis.net/citygml/1.0}generalizesTo) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element GenericApplicationPropertyOfCityObject ({http://www.opengis.net/citygml/1.0}_GenericApplicationPropertyOfCityObject) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}numberOfRooms uses Python identifier numberOfRooms
    __numberOfRooms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numberOfRooms'), 'numberOfRooms', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitType_httpwww_sig3d_orgcitygml2_0energy0_5_0numberOfRooms', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 85, 10), )

    
    numberOfRooms = property(__numberOfRooms.value, __numberOfRooms.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ownerName uses Python identifier ownerName
    __ownerName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ownerName'), 'ownerName', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitType_httpwww_sig3d_orgcitygml2_0energy0_5_0ownerName', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 86, 10), )

    
    ownerName = property(__ownerName.value, __ownerName.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ownershipType uses Python identifier ownershipType
    __ownershipType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ownershipType'), 'ownershipType', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitType_httpwww_sig3d_orgcitygml2_0energy0_5_0ownershipType', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 87, 10), )

    
    ownershipType = property(__ownershipType.value, __ownershipType.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}usedArea uses Python identifier usedArea
    __usedArea = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usedArea'), 'usedArea', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitType_httpwww_sig3d_orgcitygml2_0energy0_5_0usedArea', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 88, 10), )

    
    usedArea = property(__usedArea.value, __usedArea.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}occupiedBy uses Python identifier occupiedBy
    __occupiedBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'occupiedBy'), 'occupiedBy', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitType_httpwww_sig3d_orgcitygml2_0energy0_5_0occupiedBy', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 89, 10), )

    
    occupiedBy = property(__occupiedBy.value, __occupiedBy.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}has uses Python identifier has
    __has = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'has'), 'has', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitType_httpwww_sig3d_orgcitygml2_0energy0_5_0has', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 90, 10), )

    
    has = property(__has.value, __has.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __numberOfRooms.name() : __numberOfRooms,
        __ownerName.name() : __ownerName,
        __ownershipType.name() : __ownershipType,
        __usedArea.name() : __usedArea,
        __occupiedBy.name() : __occupiedBy,
        __has.name() : __has
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'BuildingUnitType', BuildingUnitType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}BuildingUnitPropertyType with content type ELEMENT_ONLY
class BuildingUnitPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}BuildingUnitPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BuildingUnitPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 95, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}BuildingUnit uses Python identifier BuildingUnit
    __BuildingUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BuildingUnit'), 'BuildingUnit', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0BuildingUnit', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 76, 2), )

    
    BuildingUnit = property(__BuildingUnit.value, __BuildingUnit.set, None, 'A building unit is a part of usage zone, such as dwelling or workplace, which is related to a single occupant entity.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BuildingUnitPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __BuildingUnit.name() : __BuildingUnit
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'BuildingUnitPropertyType', BuildingUnitPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}CombinedHeatPowerPropertyType with content type ELEMENT_ONLY
class CombinedHeatPowerPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}CombinedHeatPowerPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CombinedHeatPowerPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 111, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}CombinedHeatPower uses Python identifier CombinedHeatPower
    __CombinedHeatPower = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CombinedHeatPower'), 'CombinedHeatPower', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_CombinedHeatPowerPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0CombinedHeatPower', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 101, 2), )

    
    CombinedHeatPower = property(__CombinedHeatPower.value, __CombinedHeatPower.set, None, None)

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_CombinedHeatPowerPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_CombinedHeatPowerPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_CombinedHeatPowerPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_CombinedHeatPowerPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_CombinedHeatPowerPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_CombinedHeatPowerPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_CombinedHeatPowerPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_CombinedHeatPowerPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __CombinedHeatPower.name() : __CombinedHeatPower
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'CombinedHeatPowerPropertyType', CombinedHeatPowerPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ConstructionType with content type ELEMENT_ONLY
class ConstructionType (teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ConstructionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConstructionType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 130, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType
    
    # Element creationDate ({http://www.opengis.net/citygml/1.0}creationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element terminationDate ({http://www.opengis.net/citygml/1.0}terminationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element externalReference ({http://www.opengis.net/citygml/1.0}externalReference) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element generalizesTo ({http://www.opengis.net/citygml/1.0}generalizesTo) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element GenericApplicationPropertyOfCityObject ({http://www.opengis.net/citygml/1.0}_GenericApplicationPropertyOfCityObject) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}absorptance uses Python identifier absorptance
    __absorptance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'absorptance'), 'absorptance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionType_httpwww_sig3d_orgcitygml2_0energy0_5_0absorptance', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 134, 10), )

    
    absorptance = property(__absorptance.value, __absorptance.set, None, 'Energy absorptance')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}reflectance uses Python identifier reflectance
    __reflectance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'reflectance'), 'reflectance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionType_httpwww_sig3d_orgcitygml2_0energy0_5_0reflectance', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 139, 10), )

    
    reflectance = property(__reflectance.value, __reflectance.set, None, 'Percentage energy reflectance')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}transmittance uses Python identifier transmittance
    __transmittance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transmittance'), 'transmittance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionType_httpwww_sig3d_orgcitygml2_0energy0_5_0transmittance', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 144, 10), )

    
    transmittance = property(__transmittance.value, __transmittance.set, None, 'Percentaged transmittance of shading surface')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}uValue uses Python identifier uValue
    __uValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'uValue'), 'uValue', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionType_httpwww_sig3d_orgcitygml2_0energy0_5_0uValue', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 149, 10), )

    
    uValue = property(__uValue.value, __uValue.set, None, 'U-Value - Overall conductance')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}layer uses Python identifier layer
    __layer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'layer'), 'layer', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionType_httpwww_sig3d_orgcitygml2_0energy0_5_0layer', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 154, 10), )

    
    layer = property(__layer.value, __layer.set, None, "Reference to layers that comprise this construction. Multiple LayerId's order is important and specifies the layering of the layer's referenced materials. The first Surface/AdjacentSpaceId entered will determine how the referenced construction layers are ordered with the first construction layer being in contact with the outside or 2nd Surface/AdjacentSpaceId listed and the last layer in contact with the first Surface/AdjacentSpaceId listed")

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __absorptance.name() : __absorptance,
        __reflectance.name() : __reflectance,
        __transmittance.name() : __transmittance,
        __uValue.name() : __uValue,
        __layer.name() : __layer
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ConstructionType', ConstructionType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ConstructionPropertyType with content type ELEMENT_ONLY
class ConstructionPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ConstructionPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConstructionPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 163, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}Construction uses Python identifier Construction
    __Construction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Construction'), 'Construction', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0Construction', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 124, 2), )

    
    Construction = property(__Construction.value, __Construction.set, None, 'A Construction is a combination of layers, such as a wall or a roof.\n<p> <img src="../png/Construction-Layer-Illustration.png"></p>')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Construction.name() : __Construction
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'ConstructionPropertyType', ConstructionPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ConstructionOrientationType with content type ELEMENT_ONLY
class ConstructionOrientationType (teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ConstructionOrientationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConstructionOrientationType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 174, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType
    
    # Element creationDate ({http://www.opengis.net/citygml/1.0}creationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element terminationDate ({http://www.opengis.net/citygml/1.0}terminationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element externalReference ({http://www.opengis.net/citygml/1.0}externalReference) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element generalizesTo ({http://www.opengis.net/citygml/1.0}generalizesTo) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element GenericApplicationPropertyOfCityObject ({http://www.opengis.net/citygml/1.0}_GenericApplicationPropertyOfCityObject) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}orientation uses Python identifier orientation
    __orientation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orientation'), 'orientation', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionOrientationType_httpwww_sig3d_orgcitygml2_0energy0_5_0orientation', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 178, 10), )

    
    orientation = property(__orientation.value, __orientation.set, None, 'If <i>orientation == true</i> the layers are used in the specified order (see  Construction), otherwise in reverse order.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}baseConstruction uses Python identifier baseConstruction
    __baseConstruction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'baseConstruction'), 'baseConstruction', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionOrientationType_httpwww_sig3d_orgcitygml2_0energy0_5_0baseConstruction', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 183, 10), )

    
    baseConstruction = property(__baseConstruction.value, __baseConstruction.set, None, 'Reference to the Construction being used.')

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __orientation.name() : __orientation,
        __baseConstruction.name() : __baseConstruction
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ConstructionOrientationType', ConstructionOrientationType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ConstructionOrientationPropertyType with content type ELEMENT_ONLY
class ConstructionOrientationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ConstructionOrientationPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConstructionOrientationPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 192, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ConstructionOrientation uses Python identifier ConstructionOrientation
    __ConstructionOrientation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ConstructionOrientation'), 'ConstructionOrientation', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionOrientationPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0ConstructionOrientation', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 169, 2), )

    
    ConstructionOrientation = property(__ConstructionOrientation.value, __ConstructionOrientation.set, None, 'Determines the usage of Construction in terms of the Layer order.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionOrientationPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionOrientationPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionOrientationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionOrientationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionOrientationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionOrientationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionOrientationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ConstructionOrientationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __ConstructionOrientation.name() : __ConstructionOrientation
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'ConstructionOrientationPropertyType', ConstructionOrientationPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ControlTypeType with content type ELEMENT_ONLY
class ControlTypeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ControlTypeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ControlTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 199, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}controlledVariable uses Python identifier controlledVariable
    __controlledVariable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'controlledVariable'), 'controlledVariable', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ControlTypeType_httpwww_sig3d_orgcitygml2_0energy0_5_0controlledVariable', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 201, 6), )

    
    controlledVariable = property(__controlledVariable.value, __controlledVariable.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}setPoint uses Python identifier setPoint
    __setPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'setPoint'), 'setPoint', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ControlTypeType_httpwww_sig3d_orgcitygml2_0energy0_5_0setPoint', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 202, 6), )

    
    setPoint = property(__setPoint.value, __setPoint.set, None, None)

    _ElementMap.update({
        __controlledVariable.name() : __controlledVariable,
        __setPoint.name() : __setPoint
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ControlTypeType', ControlTypeType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ControlTypePropertyType with content type ELEMENT_ONLY
class ControlTypePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ControlTypePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ControlTypePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 205, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ControlType uses Python identifier ControlType
    __ControlType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ControlType'), 'ControlType', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ControlTypePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0ControlType', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 198, 2), )

    
    ControlType = property(__ControlType.value, __ControlType.set, None, None)

    _ElementMap.update({
        __ControlType.name() : __ControlType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ControlTypePropertyType', ControlTypePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DHWFacilitiesPropertyType with content type ELEMENT_ONLY
class DHWFacilitiesPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DHWFacilitiesPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DHWFacilitiesPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 227, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DHWFacilities uses Python identifier DHWFacilities
    __DHWFacilities = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DHWFacilities'), 'DHWFacilities', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DHWFacilitiesPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0DHWFacilities', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 210, 2), )

    
    DHWFacilities = property(__DHWFacilities.value, __DHWFacilities.set, None, 'Facilities for domestic hot water usage.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DHWFacilitiesPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DHWFacilitiesPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DHWFacilitiesPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DHWFacilitiesPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DHWFacilitiesPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DHWFacilitiesPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DHWFacilitiesPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DHWFacilitiesPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __DHWFacilities.name() : __DHWFacilities
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'DHWFacilitiesPropertyType', DHWFacilitiesPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DailyScheduleType with content type ELEMENT_ONLY
class DailyScheduleType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DailyScheduleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DailyScheduleType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 234, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}dayType uses Python identifier dayType
    __dayType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dayType'), 'dayType', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DailyScheduleType_httpwww_sig3d_orgcitygml2_0energy0_5_0dayType', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 236, 6), )

    
    dayType = property(__dayType.value, __dayType.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}schedule uses Python identifier schedule
    __schedule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schedule'), 'schedule', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DailyScheduleType_httpwww_sig3d_orgcitygml2_0energy0_5_0schedule', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 237, 6), )

    
    schedule = property(__schedule.value, __schedule.set, None, None)

    _ElementMap.update({
        __dayType.name() : __dayType,
        __schedule.name() : __schedule
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DailyScheduleType', DailyScheduleType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DailySchedulePropertyType with content type ELEMENT_ONLY
class DailySchedulePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DailySchedulePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DailySchedulePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 240, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DailySchedule uses Python identifier DailySchedule
    __DailySchedule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DailySchedule'), 'DailySchedule', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DailySchedulePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0DailySchedule', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 233, 2), )

    
    DailySchedule = property(__DailySchedule.value, __DailySchedule.set, None, None)

    _ElementMap.update({
        __DailySchedule.name() : __DailySchedule
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DailySchedulePropertyType', DailySchedulePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DistrictNetworkSubstationPropertyType with content type ELEMENT_ONLY
class DistrictNetworkSubstationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DistrictNetworkSubstationPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DistrictNetworkSubstationPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 256, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DistrictNetworkSubstation uses Python identifier DistrictNetworkSubstation
    __DistrictNetworkSubstation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DistrictNetworkSubstation'), 'DistrictNetworkSubstation', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DistrictNetworkSubstationPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0DistrictNetworkSubstation', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 245, 2), )

    
    DistrictNetworkSubstation = property(__DistrictNetworkSubstation.value, __DistrictNetworkSubstation.set, None, None)

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DistrictNetworkSubstationPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DistrictNetworkSubstationPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DistrictNetworkSubstationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DistrictNetworkSubstationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DistrictNetworkSubstationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DistrictNetworkSubstationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DistrictNetworkSubstationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DistrictNetworkSubstationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __DistrictNetworkSubstation.name() : __DistrictNetworkSubstation
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'DistrictNetworkSubstationPropertyType', DistrictNetworkSubstationPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ElectricalAppliancesPropertyType with content type ELEMENT_ONLY
class ElectricalAppliancesPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ElectricalAppliancesPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricalAppliancesPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 278, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ElectricalAppliances uses Python identifier ElectricalAppliances
    __ElectricalAppliances = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElectricalAppliances'), 'ElectricalAppliances', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalAppliancesPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0ElectricalAppliances', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 262, 2), )

    
    ElectricalAppliances = property(__ElectricalAppliances.value, __ElectricalAppliances.set, None, 'Electrical appliances inside the building unit or building zone.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalAppliancesPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalAppliancesPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalAppliancesPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalAppliancesPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalAppliancesPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalAppliancesPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalAppliancesPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalAppliancesPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __ElectricalAppliances.name() : __ElectricalAppliances
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'ElectricalAppliancesPropertyType', ElectricalAppliancesPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ElectricalResistancePropertyType with content type ELEMENT_ONLY
class ElectricalResistancePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ElectricalResistancePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricalResistancePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 292, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ElectricalResistance uses Python identifier ElectricalResistance
    __ElectricalResistance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElectricalResistance'), 'ElectricalResistance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalResistancePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0ElectricalResistance', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 284, 2), )

    
    ElectricalResistance = property(__ElectricalResistance.value, __ElectricalResistance.set, None, None)

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalResistancePropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalResistancePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalResistancePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalResistancePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalResistancePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalResistancePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalResistancePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalResistancePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __ElectricalResistance.name() : __ElectricalResistance
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'ElectricalResistancePropertyType', ElectricalResistancePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EmittanceType with content type ELEMENT_ONLY
class EmittanceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EmittanceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EmittanceType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 303, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}percentage uses Python identifier percentage
    __percentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'percentage'), 'percentage', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EmittanceType_httpwww_sig3d_orgcitygml2_0energy0_5_0percentage', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 305, 6), )

    
    percentage = property(__percentage.value, __percentage.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}surface uses Python identifier surface
    __surface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surface'), 'surface', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EmittanceType_httpwww_sig3d_orgcitygml2_0energy0_5_0surface', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 306, 6), )

    
    surface = property(__surface.value, __surface.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}wavelengthRange uses Python identifier wavelengthRange
    __wavelengthRange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'wavelengthRange'), 'wavelengthRange', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EmittanceType_httpwww_sig3d_orgcitygml2_0energy0_5_0wavelengthRange', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 307, 6), )

    
    wavelengthRange = property(__wavelengthRange.value, __wavelengthRange.set, None, None)

    _ElementMap.update({
        __percentage.name() : __percentage,
        __surface.name() : __surface,
        __wavelengthRange.name() : __wavelengthRange
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'EmittanceType', EmittanceType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EmittancePropertyType with content type ELEMENT_ONLY
class EmittancePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EmittancePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EmittancePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 310, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}Emittance uses Python identifier Emittance
    __Emittance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Emittance'), 'Emittance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EmittancePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0Emittance', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 298, 2), )

    
    Emittance = property(__Emittance.value, __Emittance.set, None, 'Percentaged infra-red emissivity')

    _ElementMap.update({
        __Emittance.name() : __Emittance
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'EmittancePropertyType', EmittancePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EndUseUnitType with content type ELEMENT_ONLY
class EndUseUnitType (teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EndUseUnitType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EndUseUnitType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 320, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedNominalPower uses Python identifier installedNominalPower
    __installedNominalPower = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower'), 'installedNominalPower', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EndUseUnitType_httpwww_sig3d_orgcitygml2_0energy0_5_0installedNominalPower', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 324, 10), )

    
    installedNominalPower = property(__installedNominalPower.value, __installedNominalPower.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EndUseUnitType_httpwww_sig3d_orgcitygml2_0energy0_5_0number', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 325, 10), )

    
    number = property(__number.value, __number.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EndUseUnitType_httpwww_sig3d_orgcitygml2_0energy0_5_0type', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 326, 10), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __installedNominalPower.name() : __installedNominalPower,
        __number.name() : __number,
        __type.name() : __type
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'EndUseUnitType', EndUseUnitType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EndUseUnitPropertyType with content type ELEMENT_ONLY
class EndUseUnitPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EndUseUnitPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EndUseUnitPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 331, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EndUseUnit uses Python identifier EndUseUnit
    __EndUseUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndUseUnit'), 'EndUseUnit', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EndUseUnitPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0EndUseUnit', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 315, 2), )

    
    EndUseUnit = property(__EndUseUnit.value, __EndUseUnit.set, None, 'Final device(s) which deliver the required end-use to the end-user in his end-use place (e.g. radiators or convectors for heating etc.)')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EndUseUnitPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EndUseUnitPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EndUseUnitPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EndUseUnitPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EndUseUnitPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EndUseUnitPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EndUseUnitPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EndUseUnitPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __EndUseUnit.name() : __EndUseUnit
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'EndUseUnitPropertyType', EndUseUnitPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyCarrierType with content type ELEMENT_ONLY
class EnergyCarrierType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyCarrierType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyCarrierType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 342, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}co2EmissionFactor uses Python identifier co2EmissionFactor
    __co2EmissionFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'co2EmissionFactor'), 'co2EmissionFactor', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCarrierType_httpwww_sig3d_orgcitygml2_0energy0_5_0co2EmissionFactor', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 344, 6), )

    
    co2EmissionFactor = property(__co2EmissionFactor.value, __co2EmissionFactor.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}energyDensity uses Python identifier energyDensity
    __energyDensity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'energyDensity'), 'energyDensity', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCarrierType_httpwww_sig3d_orgcitygml2_0energy0_5_0energyDensity', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 345, 6), )

    
    energyDensity = property(__energyDensity.value, __energyDensity.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}primaryEnergyFactor uses Python identifier primaryEnergyFactor
    __primaryEnergyFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'primaryEnergyFactor'), 'primaryEnergyFactor', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCarrierType_httpwww_sig3d_orgcitygml2_0energy0_5_0primaryEnergyFactor', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 346, 6), )

    
    primaryEnergyFactor = property(__primaryEnergyFactor.value, __primaryEnergyFactor.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCarrierType_httpwww_sig3d_orgcitygml2_0energy0_5_0type', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 347, 6), )

    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __co2EmissionFactor.name() : __co2EmissionFactor,
        __energyDensity.name() : __energyDensity,
        __primaryEnergyFactor.name() : __primaryEnergyFactor,
        __type.name() : __type
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'EnergyCarrierType', EnergyCarrierType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyCarrierPropertyType with content type ELEMENT_ONLY
class EnergyCarrierPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyCarrierPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyCarrierPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 350, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyCarrier uses Python identifier EnergyCarrier
    __EnergyCarrier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EnergyCarrier'), 'EnergyCarrier', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCarrierPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0EnergyCarrier', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 337, 2), )

    
    EnergyCarrier = property(__EnergyCarrier.value, __EnergyCarrier.set, None, 'Energy form containing the energy (e.g. fuel, renewable energy etc.)')

    _ElementMap.update({
        __EnergyCarrier.name() : __EnergyCarrier
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'EnergyCarrierPropertyType', EnergyCarrierPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType with content type ELEMENT_ONLY
class EnergyConversionSystemType (teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyConversionSystemType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 360, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}efficiencyIndicator uses Python identifier efficiencyIndicator
    __efficiencyIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'efficiencyIndicator'), 'efficiencyIndicator', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0efficiencyIndicator', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10), )

    
    efficiencyIndicator = property(__efficiencyIndicator.value, __efficiencyIndicator.set, None, 'COP, EER, W/(m3/h) etc.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedNominalPower uses Python identifier installedNominalPower
    __installedNominalPower = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower'), 'installedNominalPower', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0installedNominalPower', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10), )

    
    installedNominalPower = property(__installedNominalPower.value, __installedNominalPower.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}model uses Python identifier model
    __model = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'model'), 'model', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0model', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10), )

    
    model = property(__model.value, __model.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}nominalEfficiency uses Python identifier nominalEfficiency
    __nominalEfficiency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nominalEfficiency'), 'nominalEfficiency', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0nominalEfficiency', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10), )

    
    nominalEfficiency = property(__nominalEfficiency.value, __nominalEfficiency.set, None, 'give also Efficiency Unit (COP, EEF, W/cfm, %, other)')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0number', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10), )

    
    number = property(__number.value, __number.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}productAndInstallationDocument uses Python identifier productAndInstallationDocument
    __productAndInstallationDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'productAndInstallationDocument'), 'productAndInstallationDocument', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0productAndInstallationDocument', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10), )

    
    productAndInstallationDocument = property(__productAndInstallationDocument.value, __productAndInstallationDocument.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}yearOfManufacture uses Python identifier yearOfManufacture
    __yearOfManufacture = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'yearOfManufacture'), 'yearOfManufacture', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0yearOfManufacture', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10), )

    
    yearOfManufacture = property(__yearOfManufacture.value, __yearOfManufacture.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}has uses Python identifier has
    __has = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'has'), 'has', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0has', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10), )

    
    has = property(__has.value, __has.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}consumes uses Python identifier consumes
    __consumes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'consumes'), 'consumes', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0consumes', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 380, 10), )

    
    consumes = property(__consumes.value, __consumes.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedIn uses Python identifier installedIn
    __installedIn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'installedIn'), 'installedIn', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0installedIn', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10), )

    
    installedIn = property(__installedIn.value, __installedIn.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __efficiencyIndicator.name() : __efficiencyIndicator,
        __installedNominalPower.name() : __installedNominalPower,
        __model.name() : __model,
        __nominalEfficiency.name() : __nominalEfficiency,
        __number.name() : __number,
        __productAndInstallationDocument.name() : __productAndInstallationDocument,
        __yearOfManufacture.name() : __yearOfManufacture,
        __has.name() : __has,
        __consumes.name() : __consumes,
        __installedIn.name() : __installedIn
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'EnergyConversionSystemType', EnergyConversionSystemType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemPropertyType with content type ELEMENT_ONLY
class EnergyConversionSystemPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyConversionSystemPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 386, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystem uses Python identifier EnergyConversionSystem
    __EnergyConversionSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EnergyConversionSystem'), 'EnergyConversionSystem', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0EnergyConversionSystem', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 355, 2), )

    
    EnergyConversionSystem = property(__EnergyConversionSystem.value, __EnergyConversionSystem.set, None, 'Energy conversion system is a system producing the energy necessary to satisfy the end-use (or to feed the networks) from an energy source.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyConversionSystemPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __EnergyConversionSystem.name() : __EnergyConversionSystem
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'EnergyConversionSystemPropertyType', EnergyConversionSystemPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyCoverageType with content type ELEMENT_ONLY
class EnergyCoverageType (teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyCoverageType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyCoverageType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 397, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}coverageRatio uses Python identifier coverageRatio
    __coverageRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'coverageRatio'), 'coverageRatio', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCoverageType_httpwww_sig3d_orgcitygml2_0energy0_5_0coverageRatio', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 401, 10), )

    
    coverageRatio = property(__coverageRatio.value, __coverageRatio.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}coveredBy uses Python identifier coveredBy
    __coveredBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'coveredBy'), 'coveredBy', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCoverageType_httpwww_sig3d_orgcitygml2_0energy0_5_0coveredBy', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 402, 10), )

    
    coveredBy = property(__coveredBy.value, __coveredBy.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __coverageRatio.name() : __coverageRatio,
        __coveredBy.name() : __coveredBy
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'EnergyCoverageType', EnergyCoverageType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyCoveragePropertyType with content type ELEMENT_ONLY
class EnergyCoveragePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyCoveragePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyCoveragePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 407, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyCoverage uses Python identifier EnergyCoverage
    __EnergyCoverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EnergyCoverage'), 'EnergyCoverage', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCoveragePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0EnergyCoverage', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 392, 2), )

    
    EnergyCoverage = property(__EnergyCoverage.value, __EnergyCoverage.set, None, 'Determine the level of energy coverage (may be time depending) by a given operation mode of an energy conversion system.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCoveragePropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCoveragePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCoveragePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCoveragePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCoveragePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCoveragePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCoveragePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyCoveragePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __EnergyCoverage.name() : __EnergyCoverage
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'EnergyCoveragePropertyType', EnergyCoveragePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDemandType with content type ELEMENT_ONLY
class EnergyDemandType (teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDemandType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyDemandType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 418, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}endUse uses Python identifier endUse
    __endUse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endUse'), 'endUse', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDemandType_httpwww_sig3d_orgcitygml2_0energy0_5_0endUse', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 422, 10), )

    
    endUse = property(__endUse.value, __endUse.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}energyAmount uses Python identifier energyAmount
    __energyAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'energyAmount'), 'energyAmount', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDemandType_httpwww_sig3d_orgcitygml2_0energy0_5_0energyAmount', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 423, 10), )

    
    energyAmount = property(__energyAmount.value, __energyAmount.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}energyDistribution uses Python identifier energyDistribution
    __energyDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'energyDistribution'), 'energyDistribution', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDemandType_httpwww_sig3d_orgcitygml2_0energy0_5_0energyDistribution', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 424, 10), )

    
    energyDistribution = property(__energyDistribution.value, __energyDistribution.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __endUse.name() : __endUse,
        __energyAmount.name() : __energyAmount,
        __energyDistribution.name() : __energyDistribution
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'EnergyDemandType', EnergyDemandType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDemandPropertyType with content type ELEMENT_ONLY
class EnergyDemandPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDemandPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyDemandPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 429, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDemand uses Python identifier EnergyDemand
    __EnergyDemand = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EnergyDemand'), 'EnergyDemand', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDemandPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0EnergyDemand', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 413, 2), )

    
    EnergyDemand = property(__EnergyDemand.value, __EnergyDemand.set, None, 'Energy demand is the useful energy required to satisfy a specific end-use, such as heating, cooling, domestic hot water etc.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDemandPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDemandPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDemandPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDemandPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDemandPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDemandPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDemandPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDemandPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __EnergyDemand.name() : __EnergyDemand
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'EnergyDemandPropertyType', EnergyDemandPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDistributionSystemType with content type ELEMENT_ONLY
class EnergyDistributionSystemType (teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDistributionSystemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyDistributionSystemType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 440, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}distributionPerimeter uses Python identifier distributionPerimeter
    __distributionPerimeter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'distributionPerimeter'), 'distributionPerimeter', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDistributionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0distributionPerimeter', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 444, 10), )

    
    distributionPerimeter = property(__distributionPerimeter.value, __distributionPerimeter.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}storageSystem uses Python identifier storageSystem
    __storageSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'storageSystem'), 'storageSystem', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDistributionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0storageSystem', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 445, 10), )

    
    storageSystem = property(__storageSystem.value, __storageSystem.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}energySupply uses Python identifier energySupply
    __energySupply = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'energySupply'), 'energySupply', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDistributionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0energySupply', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 446, 10), )

    
    energySupply = property(__energySupply.value, __energySupply.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}endUseUnit uses Python identifier endUseUnit
    __endUseUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endUseUnit'), 'endUseUnit', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDistributionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0endUseUnit', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 447, 10), )

    
    endUseUnit = property(__endUseUnit.value, __endUseUnit.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __distributionPerimeter.name() : __distributionPerimeter,
        __storageSystem.name() : __storageSystem,
        __energySupply.name() : __energySupply,
        __endUseUnit.name() : __endUseUnit
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'EnergyDistributionSystemType', EnergyDistributionSystemType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDistributionSystemPropertyType with content type ELEMENT_ONLY
class EnergyDistributionSystemPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDistributionSystemPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergyDistributionSystemPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 452, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDistributionSystem uses Python identifier EnergyDistributionSystem
    __EnergyDistributionSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EnergyDistributionSystem'), 'EnergyDistributionSystem', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDistributionSystemPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0EnergyDistributionSystem', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 435, 2), )

    
    EnergyDistributionSystem = property(__EnergyDistributionSystem.value, __EnergyDistributionSystem.set, None, 'Energy distribution system is a system in charge of delivering the energy inside the building, from the place of energy production to the place of end-use. It consists then in the storage (including battery/tank and pipe volumes), the circulation pumps, the distribution pipes and the end use units (radiators, fan coils etc.).')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDistributionSystemPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDistributionSystemPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDistributionSystemPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDistributionSystemPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDistributionSystemPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDistributionSystemPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDistributionSystemPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergyDistributionSystemPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __EnergyDistributionSystem.name() : __EnergyDistributionSystem
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'EnergyDistributionSystemPropertyType', EnergyDistributionSystemPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergySourceType with content type ELEMENT_ONLY
class EnergySourceType (teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergySourceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergySourceType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 463, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}energyAmount uses Python identifier energyAmount
    __energyAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'energyAmount'), 'energyAmount', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySourceType_httpwww_sig3d_orgcitygml2_0energy0_5_0energyAmount', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 467, 10), )

    
    energyAmount = property(__energyAmount.value, __energyAmount.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}energyCarrier uses Python identifier energyCarrier
    __energyCarrier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'energyCarrier'), 'energyCarrier', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySourceType_httpwww_sig3d_orgcitygml2_0energy0_5_0energyCarrier', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 468, 10), )

    
    energyCarrier = property(__energyCarrier.value, __energyCarrier.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'coverage'), 'coverage', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySourceType_httpwww_sig3d_orgcitygml2_0energy0_5_0coverage', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 469, 10), )

    
    coverage = property(__coverage.value, __coverage.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __energyAmount.name() : __energyAmount,
        __energyCarrier.name() : __energyCarrier,
        __coverage.name() : __coverage
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'EnergySourceType', EnergySourceType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergySourcePropertyType with content type ELEMENT_ONLY
class EnergySourcePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergySourcePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergySourcePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 474, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergySource uses Python identifier EnergySource
    __EnergySource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EnergySource'), 'EnergySource', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySourcePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0EnergySource', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 458, 2), )

    
    EnergySource = property(__EnergySource.value, __EnergySource.set, None, 'Energy Source is the final energy consumed by the energy conversion system.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySourcePropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySourcePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySourcePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySourcePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySourcePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySourcePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySourcePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySourcePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __EnergySource.name() : __EnergySource
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'EnergySourcePropertyType', EnergySourcePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergySupplyType with content type ELEMENT_ONLY
class EnergySupplyType (teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergySupplyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergySupplyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 485, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}endUse uses Python identifier endUse
    __endUse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endUse'), 'endUse', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySupplyType_httpwww_sig3d_orgcitygml2_0energy0_5_0endUse', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 489, 10), )

    
    endUse = property(__endUse.value, __endUse.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}energyAmount uses Python identifier energyAmount
    __energyAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'energyAmount'), 'energyAmount', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySupplyType_httpwww_sig3d_orgcitygml2_0energy0_5_0energyAmount', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 490, 10), )

    
    energyAmount = property(__energyAmount.value, __energyAmount.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}medium uses Python identifier medium
    __medium = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'medium'), 'medium', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySupplyType_httpwww_sig3d_orgcitygml2_0energy0_5_0medium', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 491, 10), )

    
    medium = property(__medium.value, __medium.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}producedBy uses Python identifier producedBy
    __producedBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'producedBy'), 'producedBy', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySupplyType_httpwww_sig3d_orgcitygml2_0energy0_5_0producedBy', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 492, 10), )

    
    producedBy = property(__producedBy.value, __producedBy.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}coverage uses Python identifier coverage
    __coverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'coverage'), 'coverage', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySupplyType_httpwww_sig3d_orgcitygml2_0energy0_5_0coverage', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 493, 10), )

    
    coverage = property(__coverage.value, __coverage.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __endUse.name() : __endUse,
        __energyAmount.name() : __energyAmount,
        __medium.name() : __medium,
        __producedBy.name() : __producedBy,
        __coverage.name() : __coverage
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'EnergySupplyType', EnergySupplyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergySupplyPropertyType with content type ELEMENT_ONLY
class EnergySupplyPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergySupplyPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EnergySupplyPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 498, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergySupply uses Python identifier EnergySupply
    __EnergySupply = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EnergySupply'), 'EnergySupply', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySupplyPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0EnergySupply', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 480, 2), )

    
    EnergySupply = property(__EnergySupply.value, __EnergySupply.set, None, 'Energy supply is the part of the energy produced by the energy conversion systems which is used to satisfy the end-use demand of a city object.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySupplyPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySupplyPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySupplyPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySupplyPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySupplyPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySupplyPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySupplyPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_EnergySupplyPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __EnergySupply.name() : __EnergySupply
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'EnergySupplyPropertyType', EnergySupplyPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}FacilitiesType with content type ELEMENT_ONLY
class FacilitiesType (teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}FacilitiesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FacilitiesType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 509, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}operationSchedules uses Python identifier operationSchedules
    __operationSchedules = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'operationSchedules'), 'operationSchedules', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_FacilitiesType_httpwww_sig3d_orgcitygml2_0energy0_5_0operationSchedules', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 513, 10), )

    
    operationSchedules = property(__operationSchedules.value, __operationSchedules.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __operationSchedules.name() : __operationSchedules
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FacilitiesType', FacilitiesType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}FacilitiesPropertyType with content type ELEMENT_ONLY
class FacilitiesPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}FacilitiesPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FacilitiesPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 518, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}Facilities uses Python identifier Facilities
    __Facilities = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Facilities'), 'Facilities', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_FacilitiesPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0Facilities', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 504, 2), )

    
    Facilities = property(__Facilities.value, __Facilities.set, None, 'Facilities and Appliances inside the usage zone or building unit, which consumes and dissipate energy.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_FacilitiesPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_FacilitiesPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_FacilitiesPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_FacilitiesPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_FacilitiesPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_FacilitiesPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_FacilitiesPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_FacilitiesPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Facilities.name() : __Facilities
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'FacilitiesPropertyType', FacilitiesPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}GasPropertyType with content type ELEMENT_ONLY
class GasPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}GasPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GasPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 548, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}Gas uses Python identifier Gas
    __Gas = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Gas'), 'Gas', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GasPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0Gas', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 524, 2), )

    
    Gas = property(__Gas.value, __Gas.set, None, 'Gaseous material')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GasPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GasPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GasPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GasPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GasPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GasPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GasPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GasPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Gas.name() : __Gas
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'GasPropertyType', GasPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}GlazingPropertyType with content type ELEMENT_ONLY
class GlazingPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}GlazingPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GlazingPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 602, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}Glazing uses Python identifier Glazing
    __Glazing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Glazing'), 'Glazing', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0Glazing', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 554, 2), )

    
    Glazing = property(__Glazing.value, __Glazing.set, None, 'Transparent material')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Glazing.name() : __Glazing
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'GlazingPropertyType', GlazingPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}HeatExchangeTypeType with content type ELEMENT_ONLY
class HeatExchangeTypeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}HeatExchangeTypeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatExchangeTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 613, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}convectiveFraction uses Python identifier convectiveFraction
    __convectiveFraction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'convectiveFraction'), 'convectiveFraction', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatExchangeTypeType_httpwww_sig3d_orgcitygml2_0energy0_5_0convectiveFraction', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 615, 6), )

    
    convectiveFraction = property(__convectiveFraction.value, __convectiveFraction.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}latentFraction uses Python identifier latentFraction
    __latentFraction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'latentFraction'), 'latentFraction', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatExchangeTypeType_httpwww_sig3d_orgcitygml2_0energy0_5_0latentFraction', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 616, 6), )

    
    latentFraction = property(__latentFraction.value, __latentFraction.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}radiantFraction uses Python identifier radiantFraction
    __radiantFraction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'radiantFraction'), 'radiantFraction', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatExchangeTypeType_httpwww_sig3d_orgcitygml2_0energy0_5_0radiantFraction', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 617, 6), )

    
    radiantFraction = property(__radiantFraction.value, __radiantFraction.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}totalValue uses Python identifier totalValue
    __totalValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'totalValue'), 'totalValue', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatExchangeTypeType_httpwww_sig3d_orgcitygml2_0energy0_5_0totalValue', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 618, 6), )

    
    totalValue = property(__totalValue.value, __totalValue.set, None, None)

    _ElementMap.update({
        __convectiveFraction.name() : __convectiveFraction,
        __latentFraction.name() : __latentFraction,
        __radiantFraction.name() : __radiantFraction,
        __totalValue.name() : __totalValue
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'HeatExchangeTypeType', HeatExchangeTypeType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}HeatExchangeTypePropertyType with content type ELEMENT_ONLY
class HeatExchangeTypePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}HeatExchangeTypePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatExchangeTypePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 621, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}HeatExchangeType uses Python identifier HeatExchangeType
    __HeatExchangeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HeatExchangeType'), 'HeatExchangeType', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatExchangeTypePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0HeatExchangeType', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 608, 2), )

    
    HeatExchangeType = property(__HeatExchangeType.value, __HeatExchangeType.set, None, 'Contributions of the different types of heat or cool exchange (convective, radiant and latent)')

    _ElementMap.update({
        __HeatExchangeType.name() : __HeatExchangeType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'HeatExchangeTypePropertyType', HeatExchangeTypePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}HeatPumpPropertyType with content type ELEMENT_ONLY
class HeatPumpPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}HeatPumpPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatPumpPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 637, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}HeatPump uses Python identifier HeatPump
    __HeatPump = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HeatPump'), 'HeatPump', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatPumpPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0HeatPump', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 626, 2), )

    
    HeatPump = property(__HeatPump.value, __HeatPump.set, None, None)

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatPumpPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatPumpPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatPumpPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatPumpPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatPumpPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatPumpPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatPumpPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatPumpPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __HeatPump.name() : __HeatPump
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'HeatPumpPropertyType', HeatPumpPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}HouseholdType with content type ELEMENT_ONLY
class HouseholdType (teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}HouseholdType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HouseholdType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 648, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}residenceType uses Python identifier residenceType
    __residenceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'residenceType'), 'residenceType', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HouseholdType_httpwww_sig3d_orgcitygml2_0energy0_5_0residenceType', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 652, 10), )

    
    residenceType = property(__residenceType.value, __residenceType.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HouseholdType_httpwww_sig3d_orgcitygml2_0energy0_5_0type', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 653, 10), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __residenceType.name() : __residenceType,
        __type.name() : __type
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'HouseholdType', HouseholdType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}HouseholdPropertyType with content type ELEMENT_ONLY
class HouseholdPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}HouseholdPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HouseholdPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 658, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}Household uses Python identifier Household
    __Household = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Household'), 'Household', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HouseholdPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0Household', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 643, 2), )

    
    Household = property(__Household.value, __Household.set, None, 'Household is a group of persons living in the same dwelling, in the case where occupant type is residents.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HouseholdPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HouseholdPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HouseholdPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HouseholdPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HouseholdPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HouseholdPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HouseholdPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HouseholdPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Household.name() : __Household
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'HouseholdPropertyType', HouseholdPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ImageTextureType with content type ELEMENT_ONLY
class ImageTextureType (teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ImageTextureType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ImageTextureType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 669, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}url uses Python identifier url
    __url = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'url'), 'url', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ImageTextureType_httpwww_sig3d_orgcitygml2_0energy0_5_0url', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 673, 10), )

    
    url = property(__url.value, __url.set, None, 'Specifies location of the image. From X3D specification: The texture is read from the URL specified by the url field. When the url field contains no values, texturing is disabled. Browsers shall support the JPEG and PNG image file formats. In addition, browsers may support other image formats (e.g. CGM) which can be rendered into a 2D image. Support for the GIF format is also recommended (including transparency).')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}repeatS uses Python identifier repeatS
    __repeatS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'repeatS'), 'repeatS', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ImageTextureType_httpwww_sig3d_orgcitygml2_0energy0_5_0repeatS', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 678, 10), )

    
    repeatS = property(__repeatS.value, __repeatS.set, None, 'From X3D specification: If repeatS is TRUE, the texture map is repeated outside the [0.0, 1.0] texture coordinate range in the S direction so that it fills the shape. If repeatS is FALSE, the texture coordinates are clamped in the S direction to lie within the [0.0, 1.0] range.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}repeatT uses Python identifier repeatT
    __repeatT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'repeatT'), 'repeatT', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ImageTextureType_httpwww_sig3d_orgcitygml2_0energy0_5_0repeatT', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 683, 10), )

    
    repeatT = property(__repeatT.value, __repeatT.set, None, 'From X3D specification: If repeatT is TRUE, the texture map is repeated outside the [0.0, 1.0] texture coordinate range in the T direction so that it fills the shape. If repeatT is FALSE, the texture coordinates are clamped in the T direction to lie within the [0.0, 1.0] range.')

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __url.name() : __url,
        __repeatS.name() : __repeatS,
        __repeatT.name() : __repeatT
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ImageTextureType', ImageTextureType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ImageTexturePropertyType with content type ELEMENT_ONLY
class ImageTexturePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ImageTexturePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ImageTexturePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 692, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ImageTexture uses Python identifier ImageTexture
    __ImageTexture = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ImageTexture'), 'ImageTexture', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ImageTexturePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0ImageTexture', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 664, 2), )

    
    ImageTexture = property(__ImageTexture.value, __ImageTexture.set, None, 'This is an X3D element to map a texture to this material. From X3D specification: The ImageTexture node defines a texture map by specifying an image file and general parameters for mapping to geometry. Texture maps are defined in a 2D coordinate system (s, t) that ranges from [0.0, 1.0] in both directions. The bottom edge of the image corresponds to the S-axis of the texture map, and left edge of the image corresponds to the T-axis of the texture map. The lower-left pixel of the image corresponds to s=0, t=0, and the top-right pixel of the image corresponds to s=1, t=1. <!--When fixed: add type="x3d:ImageTexture"-->')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ImageTexturePropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ImageTexturePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ImageTexturePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ImageTexturePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ImageTexturePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ImageTexturePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ImageTexturePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ImageTexturePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __ImageTexture.name() : __ImageTexture
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'ImageTexturePropertyType', ImageTexturePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}IrregularTimeSeriesPropertyType with content type ELEMENT_ONLY
class IrregularTimeSeriesPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}IrregularTimeSeriesPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IrregularTimeSeriesPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 713, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}IrregularTimeSeries uses Python identifier IrregularTimeSeries
    __IrregularTimeSeries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IrregularTimeSeries'), 'IrregularTimeSeries', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_IrregularTimeSeriesPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0IrregularTimeSeries', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 698, 2), )

    
    IrregularTimeSeries = property(__IrregularTimeSeries.value, __IrregularTimeSeries.set, None, 'Irregular time series is the opposite of a regular time series. The data in the time series follows a temporal sequence, but the measurements might not happen at a regular time interval.\nhttp://www-01.ibm.com/support/knowledgecenter/SSCRJU_3.0.0/com.ibm.swg.im.infosphere.streams.timeseries-toolkit.doc/doc/timeseries-regular.html')

    _ElementMap.update({
        __IrregularTimeSeries.name() : __IrregularTimeSeries
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'IrregularTimeSeriesPropertyType', IrregularTimeSeriesPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}LayerType with content type ELEMENT_ONLY
class LayerType (teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}LayerType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LayerType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 723, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType
    
    # Element creationDate ({http://www.opengis.net/citygml/1.0}creationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element terminationDate ({http://www.opengis.net/citygml/1.0}terminationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element externalReference ({http://www.opengis.net/citygml/1.0}externalReference) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element generalizesTo ({http://www.opengis.net/citygml/1.0}generalizesTo) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element GenericApplicationPropertyOfCityObject ({http://www.opengis.net/citygml/1.0}_GenericApplicationPropertyOfCityObject) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}layerComponent uses Python identifier layerComponent
    __layerComponent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'layerComponent'), 'layerComponent', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerType_httpwww_sig3d_orgcitygml2_0energy0_5_0layerComponent', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 727, 10), )

    
    layerComponent = property(__layerComponent.value, __layerComponent.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __layerComponent.name() : __layerComponent
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'LayerType', LayerType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}LayerPropertyType with content type ELEMENT_ONLY
class LayerPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}LayerPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LayerPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 732, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}Layer uses Python identifier Layer
    __Layer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Layer'), 'Layer', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0Layer', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 718, 2), )

    
    Layer = property(__Layer.value, __Layer.set, None, 'A Layer is a combination of one of more materials, references via a LayerComponent.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Layer.name() : __Layer
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'LayerPropertyType', LayerPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}LayerComponentType with content type ELEMENT_ONLY
class LayerComponentType (teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}LayerComponentType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LayerComponentType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 743, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}areaFraction uses Python identifier areaFraction
    __areaFraction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'areaFraction'), 'areaFraction', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerComponentType_httpwww_sig3d_orgcitygml2_0energy0_5_0areaFraction', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 747, 10), )

    
    areaFraction = property(__areaFraction.value, __areaFraction.set, None, 'Percentage (1 - 100%) of the layer area that the referenced Material is made from.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}thickness uses Python identifier thickness
    __thickness = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'thickness'), 'thickness', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerComponentType_httpwww_sig3d_orgcitygml2_0energy0_5_0thickness', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 752, 10), )

    
    thickness = property(__thickness.value, __thickness.set, None, 'Thickness of a layer component.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}material uses Python identifier material
    __material = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'material'), 'material', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerComponentType_httpwww_sig3d_orgcitygml2_0energy0_5_0material', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 757, 10), )

    
    material = property(__material.value, __material.set, None, 'Reference to the correspondinf Material')

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __areaFraction.name() : __areaFraction,
        __thickness.name() : __thickness,
        __material.name() : __material
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'LayerComponentType', LayerComponentType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}LayerComponentPropertyType with content type ELEMENT_ONLY
class LayerComponentPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}LayerComponentPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LayerComponentPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 766, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}LayerComponent uses Python identifier LayerComponent
    __LayerComponent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LayerComponent'), 'LayerComponent', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerComponentPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0LayerComponent', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 738, 2), )

    
    LayerComponent = property(__LayerComponent.value, __LayerComponent.set, None, '<p> <img src="../png/LayerComponent-Illustration.png"></p>')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerComponentPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerComponentPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerComponentPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerComponentPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerComponentPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerComponentPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerComponentPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_LayerComponentPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __LayerComponent.name() : __LayerComponent
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'LayerComponentPropertyType', LayerComponentPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}MeasurementPointType with content type ELEMENT_ONLY
class MeasurementPointType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}MeasurementPointType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MeasurementPointType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 773, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}time uses Python identifier time
    __time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'time'), 'time', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_MeasurementPointType_httpwww_sig3d_orgcitygml2_0energy0_5_0time', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 775, 6), )

    
    time = property(__time.value, __time.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_MeasurementPointType_httpwww_sig3d_orgcitygml2_0energy0_5_0value', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 776, 6), )

    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        __time.name() : __time,
        __value.name() : __value
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MeasurementPointType', MeasurementPointType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}MeasurementPointPropertyType with content type ELEMENT_ONLY
class MeasurementPointPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}MeasurementPointPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MeasurementPointPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 779, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}MeasurementPoint uses Python identifier MeasurementPoint
    __MeasurementPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPoint'), 'MeasurementPoint', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_MeasurementPointPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0MeasurementPoint', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 772, 2), )

    
    MeasurementPoint = property(__MeasurementPoint.value, __MeasurementPoint.set, None, None)

    _ElementMap.update({
        __MeasurementPoint.name() : __MeasurementPoint
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MeasurementPointPropertyType', MeasurementPointPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}MechanicalVentilationPropertyType with content type ELEMENT_ONLY
class MechanicalVentilationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}MechanicalVentilationPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MechanicalVentilationPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 795, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}MechanicalVentilation uses Python identifier MechanicalVentilation
    __MechanicalVentilation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MechanicalVentilation'), 'MechanicalVentilation', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_MechanicalVentilationPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0MechanicalVentilation', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 784, 2), )

    
    MechanicalVentilation = property(__MechanicalVentilation.value, __MechanicalVentilation.set, None, None)

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_MechanicalVentilationPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_MechanicalVentilationPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_MechanicalVentilationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_MechanicalVentilationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_MechanicalVentilationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_MechanicalVentilationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_MechanicalVentilationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_MechanicalVentilationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __MechanicalVentilation.name() : __MechanicalVentilation
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'MechanicalVentilationPropertyType', MechanicalVentilationPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}OccupancyType with content type ELEMENT_ONLY
class OccupancyType (teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}OccupancyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OccupancyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 806, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}internGains uses Python identifier internGains
    __internGains = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'internGains'), 'internGains', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OccupancyType_httpwww_sig3d_orgcitygml2_0energy0_5_0internGains', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 810, 10), )

    
    internGains = property(__internGains.value, __internGains.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}numberOfOccupants uses Python identifier numberOfOccupants
    __numberOfOccupants = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numberOfOccupants'), 'numberOfOccupants', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OccupancyType_httpwww_sig3d_orgcitygml2_0energy0_5_0numberOfOccupants', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 811, 10), )

    
    numberOfOccupants = property(__numberOfOccupants.value, __numberOfOccupants.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}occupancyRate uses Python identifier occupancyRate
    __occupancyRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'occupancyRate'), 'occupancyRate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OccupancyType_httpwww_sig3d_orgcitygml2_0energy0_5_0occupancyRate', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 812, 10), )

    
    occupancyRate = property(__occupancyRate.value, __occupancyRate.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}occupantType uses Python identifier occupantType
    __occupantType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'occupantType'), 'occupantType', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OccupancyType_httpwww_sig3d_orgcitygml2_0energy0_5_0occupantType', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 813, 10), )

    
    occupantType = property(__occupantType.value, __occupantType.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}consiststOf uses Python identifier consiststOf
    __consiststOf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'consiststOf'), 'consiststOf', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OccupancyType_httpwww_sig3d_orgcitygml2_0energy0_5_0consiststOf', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 814, 10), )

    
    consiststOf = property(__consiststOf.value, __consiststOf.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __internGains.name() : __internGains,
        __numberOfOccupants.name() : __numberOfOccupants,
        __occupancyRate.name() : __occupancyRate,
        __occupantType.name() : __occupantType,
        __consiststOf.name() : __consiststOf
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'OccupancyType', OccupancyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}OccupancyPropertyType with content type ELEMENT_ONLY
class OccupancyPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}OccupancyPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OccupancyPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 819, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}Occupancy uses Python identifier Occupancy
    __Occupancy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Occupancy'), 'Occupancy', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OccupancyPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0Occupancy', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 801, 2), )

    
    Occupancy = property(__Occupancy.value, __Occupancy.set, None, 'Occupancy is an aggregated group of occupants of a usage zone or building unit, which can be residents, workers, visitors etc.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OccupancyPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OccupancyPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OccupancyPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OccupancyPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OccupancyPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OccupancyPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OccupancyPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OccupancyPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Occupancy.name() : __Occupancy
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'OccupancyPropertyType', OccupancyPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}OpaqueMaterialPropertyType with content type ELEMENT_ONLY
class OpaqueMaterialPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}OpaqueMaterialPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OpaqueMaterialPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 863, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}OpaqueMaterial uses Python identifier OpaqueMaterial
    __OpaqueMaterial = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OpaqueMaterial'), 'OpaqueMaterial', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OpaqueMaterialPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0OpaqueMaterial', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 825, 2), )

    
    OpaqueMaterial = property(__OpaqueMaterial.value, __OpaqueMaterial.set, None, 'Opaque material.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OpaqueMaterialPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OpaqueMaterialPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OpaqueMaterialPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OpaqueMaterialPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OpaqueMaterialPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OpaqueMaterialPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OpaqueMaterialPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OpaqueMaterialPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __OpaqueMaterial.name() : __OpaqueMaterial
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'OpaqueMaterialPropertyType', OpaqueMaterialPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}OperationModeType with content type ELEMENT_ONLY
class OperationModeType (teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}OperationModeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OperationModeType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 874, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}controls uses Python identifier controls
    __controls = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'controls'), 'controls', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModeType_httpwww_sig3d_orgcitygml2_0energy0_5_0controls', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 878, 10), )

    
    controls = property(__controls.value, __controls.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}endUse uses Python identifier endUse
    __endUse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endUse'), 'endUse', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModeType_httpwww_sig3d_orgcitygml2_0energy0_5_0endUse', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 879, 10), )

    
    endUse = property(__endUse.value, __endUse.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}operationTime uses Python identifier operationTime
    __operationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'operationTime'), 'operationTime', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModeType_httpwww_sig3d_orgcitygml2_0energy0_5_0operationTime', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 880, 10), )

    
    operationTime = property(__operationTime.value, __operationTime.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}yearlyGlobalEfficiency uses Python identifier yearlyGlobalEfficiency
    __yearlyGlobalEfficiency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'yearlyGlobalEfficiency'), 'yearlyGlobalEfficiency', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModeType_httpwww_sig3d_orgcitygml2_0energy0_5_0yearlyGlobalEfficiency', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 881, 10), )

    
    yearlyGlobalEfficiency = property(__yearlyGlobalEfficiency.value, __yearlyGlobalEfficiency.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}belongs uses Python identifier belongs
    __belongs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'belongs'), 'belongs', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModeType_httpwww_sig3d_orgcitygml2_0energy0_5_0belongs', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 882, 10), )

    
    belongs = property(__belongs.value, __belongs.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}produced uses Python identifier produced
    __produced = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'produced'), 'produced', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModeType_httpwww_sig3d_orgcitygml2_0energy0_5_0produced', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 883, 10), )

    
    produced = property(__produced.value, __produced.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __controls.name() : __controls,
        __endUse.name() : __endUse,
        __operationTime.name() : __operationTime,
        __yearlyGlobalEfficiency.name() : __yearlyGlobalEfficiency,
        __belongs.name() : __belongs,
        __produced.name() : __produced
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'OperationModeType', OperationModeType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}OperationModePropertyType with content type ELEMENT_ONLY
class OperationModePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}OperationModePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OperationModePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 888, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}OperationMode uses Python identifier OperationMode
    __OperationMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OperationMode'), 'OperationMode', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0OperationMode', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 869, 2), )

    
    OperationMode = property(__OperationMode.value, __OperationMode.set, None, 'Operation mode details the operation of the energy conversion system for a specific end-use and operation time.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModePropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OperationModePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __OperationMode.name() : __OperationMode
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'OperationModePropertyType', OperationModePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PhotovoltaicSystemPropertyType with content type ELEMENT_ONLY
class PhotovoltaicSystemPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PhotovoltaicSystemPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PhotovoltaicSystemPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 904, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PhotovoltaicSystem uses Python identifier PhotovoltaicSystem
    __PhotovoltaicSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PhotovoltaicSystem'), 'PhotovoltaicSystem', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PhotovoltaicSystemPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0PhotovoltaicSystem', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 894, 2), )

    
    PhotovoltaicSystem = property(__PhotovoltaicSystem.value, __PhotovoltaicSystem.set, None, None)

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PhotovoltaicSystemPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PhotovoltaicSystemPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PhotovoltaicSystemPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PhotovoltaicSystemPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PhotovoltaicSystemPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PhotovoltaicSystemPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PhotovoltaicSystemPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PhotovoltaicSystemPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __PhotovoltaicSystem.name() : __PhotovoltaicSystem
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'PhotovoltaicSystemPropertyType', PhotovoltaicSystemPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PowerDistributionSystemPropertyType with content type ELEMENT_ONLY
class PowerDistributionSystemPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PowerDistributionSystemPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerDistributionSystemPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 921, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PowerDistributionSystem uses Python identifier PowerDistributionSystem
    __PowerDistributionSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PowerDistributionSystem'), 'PowerDistributionSystem', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerDistributionSystemPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0PowerDistributionSystem', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 910, 2), )

    
    PowerDistributionSystem = property(__PowerDistributionSystem.value, __PowerDistributionSystem.set, None, None)

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerDistributionSystemPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerDistributionSystemPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerDistributionSystemPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerDistributionSystemPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerDistributionSystemPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerDistributionSystemPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerDistributionSystemPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerDistributionSystemPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __PowerDistributionSystem.name() : __PowerDistributionSystem
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'PowerDistributionSystemPropertyType', PowerDistributionSystemPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PowerStorageSystemPropertyType with content type ELEMENT_ONLY
class PowerStorageSystemPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PowerStorageSystemPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerStorageSystemPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 938, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PowerStorageSystem uses Python identifier PowerStorageSystem
    __PowerStorageSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PowerStorageSystem'), 'PowerStorageSystem', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerStorageSystemPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0PowerStorageSystem', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 927, 2), )

    
    PowerStorageSystem = property(__PowerStorageSystem.value, __PowerStorageSystem.set, None, None)

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerStorageSystemPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerStorageSystemPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerStorageSystemPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerStorageSystemPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerStorageSystemPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerStorageSystemPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerStorageSystemPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerStorageSystemPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __PowerStorageSystem.name() : __PowerStorageSystem
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'PowerStorageSystemPropertyType', PowerStorageSystemPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ReflectanceType with content type ELEMENT_ONLY
class ReflectanceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ReflectanceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReflectanceType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 949, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}percentage uses Python identifier percentage
    __percentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'percentage'), 'percentage', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ReflectanceType_httpwww_sig3d_orgcitygml2_0energy0_5_0percentage', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 951, 6), )

    
    percentage = property(__percentage.value, __percentage.set, None, 'Percentage of energy reflectance')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}surface uses Python identifier surface
    __surface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surface'), 'surface', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ReflectanceType_httpwww_sig3d_orgcitygml2_0energy0_5_0surface', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 956, 6), )

    
    surface = property(__surface.value, __surface.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}wavelengthRange uses Python identifier wavelengthRange
    __wavelengthRange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'wavelengthRange'), 'wavelengthRange', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ReflectanceType_httpwww_sig3d_orgcitygml2_0energy0_5_0wavelengthRange', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 957, 6), )

    
    wavelengthRange = property(__wavelengthRange.value, __wavelengthRange.set, None, 'Wavelength range')

    _ElementMap.update({
        __percentage.name() : __percentage,
        __surface.name() : __surface,
        __wavelengthRange.name() : __wavelengthRange
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ReflectanceType', ReflectanceType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ReflectancePropertyType with content type ELEMENT_ONLY
class ReflectancePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ReflectancePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReflectancePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 964, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}Reflectance uses Python identifier Reflectance
    __Reflectance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Reflectance'), 'Reflectance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ReflectancePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0Reflectance', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 944, 2), )

    
    Reflectance = property(__Reflectance.value, __Reflectance.set, None, 'Percentaged  energy reflectance in different wavelength ranges')

    _ElementMap.update({
        __Reflectance.name() : __Reflectance
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ReflectancePropertyType', ReflectancePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}RegularTimeSeriesPropertyType with content type ELEMENT_ONLY
class RegularTimeSeriesPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}RegularTimeSeriesPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RegularTimeSeriesPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 984, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}RegularTimeSeries uses Python identifier RegularTimeSeries
    __RegularTimeSeries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegularTimeSeries'), 'RegularTimeSeries', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_RegularTimeSeriesPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0RegularTimeSeries', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 969, 2), )

    
    RegularTimeSeries = property(__RegularTimeSeries.value, __RegularTimeSeries.set, None, 'regular time series contain values generated at regularly spaced interval of time')

    _ElementMap.update({
        __RegularTimeSeries.name() : __RegularTimeSeries
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'RegularTimeSeriesPropertyType', RegularTimeSeriesPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD0PropertyType with content type ELEMENT_ONLY
class ScheduleLoD0PropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD0PropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD0PropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 999, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD0 uses Python identifier ScheduleLoD0
    __ScheduleLoD0 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD0'), 'ScheduleLoD0', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ScheduleLoD0PropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0ScheduleLoD0', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 989, 2), )

    
    ScheduleLoD0 = property(__ScheduleLoD0.value, __ScheduleLoD0.set, None, None)

    _ElementMap.update({
        __ScheduleLoD0.name() : __ScheduleLoD0
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ScheduleLoD0PropertyType', ScheduleLoD0PropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD1PropertyType with content type ELEMENT_ONLY
class ScheduleLoD1PropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD1PropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD1PropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1018, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD1 uses Python identifier ScheduleLoD1
    __ScheduleLoD1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD1'), 'ScheduleLoD1', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ScheduleLoD1PropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0ScheduleLoD1', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1004, 2), )

    
    ScheduleLoD1 = property(__ScheduleLoD1.value, __ScheduleLoD1.set, None, None)

    _ElementMap.update({
        __ScheduleLoD1.name() : __ScheduleLoD1
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ScheduleLoD1PropertyType', ScheduleLoD1PropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD2PropertyType with content type ELEMENT_ONLY
class ScheduleLoD2PropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD2PropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD2PropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1033, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD2 uses Python identifier ScheduleLoD2
    __ScheduleLoD2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD2'), 'ScheduleLoD2', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ScheduleLoD2PropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0ScheduleLoD2', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1023, 2), )

    
    ScheduleLoD2 = property(__ScheduleLoD2.value, __ScheduleLoD2.set, None, None)

    _ElementMap.update({
        __ScheduleLoD2.name() : __ScheduleLoD2
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ScheduleLoD2PropertyType', ScheduleLoD2PropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD3PropertyType with content type ELEMENT_ONLY
class ScheduleLoD3PropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD3PropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD3PropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1048, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD3 uses Python identifier ScheduleLoD3
    __ScheduleLoD3 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD3'), 'ScheduleLoD3', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ScheduleLoD3PropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0ScheduleLoD3', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1038, 2), )

    
    ScheduleLoD3 = property(__ScheduleLoD3.value, __ScheduleLoD3.set, None, None)

    _ElementMap.update({
        __ScheduleLoD3.name() : __ScheduleLoD3
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ScheduleLoD3PropertyType', ScheduleLoD3PropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ShadingTypeType with content type ELEMENT_ONLY
class ShadingTypeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ShadingTypeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ShadingTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1054, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}maximumCoverRatio uses Python identifier maximumCoverRatio
    __maximumCoverRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maximumCoverRatio'), 'maximumCoverRatio', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ShadingTypeType_httpwww_sig3d_orgcitygml2_0energy0_5_0maximumCoverRatio', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1056, 6), )

    
    maximumCoverRatio = property(__maximumCoverRatio.value, __maximumCoverRatio.set, None, 'Maximum fraction of the related opening which can be covered with the shading device.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ShadingTypeType_httpwww_sig3d_orgcitygml2_0energy0_5_0name', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1061, 6), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}transmittance uses Python identifier transmittance
    __transmittance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transmittance'), 'transmittance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ShadingTypeType_httpwww_sig3d_orgcitygml2_0energy0_5_0transmittance', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1062, 6), )

    
    transmittance = property(__transmittance.value, __transmittance.set, None, None)

    _ElementMap.update({
        __maximumCoverRatio.name() : __maximumCoverRatio,
        __name.name() : __name,
        __transmittance.name() : __transmittance
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ShadingTypeType', ShadingTypeType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ShadingTypePropertyType with content type ELEMENT_ONLY
class ShadingTypePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ShadingTypePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ShadingTypePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1065, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ShadingType uses Python identifier ShadingType
    __ShadingType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ShadingType'), 'ShadingType', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ShadingTypePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0ShadingType', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1053, 2), )

    
    ShadingType = property(__ShadingType.value, __ShadingType.set, None, None)

    _ElementMap.update({
        __ShadingType.name() : __ShadingType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ShadingTypePropertyType', ShadingTypePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}SolarThermalSystemPropertyType with content type ELEMENT_ONLY
class SolarThermalSystemPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}SolarThermalSystemPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SolarThermalSystemPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1080, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}SolarThermalSystem uses Python identifier SolarThermalSystem
    __SolarThermalSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SolarThermalSystem'), 'SolarThermalSystem', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarThermalSystemPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0SolarThermalSystem', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1070, 2), )

    
    SolarThermalSystem = property(__SolarThermalSystem.value, __SolarThermalSystem.set, None, None)

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarThermalSystemPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarThermalSystemPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarThermalSystemPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarThermalSystemPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarThermalSystemPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarThermalSystemPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarThermalSystemPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarThermalSystemPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __SolarThermalSystem.name() : __SolarThermalSystem
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'SolarThermalSystemPropertyType', SolarThermalSystemPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}SurfaceComponentType with content type ELEMENT_ONLY
class SurfaceComponentType (teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}SurfaceComponentType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SurfaceComponentType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1091, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType
    
    # Element creationDate ({http://www.opengis.net/citygml/1.0}creationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element terminationDate ({http://www.opengis.net/citygml/1.0}terminationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element externalReference ({http://www.opengis.net/citygml/1.0}externalReference) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element generalizesTo ({http://www.opengis.net/citygml/1.0}generalizesTo) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element GenericApplicationPropertyOfCityObject ({http://www.opengis.net/citygml/1.0}_GenericApplicationPropertyOfCityObject) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}area uses Python identifier area
    __area = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'area'), 'area', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SurfaceComponentType_httpwww_sig3d_orgcitygml2_0energy0_5_0area', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1095, 10), )

    
    area = property(__area.value, __area.set, None, 'Area of the surface [m\xb2], portion of the related thermal boundary surface.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}isGroundCoupled uses Python identifier isGroundCoupled
    __isGroundCoupled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isGroundCoupled'), 'isGroundCoupled', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SurfaceComponentType_httpwww_sig3d_orgcitygml2_0energy0_5_0isGroundCoupled', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1100, 10), )

    
    isGroundCoupled = property(__isGroundCoupled.value, __isGroundCoupled.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}isSunExposed uses Python identifier isSunExposed
    __isSunExposed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isSunExposed'), 'isSunExposed', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SurfaceComponentType_httpwww_sig3d_orgcitygml2_0energy0_5_0isSunExposed', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1101, 10), )

    
    isSunExposed = property(__isSunExposed.value, __isSunExposed.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}relates uses Python identifier relates
    __relates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'relates'), 'relates', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SurfaceComponentType_httpwww_sig3d_orgcitygml2_0energy0_5_0relates', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1102, 10), )

    
    relates = property(__relates.value, __relates.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}adjacentTo uses Python identifier adjacentTo
    __adjacentTo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'adjacentTo'), 'adjacentTo', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SurfaceComponentType_httpwww_sig3d_orgcitygml2_0energy0_5_0adjacentTo', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1103, 10), )

    
    adjacentTo = property(__adjacentTo.value, __adjacentTo.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __area.name() : __area,
        __isGroundCoupled.name() : __isGroundCoupled,
        __isSunExposed.name() : __isSunExposed,
        __relates.name() : __relates,
        __adjacentTo.name() : __adjacentTo
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SurfaceComponentType', SurfaceComponentType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}SurfaceComponentPropertyType with content type ELEMENT_ONLY
class SurfaceComponentPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}SurfaceComponentPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SurfaceComponentPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1108, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}SurfaceComponent uses Python identifier SurfaceComponent
    __SurfaceComponent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SurfaceComponent'), 'SurfaceComponent', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SurfaceComponentPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0SurfaceComponent', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1086, 2), )

    
    SurfaceComponent = property(__SurfaceComponent.value, __SurfaceComponent.set, None, 'Part of the thermal boundary surface corresponding to an homogeneous construction component (e.g. windows, wall, insulated part of a wall etc.)')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SurfaceComponentPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SurfaceComponentPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SurfaceComponentPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SurfaceComponentPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SurfaceComponentPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SurfaceComponentPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SurfaceComponentPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SurfaceComponentPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __SurfaceComponent.name() : __SurfaceComponent
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'SurfaceComponentPropertyType', SurfaceComponentPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalBoundarySurfaceType with content type ELEMENT_ONLY
class ThermalBoundarySurfaceType (teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalBoundarySurfaceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalBoundarySurfaceType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1125, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType
    
    # Element creationDate ({http://www.opengis.net/citygml/1.0}creationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element terminationDate ({http://www.opengis.net/citygml/1.0}terminationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element externalReference ({http://www.opengis.net/citygml/1.0}externalReference) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element generalizesTo ({http://www.opengis.net/citygml/1.0}generalizesTo) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element GenericApplicationPropertyOfCityObject ({http://www.opengis.net/citygml/1.0}_GenericApplicationPropertyOfCityObject) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}azimuth uses Python identifier azimuth
    __azimuth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'azimuth'), 'azimuth', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfaceType_httpwww_sig3d_orgcitygml2_0energy0_5_0azimuth', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1129, 10), )

    
    azimuth = property(__azimuth.value, __azimuth.set, None, 'Azimuth angle of the normal surface vector.\nBy convention:\n- azimuth = 0 for north orientation.\n- Horizontal surface have a azimuth = 0.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}inclination uses Python identifier inclination
    __inclination = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'inclination'), 'inclination', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfaceType_httpwww_sig3d_orgcitygml2_0energy0_5_0inclination', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1137, 10), )

    
    inclination = property(__inclination.value, __inclination.set, None, 'Inclination angle of the normal surface vector.\nBy convention, inclination = 0 for horizontal plane.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfaceType_httpwww_sig3d_orgcitygml2_0energy0_5_0type', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1143, 10), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}composedOf uses Python identifier composedOf
    __composedOf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'composedOf'), 'composedOf', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfaceType_httpwww_sig3d_orgcitygml2_0energy0_5_0composedOf', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1144, 10), )

    
    composedOf = property(__composedOf.value, __composedOf.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}partOf uses Python identifier partOf
    __partOf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'partOf'), 'partOf', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfaceType_httpwww_sig3d_orgcitygml2_0energy0_5_0partOf', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1145, 10), )

    
    partOf = property(__partOf.value, __partOf.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}correspondsTo uses Python identifier correspondsTo
    __correspondsTo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'correspondsTo'), 'correspondsTo', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfaceType_httpwww_sig3d_orgcitygml2_0energy0_5_0correspondsTo', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1146, 10), )

    
    correspondsTo = property(__correspondsTo.value, __correspondsTo.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __azimuth.name() : __azimuth,
        __inclination.name() : __inclination,
        __type.name() : __type,
        __composedOf.name() : __composedOf,
        __partOf.name() : __partOf,
        __correspondsTo.name() : __correspondsTo
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ThermalBoundarySurfaceType', ThermalBoundarySurfaceType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalBoundarySurfacePropertyType with content type ELEMENT_ONLY
class ThermalBoundarySurfacePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalBoundarySurfacePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalBoundarySurfacePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1151, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalBoundarySurface uses Python identifier ThermalBoundarySurface
    __ThermalBoundarySurface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ThermalBoundarySurface'), 'ThermalBoundarySurface', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfacePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0ThermalBoundarySurface', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1120, 2), )

    
    ThermalBoundarySurface = property(__ThermalBoundarySurface.value, __ThermalBoundarySurface.set, None, 'Thermal boundary surfaces are quasi-coplanar surfaces bounding the thermal zone. They may be linked to the gml:BoundarySurface when possible, but not necessary (e.g. cellar ceiling or top storey ceiling in the case of LOD1-3)')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfacePropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfacePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfacePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfacePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfacePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfacePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfacePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalBoundarySurfacePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __ThermalBoundarySurface.name() : __ThermalBoundarySurface
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'ThermalBoundarySurfacePropertyType', ThermalBoundarySurfacePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalDistributionSystemPropertyType with content type ELEMENT_ONLY
class ThermalDistributionSystemPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalDistributionSystemPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalDistributionSystemPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1187, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalDistributionSystem uses Python identifier ThermalDistributionSystem
    __ThermalDistributionSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ThermalDistributionSystem'), 'ThermalDistributionSystem', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0ThermalDistributionSystem', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1172, 2), )

    
    ThermalDistributionSystem = property(__ThermalDistributionSystem.value, __ThermalDistributionSystem.set, None, None)

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __ThermalDistributionSystem.name() : __ThermalDistributionSystem
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'ThermalDistributionSystemPropertyType', ThermalDistributionSystemPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalStorageSystemPropertyType with content type ELEMENT_ONLY
class ThermalStorageSystemPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalStorageSystemPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalStorageSystemPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1210, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalStorageSystem uses Python identifier ThermalStorageSystem
    __ThermalStorageSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ThermalStorageSystem'), 'ThermalStorageSystem', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalStorageSystemPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0ThermalStorageSystem', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1193, 2), )

    
    ThermalStorageSystem = property(__ThermalStorageSystem.value, __ThermalStorageSystem.set, None, None)

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalStorageSystemPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalStorageSystemPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalStorageSystemPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalStorageSystemPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalStorageSystemPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalStorageSystemPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalStorageSystemPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalStorageSystemPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __ThermalStorageSystem.name() : __ThermalStorageSystem
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'ThermalStorageSystemPropertyType', ThermalStorageSystemPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalZoneType with content type ELEMENT_ONLY
class ThermalZoneType (teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalZoneType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalZoneType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1222, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType
    
    # Element creationDate ({http://www.opengis.net/citygml/1.0}creationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element terminationDate ({http://www.opengis.net/citygml/1.0}terminationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element externalReference ({http://www.opengis.net/citygml/1.0}externalReference) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element generalizesTo ({http://www.opengis.net/citygml/1.0}generalizesTo) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element GenericApplicationPropertyOfCityObject ({http://www.opengis.net/citygml/1.0}_GenericApplicationPropertyOfCityObject) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}additionalThermalBridgeUValue uses Python identifier additionalThermalBridgeUValue
    __additionalThermalBridgeUValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'additionalThermalBridgeUValue'), 'additionalThermalBridgeUValue', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0additionalThermalBridgeUValue', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1226, 10), )

    
    additionalThermalBridgeUValue = property(__additionalThermalBridgeUValue.value, __additionalThermalBridgeUValue.set, None, 'Transmission heat loss contribution [W/m\xb2.K] of the thermal bridges of the thermal zone shell to the overall UValue.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}cooledFloorArea uses Python identifier cooledFloorArea
    __cooledFloorArea = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cooledFloorArea'), 'cooledFloorArea', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0cooledFloorArea', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1231, 10), )

    
    cooledFloorArea = property(__cooledFloorArea.value, __cooledFloorArea.set, None, 'Actively cooled floor area [m\xb2]')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}effectiveThermalCapacity uses Python identifier effectiveThermalCapacity
    __effectiveThermalCapacity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'effectiveThermalCapacity'), 'effectiveThermalCapacity', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0effectiveThermalCapacity', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1236, 10), )

    
    effectiveThermalCapacity = property(__effectiveThermalCapacity.value, __effectiveThermalCapacity.set, None, 'Thermal capacity [Wh/K] of the zone including the contributing construction layers and zone fournitures.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}heatedFloorArea uses Python identifier heatedFloorArea
    __heatedFloorArea = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'heatedFloorArea'), 'heatedFloorArea', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0heatedFloorArea', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1241, 10), )

    
    heatedFloorArea = property(__heatedFloorArea.value, __heatedFloorArea.set, None, 'Actively heated floor area [m\xb2]')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}indirectlyHeatedAreaRatio uses Python identifier indirectlyHeatedAreaRatio
    __indirectlyHeatedAreaRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'indirectlyHeatedAreaRatio'), 'indirectlyHeatedAreaRatio', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0indirectlyHeatedAreaRatio', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1246, 10), )

    
    indirectlyHeatedAreaRatio = property(__indirectlyHeatedAreaRatio.value, __indirectlyHeatedAreaRatio.set, None, '[find precise definition]')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}infiltrationRate uses Python identifier infiltrationRate
    __infiltrationRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'infiltrationRate'), 'infiltrationRate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0infiltrationRate', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1251, 10), )

    
    infiltrationRate = property(__infiltrationRate.value, __infiltrationRate.set, None, 'Air change rate [1/h] due to air leakage of the zone shell.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}boundedBy uses Python identifier boundedBy_
    __boundedBy_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'boundedBy'), 'boundedBy_', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0boundedBy', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1256, 10), )

    
    boundedBy_ = property(__boundedBy_.value, __boundedBy_.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}relates uses Python identifier relates
    __relates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'relates'), 'relates', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0relates', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1257, 10), )

    
    relates = property(__relates.value, __relates.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __additionalThermalBridgeUValue.name() : __additionalThermalBridgeUValue,
        __cooledFloorArea.name() : __cooledFloorArea,
        __effectiveThermalCapacity.name() : __effectiveThermalCapacity,
        __heatedFloorArea.name() : __heatedFloorArea,
        __indirectlyHeatedAreaRatio.name() : __indirectlyHeatedAreaRatio,
        __infiltrationRate.name() : __infiltrationRate,
        __boundedBy_.name() : __boundedBy_,
        __relates.name() : __relates
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ThermalZoneType', ThermalZoneType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalZonePropertyType with content type ELEMENT_ONLY
class ThermalZonePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalZonePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalZonePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1262, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalZone uses Python identifier ThermalZone
    __ThermalZone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ThermalZone'), 'ThermalZone', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZonePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0ThermalZone', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1216, 2), )

    
    ThermalZone = property(__ThermalZone.value, __ThermalZone.set, None, 'A thermal zone is a zone of a building which serves as unit for the building heating and cooling simulation. For the simulation, a thermal zone is considered as isothermal.\nIt is a semantic object, which may be or not related to a geometric entity.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZonePropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZonePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZonePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZonePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZonePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZonePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZonePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalZonePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __ThermalZone.name() : __ThermalZone
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'ThermalZonePropertyType', ThermalZonePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}TimeValuesPropertiesType with content type ELEMENT_ONLY
class TimeValuesPropertiesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}TimeValuesPropertiesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeValuesPropertiesType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1273, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}acquisitionMethod uses Python identifier acquisitionMethod
    __acquisitionMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'acquisitionMethod'), 'acquisitionMethod', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_TimeValuesPropertiesType_httpwww_sig3d_orgcitygml2_0energy0_5_0acquisitionMethod', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1275, 6), )

    
    acquisitionMethod = property(__acquisitionMethod.value, __acquisitionMethod.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}interpolationType uses Python identifier interpolationType
    __interpolationType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'interpolationType'), 'interpolationType', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_TimeValuesPropertiesType_httpwww_sig3d_orgcitygml2_0energy0_5_0interpolationType', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1276, 6), )

    
    interpolationType = property(__interpolationType.value, __interpolationType.set, None, 'InterpolcationType defined in WaterML:\nhttp://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/waterml/2.0/interpolationType/')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}qualityDescription uses Python identifier qualityDescription
    __qualityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'qualityDescription'), 'qualityDescription', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_TimeValuesPropertiesType_httpwww_sig3d_orgcitygml2_0energy0_5_0qualityDescription', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1282, 6), )

    
    qualityDescription = property(__qualityDescription.value, __qualityDescription.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'source'), 'source', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_TimeValuesPropertiesType_httpwww_sig3d_orgcitygml2_0energy0_5_0source', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1283, 6), )

    
    source = property(__source.value, __source.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}uom uses Python identifier uom
    __uom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'uom'), 'uom', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_TimeValuesPropertiesType_httpwww_sig3d_orgcitygml2_0energy0_5_0uom', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1284, 6), )

    
    uom = property(__uom.value, __uom.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}variableLabel uses Python identifier variableLabel
    __variableLabel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'variableLabel'), 'variableLabel', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_TimeValuesPropertiesType_httpwww_sig3d_orgcitygml2_0energy0_5_0variableLabel', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1285, 6), )

    
    variableLabel = property(__variableLabel.value, __variableLabel.set, None, None)

    _ElementMap.update({
        __acquisitionMethod.name() : __acquisitionMethod,
        __interpolationType.name() : __interpolationType,
        __qualityDescription.name() : __qualityDescription,
        __source.name() : __source,
        __uom.name() : __uom,
        __variableLabel.name() : __variableLabel
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TimeValuesPropertiesType', TimeValuesPropertiesType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}TimeValuesPropertiesPropertyType with content type ELEMENT_ONLY
class TimeValuesPropertiesPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}TimeValuesPropertiesPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeValuesPropertiesPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1288, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}TimeValuesProperties uses Python identifier TimeValuesProperties
    __TimeValuesProperties = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeValuesProperties'), 'TimeValuesProperties', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_TimeValuesPropertiesPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0TimeValuesProperties', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1268, 2), )

    
    TimeValuesProperties = property(__TimeValuesProperties.value, __TimeValuesProperties.set, None, 'Information and properties of a given variable.')

    _ElementMap.update({
        __TimeValuesProperties.name() : __TimeValuesProperties
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TimeValuesPropertiesPropertyType', TimeValuesPropertiesPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}TransmittanceType with content type ELEMENT_ONLY
class TransmittanceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}TransmittanceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TransmittanceType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1298, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}percentage uses Python identifier percentage
    __percentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'percentage'), 'percentage', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_TransmittanceType_httpwww_sig3d_orgcitygml2_0energy0_5_0percentage', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1300, 6), )

    
    percentage = property(__percentage.value, __percentage.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}wavelengthRange uses Python identifier wavelengthRange
    __wavelengthRange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'wavelengthRange'), 'wavelengthRange', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_TransmittanceType_httpwww_sig3d_orgcitygml2_0energy0_5_0wavelengthRange', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1301, 6), )

    
    wavelengthRange = property(__wavelengthRange.value, __wavelengthRange.set, None, None)

    _ElementMap.update({
        __percentage.name() : __percentage,
        __wavelengthRange.name() : __wavelengthRange
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TransmittanceType', TransmittanceType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}TransmittancePropertyType with content type ELEMENT_ONLY
class TransmittancePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}TransmittancePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TransmittancePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1304, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}Transmittance uses Python identifier Transmittance
    __Transmittance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Transmittance'), 'Transmittance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_TransmittancePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0Transmittance', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1293, 2), )

    
    Transmittance = property(__Transmittance.value, __Transmittance.set, None, 'Percentaged  energy transmittance in different wavelength ranges')

    _ElementMap.update({
        __Transmittance.name() : __Transmittance
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TransmittancePropertyType', TransmittancePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}UsageZoneType with content type ELEMENT_ONLY
class UsageZoneType (teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}UsageZoneType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UsageZoneType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1314, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.citygml.raw.base.AbstractCityObjectType
    
    # Element creationDate ({http://www.opengis.net/citygml/1.0}creationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element terminationDate ({http://www.opengis.net/citygml/1.0}terminationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element externalReference ({http://www.opengis.net/citygml/1.0}externalReference) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element generalizesTo ({http://www.opengis.net/citygml/1.0}generalizesTo) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element GenericApplicationPropertyOfCityObject ({http://www.opengis.net/citygml/1.0}_GenericApplicationPropertyOfCityObject) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}coolingSchedule uses Python identifier coolingSchedule
    __coolingSchedule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'coolingSchedule'), 'coolingSchedule', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0coolingSchedule', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1318, 10), )

    
    coolingSchedule = property(__coolingSchedule.value, __coolingSchedule.set, None, 'Temperature schedule [\xb0C] of the active cooling inside the usage zone.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}heatingSchedule uses Python identifier heatingSchedule
    __heatingSchedule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'heatingSchedule'), 'heatingSchedule', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0heatingSchedule', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1323, 10), )

    
    heatingSchedule = property(__heatingSchedule.value, __heatingSchedule.set, None, 'Temperature schedule [\xb0C] of the active heating inside the usage zone.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}usageZoneClass uses Python identifier usageZoneClass
    __usageZoneClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usageZoneClass'), 'usageZoneClass', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0usageZoneClass', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1328, 10), )

    
    usageZoneClass = property(__usageZoneClass.value, __usageZoneClass.set, None, 'Usage class of the zone.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}usedArea uses Python identifier usedArea
    __usedArea = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usedArea'), 'usedArea', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0usedArea', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1333, 10), )

    
    usedArea = property(__usedArea.value, __usedArea.set, None, 'Used floor area [m\xb2].')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}usedFloorNumbers uses Python identifier usedFloorNumbers
    __usedFloorNumbers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usedFloorNumbers'), 'usedFloorNumbers', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0usedFloorNumbers', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1338, 10), )

    
    usedFloorNumbers = property(__usedFloorNumbers.value, __usedFloorNumbers.set, None, 'List of the number of floors part of the usage zone (0 = ground level).')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ventilationSchedule uses Python identifier ventilationSchedule
    __ventilationSchedule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ventilationSchedule'), 'ventilationSchedule', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0ventilationSchedule', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1343, 10), )

    
    ventilationSchedule = property(__ventilationSchedule.value, __ventilationSchedule.set, None, 'Air change rate [1/h] schedule of the ventilation system inside the usage zone.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}contains uses Python identifier contains
    __contains = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'contains'), 'contains', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0contains', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1348, 10), )

    
    contains = property(__contains.value, __contains.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}occupiedBy uses Python identifier occupiedBy
    __occupiedBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'occupiedBy'), 'occupiedBy', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0occupiedBy', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1349, 10), )

    
    occupiedBy = property(__occupiedBy.value, __occupiedBy.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}has uses Python identifier has
    __has = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'has'), 'has', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZoneType_httpwww_sig3d_orgcitygml2_0energy0_5_0has', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1350, 10), )

    
    has = property(__has.value, __has.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __coolingSchedule.name() : __coolingSchedule,
        __heatingSchedule.name() : __heatingSchedule,
        __usageZoneClass.name() : __usageZoneClass,
        __usedArea.name() : __usedArea,
        __usedFloorNumbers.name() : __usedFloorNumbers,
        __ventilationSchedule.name() : __ventilationSchedule,
        __contains.name() : __contains,
        __occupiedBy.name() : __occupiedBy,
        __has.name() : __has
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UsageZoneType', UsageZoneType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}UsageZonePropertyType with content type ELEMENT_ONLY
class UsageZonePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}UsageZonePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UsageZonePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1355, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}UsageZone uses Python identifier UsageZone
    __UsageZone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UsageZone'), 'UsageZone', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZonePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0UsageZone', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1309, 2), )

    
    UsageZone = property(__UsageZone.value, __UsageZone.set, None, 'A usage zone is a zone of a building with homogeneous usage type.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZonePropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZonePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZonePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZonePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZonePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZonePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZonePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_UsageZonePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __UsageZone.name() : __UsageZone
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', 'UsageZonePropertyType', UsageZonePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_ScheduleType with content type EMPTY
class ScheduleType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_ScheduleType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, '_ScheduleType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1408, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', '_ScheduleType', ScheduleType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SchedulePropertyType with content type ELEMENT_ONLY
class SchedulePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SchedulePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, '_SchedulePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1411, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_Schedule uses Python identifier Schedule
    __Schedule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, '_Schedule'), 'Schedule', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SchedulePropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0_Schedule', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1407, 2), )

    
    Schedule = property(__Schedule.value, __Schedule.set, None, None)

    _ElementMap.update({
        __Schedule.name() : __Schedule
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', '_SchedulePropertyType', SchedulePropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SolarEnergySystemPropertyType with content type ELEMENT_ONLY
class SolarEnergySystemPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SolarEnergySystemPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, '_SolarEnergySystemPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1429, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SolarEnergySystem uses Python identifier SolarEnergySystem
    __SolarEnergySystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, '_SolarEnergySystem'), 'SolarEnergySystem', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarEnergySystemPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarEnergySystem', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1416, 2), )

    
    SolarEnergySystem = property(__SolarEnergySystem.value, __SolarEnergySystem.set, None, None)

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarEnergySystemPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarEnergySystemPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarEnergySystemPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarEnergySystemPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarEnergySystemPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarEnergySystemPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarEnergySystemPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarEnergySystemPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __SolarEnergySystem.name() : __SolarEnergySystem
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', '_SolarEnergySystemPropertyType', SolarEnergySystemPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_StorageSystemType with content type ELEMENT_ONLY
class StorageSystemType (teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_StorageSystemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, '_StorageSystemType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1440, 2)
    _ElementMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType._AttributeMap.copy()
    # Base type is teaser.Data.SchemaBindings.opengis.raw.gml.AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}energyDistribution uses Python identifier energyDistribution
    __energyDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'energyDistribution'), 'energyDistribution', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_StorageSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0energyDistribution', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1444, 10), )

    
    energyDistribution = property(__energyDistribution.value, __energyDistribution.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __energyDistribution.name() : __energyDistribution
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', '_StorageSystemType', StorageSystemType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_StorageSystemPropertyType with content type ELEMENT_ONLY
class StorageSystemPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_StorageSystemPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, '_StorageSystemPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1449, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_StorageSystem uses Python identifier StorageSystem
    __StorageSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, '_StorageSystem'), 'StorageSystem', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_StorageSystemPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0_StorageSystem', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1435, 2), )

    
    StorageSystem = property(__StorageSystem.value, __StorageSystem.set, None, 'System storing energy. A same storage may store the energy of different end-users and different end-use.')

    
    # Attribute {http://www.opengis.net/gml}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_StorageSystemPropertyType_httpwww_opengis_netgmlremoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 258, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 269, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, 'Reference to an XML Schema fragment that specifies the content model of the propertys value. This is in conformance with the XML Schema Section 4.14 Referencing Schemas from Elsewhere.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_StorageSystemPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_StorageSystemPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_StorageSystemPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_StorageSystemPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_StorageSystemPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_StorageSystemPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_StorageSystemPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mqXn05k/PyXB-1.2.4/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __StorageSystem.name() : __StorageSystem
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
Namespace.addCategoryObject('typeBinding', '_StorageSystemPropertyType', StorageSystemPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_TimeSeriesType with content type ELEMENT_ONLY
class TimeSeriesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_TimeSeriesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, '_TimeSeriesType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1460, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}id uses Python identifier id
    __id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_TimeSeriesType_httpwww_sig3d_orgcitygml2_0energy0_5_0id', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1462, 6), )

    
    id = property(__id.value, __id.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}temporalExtent uses Python identifier temporalExtent
    __temporalExtent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'temporalExtent'), 'temporalExtent', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_TimeSeriesType_httpwww_sig3d_orgcitygml2_0energy0_5_0temporalExtent', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1463, 6), )

    
    temporalExtent = property(__temporalExtent.value, __temporalExtent.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}variableProperties uses Python identifier variableProperties
    __variableProperties = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'variableProperties'), 'variableProperties', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_TimeSeriesType_httpwww_sig3d_orgcitygml2_0energy0_5_0variableProperties', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1464, 6), )

    
    variableProperties = property(__variableProperties.value, __variableProperties.set, None, None)

    _ElementMap.update({
        __id.name() : __id,
        __temporalExtent.name() : __temporalExtent,
        __variableProperties.name() : __variableProperties
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', '_TimeSeriesType', TimeSeriesType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_TimeSeriesPropertyType with content type ELEMENT_ONLY
class TimeSeriesPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_TimeSeriesPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, '_TimeSeriesPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1467, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_TimeSeries uses Python identifier TimeSeries
    __TimeSeries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, '_TimeSeries'), 'TimeSeries', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_TimeSeriesPropertyType_httpwww_sig3d_orgcitygml2_0energy0_5_0_TimeSeries', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1455, 2), )

    
    TimeSeries = property(__TimeSeries.value, __TimeSeries.set, None, 'Consistent series of time-depending values.')

    _ElementMap.update({
        __TimeSeries.name() : __TimeSeries
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', '_TimeSeriesPropertyType', TimeSeriesPropertyType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}BoilerType with content type ELEMENT_ONLY
class BoilerType (EnergyConversionSystemType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}BoilerType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BoilerType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 61, 2)
    _ElementMap = EnergyConversionSystemType._ElementMap.copy()
    _AttributeMap = EnergyConversionSystemType._AttributeMap.copy()
    # Base type is EnergyConversionSystemType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}condensation uses Python identifier condensation
    __condensation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'condensation'), 'condensation', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_BoilerType_httpwww_sig3d_orgcitygml2_0energy0_5_0condensation', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 65, 10), )

    
    condensation = property(__condensation.value, __condensation.set, None, None)

    
    # Element efficiencyIndicator ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}efficiencyIndicator) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedNominalPower ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedNominalPower) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element model ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}model) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element nominalEfficiency ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}nominalEfficiency) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element number ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}number) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element productAndInstallationDocument ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}productAndInstallationDocument) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element yearOfManufacture ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}yearOfManufacture) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element has ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}has) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element consumes ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}consumes) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedIn ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedIn) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __condensation.name() : __condensation
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'BoilerType', BoilerType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}CombinedHeatPowerType with content type ELEMENT_ONLY
class CombinedHeatPowerType (EnergyConversionSystemType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}CombinedHeatPowerType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CombinedHeatPowerType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 102, 2)
    _ElementMap = EnergyConversionSystemType._ElementMap.copy()
    _AttributeMap = EnergyConversionSystemType._AttributeMap.copy()
    # Base type is EnergyConversionSystemType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}technologyType uses Python identifier technologyType
    __technologyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'technologyType'), 'technologyType', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_CombinedHeatPowerType_httpwww_sig3d_orgcitygml2_0energy0_5_0technologyType', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 106, 10), )

    
    technologyType = property(__technologyType.value, __technologyType.set, None, None)

    
    # Element efficiencyIndicator ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}efficiencyIndicator) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedNominalPower ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedNominalPower) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element model ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}model) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element nominalEfficiency ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}nominalEfficiency) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element number ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}number) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element productAndInstallationDocument ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}productAndInstallationDocument) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element yearOfManufacture ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}yearOfManufacture) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element has ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}has) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element consumes ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}consumes) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedIn ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedIn) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __technologyType.name() : __technologyType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CombinedHeatPowerType', CombinedHeatPowerType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DHWFacilitiesType with content type ELEMENT_ONLY
class DHWFacilitiesType (FacilitiesType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DHWFacilitiesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DHWFacilitiesType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 215, 2)
    _ElementMap = FacilitiesType._ElementMap.copy()
    _AttributeMap = FacilitiesType._AttributeMap.copy()
    # Base type is FacilitiesType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}numberOfBath uses Python identifier numberOfBath
    __numberOfBath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numberOfBath'), 'numberOfBath', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DHWFacilitiesType_httpwww_sig3d_orgcitygml2_0energy0_5_0numberOfBath', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 219, 10), )

    
    numberOfBath = property(__numberOfBath.value, __numberOfBath.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}numberOfShower uses Python identifier numberOfShower
    __numberOfShower = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numberOfShower'), 'numberOfShower', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DHWFacilitiesType_httpwww_sig3d_orgcitygml2_0energy0_5_0numberOfShower', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 220, 10), )

    
    numberOfShower = property(__numberOfShower.value, __numberOfShower.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}numberOfWashBasin uses Python identifier numberOfWashBasin
    __numberOfWashBasin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numberOfWashBasin'), 'numberOfWashBasin', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DHWFacilitiesType_httpwww_sig3d_orgcitygml2_0energy0_5_0numberOfWashBasin', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 221, 10), )

    
    numberOfWashBasin = property(__numberOfWashBasin.value, __numberOfWashBasin.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}waterStorageVolume uses Python identifier waterStorageVolume
    __waterStorageVolume = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'waterStorageVolume'), 'waterStorageVolume', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DHWFacilitiesType_httpwww_sig3d_orgcitygml2_0energy0_5_0waterStorageVolume', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 222, 10), )

    
    waterStorageVolume = property(__waterStorageVolume.value, __waterStorageVolume.set, None, None)

    
    # Element operationSchedules ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}operationSchedules) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}FacilitiesType
    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __numberOfBath.name() : __numberOfBath,
        __numberOfShower.name() : __numberOfShower,
        __numberOfWashBasin.name() : __numberOfWashBasin,
        __waterStorageVolume.name() : __waterStorageVolume
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DHWFacilitiesType', DHWFacilitiesType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DistrictNetworkSubstationType with content type ELEMENT_ONLY
class DistrictNetworkSubstationType (EnergyConversionSystemType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}DistrictNetworkSubstationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DistrictNetworkSubstationType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 246, 2)
    _ElementMap = EnergyConversionSystemType._ElementMap.copy()
    _AttributeMap = EnergyConversionSystemType._AttributeMap.copy()
    # Base type is EnergyConversionSystemType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}networkId uses Python identifier networkId
    __networkId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'networkId'), 'networkId', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DistrictNetworkSubstationType_httpwww_sig3d_orgcitygml2_0energy0_5_0networkId', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 250, 10), )

    
    networkId = property(__networkId.value, __networkId.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}networkNodeId uses Python identifier networkNodeId
    __networkNodeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'networkNodeId'), 'networkNodeId', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_DistrictNetworkSubstationType_httpwww_sig3d_orgcitygml2_0energy0_5_0networkNodeId', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 251, 10), )

    
    networkNodeId = property(__networkNodeId.value, __networkNodeId.set, None, None)

    
    # Element efficiencyIndicator ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}efficiencyIndicator) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedNominalPower ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedNominalPower) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element model ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}model) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element nominalEfficiency ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}nominalEfficiency) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element number ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}number) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element productAndInstallationDocument ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}productAndInstallationDocument) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element yearOfManufacture ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}yearOfManufacture) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element has ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}has) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element consumes ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}consumes) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedIn ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedIn) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __networkId.name() : __networkId,
        __networkNodeId.name() : __networkNodeId
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DistrictNetworkSubstationType', DistrictNetworkSubstationType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ElectricalAppliancesType with content type ELEMENT_ONLY
class ElectricalAppliancesType (FacilitiesType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ElectricalAppliancesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricalAppliancesType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 267, 2)
    _ElementMap = FacilitiesType._ElementMap.copy()
    _AttributeMap = FacilitiesType._AttributeMap.copy()
    # Base type is FacilitiesType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}electricalPower uses Python identifier electricalPower
    __electricalPower = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'electricalPower'), 'electricalPower', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalAppliancesType_httpwww_sig3d_orgcitygml2_0energy0_5_0electricalPower', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 271, 10), )

    
    electricalPower = property(__electricalPower.value, __electricalPower.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}heatLosses uses Python identifier heatLosses
    __heatLosses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'heatLosses'), 'heatLosses', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalAppliancesType_httpwww_sig3d_orgcitygml2_0energy0_5_0heatLosses', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 272, 10), )

    
    heatLosses = property(__heatLosses.value, __heatLosses.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}name uses Python identifier name_
    __name_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name_', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ElectricalAppliancesType_httpwww_sig3d_orgcitygml2_0energy0_5_0name', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 273, 10), )

    
    name_ = property(__name_.value, __name_.set, None, None)

    
    # Element operationSchedules ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}operationSchedules) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}FacilitiesType
    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __electricalPower.name() : __electricalPower,
        __heatLosses.name() : __heatLosses,
        __name_.name() : __name_
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ElectricalAppliancesType', ElectricalAppliancesType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ElectricalResistanceType with content type ELEMENT_ONLY
class ElectricalResistanceType (EnergyConversionSystemType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ElectricalResistanceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ElectricalResistanceType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 285, 2)
    _ElementMap = EnergyConversionSystemType._ElementMap.copy()
    _AttributeMap = EnergyConversionSystemType._AttributeMap.copy()
    # Base type is EnergyConversionSystemType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element efficiencyIndicator ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}efficiencyIndicator) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedNominalPower ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedNominalPower) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element model ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}model) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element nominalEfficiency ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}nominalEfficiency) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element number ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}number) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element productAndInstallationDocument ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}productAndInstallationDocument) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element yearOfManufacture ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}yearOfManufacture) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element has ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}has) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element consumes ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}consumes) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedIn ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedIn) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ElectricalResistanceType', ElectricalResistanceType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}GasType with content type ELEMENT_ONLY
class GasType (AbstractMaterialType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}GasType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GasType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 529, 2)
    _ElementMap = AbstractMaterialType._ElementMap.copy()
    _AttributeMap = AbstractMaterialType._AttributeMap.copy()
    # Base type is AbstractMaterialType
    
    # Element creationDate ({http://www.opengis.net/citygml/1.0}creationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element terminationDate ({http://www.opengis.net/citygml/1.0}terminationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element externalReference ({http://www.opengis.net/citygml/1.0}externalReference) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element generalizesTo ({http://www.opengis.net/citygml/1.0}generalizesTo) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element GenericApplicationPropertyOfCityObject ({http://www.opengis.net/citygml/1.0}_GenericApplicationPropertyOfCityObject) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element referenceURI ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}referenceURI) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbstractMaterialType
    
    # Element imageTexture ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}imageTexture) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbstractMaterialType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}isVentilated uses Python identifier isVentilated
    __isVentilated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isVentilated'), 'isVentilated', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GasType_httpwww_sig3d_orgcitygml2_0energy0_5_0isVentilated', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 533, 10), )

    
    isVentilated = property(__isVentilated.value, __isVentilated.set, None, 'Indicates whether a gas-layer is ventilated')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}rValue uses Python identifier rValue
    __rValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'rValue'), 'rValue', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GasType_httpwww_sig3d_orgcitygml2_0energy0_5_0rValue', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 538, 10), )

    
    rValue = property(__rValue.value, __rValue.set, None, 'Resistance of material')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}thickness uses Python identifier thickness
    __thickness = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'thickness'), 'thickness', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GasType_httpwww_sig3d_orgcitygml2_0energy0_5_0thickness', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 543, 10), )

    
    thickness = property(__thickness.value, __thickness.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __isVentilated.name() : __isVentilated,
        __rValue.name() : __rValue,
        __thickness.name() : __thickness
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'GasType', GasType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}GlazingType with content type ELEMENT_ONLY
class GlazingType (AbstractMaterialType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}GlazingType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GlazingType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 559, 2)
    _ElementMap = AbstractMaterialType._ElementMap.copy()
    _AttributeMap = AbstractMaterialType._AttributeMap.copy()
    # Base type is AbstractMaterialType
    
    # Element creationDate ({http://www.opengis.net/citygml/1.0}creationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element terminationDate ({http://www.opengis.net/citygml/1.0}terminationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element externalReference ({http://www.opengis.net/citygml/1.0}externalReference) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element generalizesTo ({http://www.opengis.net/citygml/1.0}generalizesTo) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element GenericApplicationPropertyOfCityObject ({http://www.opengis.net/citygml/1.0}_GenericApplicationPropertyOfCityObject) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element referenceURI ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}referenceURI) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbstractMaterialType
    
    # Element imageTexture ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}imageTexture) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbstractMaterialType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}hemisphericalEmittance uses Python identifier hemisphericalEmittance
    __hemisphericalEmittance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hemisphericalEmittance'), 'hemisphericalEmittance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingType_httpwww_sig3d_orgcitygml2_0energy0_5_0hemisphericalEmittance', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 563, 10), )

    
    hemisphericalEmittance = property(__hemisphericalEmittance.value, __hemisphericalEmittance.set, None, 'Hemispherical emittance')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}hemisphericalReflectance uses Python identifier hemisphericalReflectance
    __hemisphericalReflectance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hemisphericalReflectance'), 'hemisphericalReflectance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingType_httpwww_sig3d_orgcitygml2_0energy0_5_0hemisphericalReflectance', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 568, 10), )

    
    hemisphericalReflectance = property(__hemisphericalReflectance.value, __hemisphericalReflectance.set, None, 'Hemispherical reflectance')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}hemisphericalTransmittance uses Python identifier hemisphericalTransmittance
    __hemisphericalTransmittance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hemisphericalTransmittance'), 'hemisphericalTransmittance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingType_httpwww_sig3d_orgcitygml2_0energy0_5_0hemisphericalTransmittance', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 573, 10), )

    
    hemisphericalTransmittance = property(__hemisphericalTransmittance.value, __hemisphericalTransmittance.set, None, 'Heminpherical transmittance')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}normalIncidenceEmittance uses Python identifier normalIncidenceEmittance
    __normalIncidenceEmittance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'normalIncidenceEmittance'), 'normalIncidenceEmittance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingType_httpwww_sig3d_orgcitygml2_0energy0_5_0normalIncidenceEmittance', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 578, 10), )

    
    normalIncidenceEmittance = property(__normalIncidenceEmittance.value, __normalIncidenceEmittance.set, None, 'Emittance in surface normal direction')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}normalIncidenceReflectance uses Python identifier normalIncidenceReflectance
    __normalIncidenceReflectance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'normalIncidenceReflectance'), 'normalIncidenceReflectance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingType_httpwww_sig3d_orgcitygml2_0energy0_5_0normalIncidenceReflectance', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 583, 10), )

    
    normalIncidenceReflectance = property(__normalIncidenceReflectance.value, __normalIncidenceReflectance.set, None, 'Reflectance in surface normal direction')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}normalIncidenceTransmittance uses Python identifier normalIncidenceTransmittance
    __normalIncidenceTransmittance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'normalIncidenceTransmittance'), 'normalIncidenceTransmittance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingType_httpwww_sig3d_orgcitygml2_0energy0_5_0normalIncidenceTransmittance', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 588, 10), )

    
    normalIncidenceTransmittance = property(__normalIncidenceTransmittance.value, __normalIncidenceTransmittance.set, None, 'Transmittance in surface normal direction')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}numberOfPanes uses Python identifier numberOfPanes
    __numberOfPanes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numberOfPanes'), 'numberOfPanes', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_GlazingType_httpwww_sig3d_orgcitygml2_0energy0_5_0numberOfPanes', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 593, 10), )

    
    numberOfPanes = property(__numberOfPanes.value, __numberOfPanes.set, None, 'Number of glazing panes')

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __hemisphericalEmittance.name() : __hemisphericalEmittance,
        __hemisphericalReflectance.name() : __hemisphericalReflectance,
        __hemisphericalTransmittance.name() : __hemisphericalTransmittance,
        __normalIncidenceEmittance.name() : __normalIncidenceEmittance,
        __normalIncidenceReflectance.name() : __normalIncidenceReflectance,
        __normalIncidenceTransmittance.name() : __normalIncidenceTransmittance,
        __numberOfPanes.name() : __numberOfPanes
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'GlazingType', GlazingType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}HeatPumpType with content type ELEMENT_ONLY
class HeatPumpType (EnergyConversionSystemType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}HeatPumpType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeatPumpType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 627, 2)
    _ElementMap = EnergyConversionSystemType._ElementMap.copy()
    _AttributeMap = EnergyConversionSystemType._AttributeMap.copy()
    # Base type is EnergyConversionSystemType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element efficiencyIndicator ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}efficiencyIndicator) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedNominalPower ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedNominalPower) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element model ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}model) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element nominalEfficiency ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}nominalEfficiency) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element number ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}number) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element productAndInstallationDocument ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}productAndInstallationDocument) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element yearOfManufacture ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}yearOfManufacture) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element has ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}has) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element consumes ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}consumes) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedIn ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedIn) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}carnotEfficiency uses Python identifier carnotEfficiency
    __carnotEfficiency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'carnotEfficiency'), 'carnotEfficiency', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatPumpType_httpwww_sig3d_orgcitygml2_0energy0_5_0carnotEfficiency', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 631, 10), )

    
    carnotEfficiency = property(__carnotEfficiency.value, __carnotEfficiency.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}heatSource uses Python identifier heatSource
    __heatSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'heatSource'), 'heatSource', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_HeatPumpType_httpwww_sig3d_orgcitygml2_0energy0_5_0heatSource', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 632, 10), )

    
    heatSource = property(__heatSource.value, __heatSource.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __carnotEfficiency.name() : __carnotEfficiency,
        __heatSource.name() : __heatSource
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'HeatPumpType', HeatPumpType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}IrregularTimeSeriesType with content type ELEMENT_ONLY
class IrregularTimeSeriesType (TimeSeriesType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}IrregularTimeSeriesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IrregularTimeSeriesType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 704, 2)
    _ElementMap = TimeSeriesType._ElementMap.copy()
    _AttributeMap = TimeSeriesType._AttributeMap.copy()
    # Base type is TimeSeriesType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}contains uses Python identifier contains
    __contains = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'contains'), 'contains', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_IrregularTimeSeriesType_httpwww_sig3d_orgcitygml2_0energy0_5_0contains', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 708, 10), )

    
    contains = property(__contains.value, __contains.set, None, None)

    
    # Element id ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}id) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_TimeSeriesType
    
    # Element temporalExtent ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}temporalExtent) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_TimeSeriesType
    
    # Element variableProperties ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}variableProperties) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_TimeSeriesType
    _ElementMap.update({
        __contains.name() : __contains
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'IrregularTimeSeriesType', IrregularTimeSeriesType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}MechanicalVentilationType with content type ELEMENT_ONLY
class MechanicalVentilationType (EnergyConversionSystemType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}MechanicalVentilationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MechanicalVentilationType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 785, 2)
    _ElementMap = EnergyConversionSystemType._ElementMap.copy()
    _AttributeMap = EnergyConversionSystemType._AttributeMap.copy()
    # Base type is EnergyConversionSystemType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element efficiencyIndicator ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}efficiencyIndicator) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedNominalPower ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedNominalPower) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element model ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}model) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element nominalEfficiency ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}nominalEfficiency) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element number ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}number) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element productAndInstallationDocument ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}productAndInstallationDocument) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element yearOfManufacture ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}yearOfManufacture) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element has ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}has) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element consumes ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}consumes) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedIn ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedIn) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}heatRecovery uses Python identifier heatRecovery
    __heatRecovery = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'heatRecovery'), 'heatRecovery', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_MechanicalVentilationType_httpwww_sig3d_orgcitygml2_0energy0_5_0heatRecovery', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 789, 10), )

    
    heatRecovery = property(__heatRecovery.value, __heatRecovery.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}recuperationFactor uses Python identifier recuperationFactor
    __recuperationFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recuperationFactor'), 'recuperationFactor', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_MechanicalVentilationType_httpwww_sig3d_orgcitygml2_0energy0_5_0recuperationFactor', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 790, 10), )

    
    recuperationFactor = property(__recuperationFactor.value, __recuperationFactor.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __heatRecovery.name() : __heatRecovery,
        __recuperationFactor.name() : __recuperationFactor
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MechanicalVentilationType', MechanicalVentilationType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}OpaqueMaterialType with content type ELEMENT_ONLY
class OpaqueMaterialType (AbstractMaterialType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}OpaqueMaterialType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OpaqueMaterialType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 830, 2)
    _ElementMap = AbstractMaterialType._ElementMap.copy()
    _AttributeMap = AbstractMaterialType._AttributeMap.copy()
    # Base type is AbstractMaterialType
    
    # Element creationDate ({http://www.opengis.net/citygml/1.0}creationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element terminationDate ({http://www.opengis.net/citygml/1.0}terminationDate) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element externalReference ({http://www.opengis.net/citygml/1.0}externalReference) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element generalizesTo ({http://www.opengis.net/citygml/1.0}generalizesTo) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element GenericApplicationPropertyOfCityObject ({http://www.opengis.net/citygml/1.0}_GenericApplicationPropertyOfCityObject) inherited from {http://www.opengis.net/citygml/1.0}AbstractCityObjectType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element referenceURI ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}referenceURI) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbstractMaterialType
    
    # Element imageTexture ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}imageTexture) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}AbstractMaterialType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}conductivity uses Python identifier conductivity
    __conductivity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'conductivity'), 'conductivity', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OpaqueMaterialType_httpwww_sig3d_orgcitygml2_0energy0_5_0conductivity', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 834, 10), )

    
    conductivity = property(__conductivity.value, __conductivity.set, None, 'Conductivity of material')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}density uses Python identifier density
    __density = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'density'), 'density', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OpaqueMaterialType_httpwww_sig3d_orgcitygml2_0energy0_5_0density', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 839, 10), )

    
    density = property(__density.value, __density.set, None, 'Density of material')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}permeance uses Python identifier permeance
    __permeance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'permeance'), 'permeance', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OpaqueMaterialType_httpwww_sig3d_orgcitygml2_0energy0_5_0permeance', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 844, 10), )

    
    permeance = property(__permeance.value, __permeance.set, None, 'The rate water vapor is allowed through a surface')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}porosity uses Python identifier porosity
    __porosity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'porosity'), 'porosity', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OpaqueMaterialType_httpwww_sig3d_orgcitygml2_0energy0_5_0porosity', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 849, 10), )

    
    porosity = property(__porosity.value, __porosity.set, None, 'The ratio of the total amount of void space in a material (due to poses, small channels, and so on) to the bulk volume occupied by the material.')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}specificHeat uses Python identifier specificHeat
    __specificHeat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'specificHeat'), 'specificHeat', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_OpaqueMaterialType_httpwww_sig3d_orgcitygml2_0energy0_5_0specificHeat', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 854, 10), )

    
    specificHeat = property(__specificHeat.value, __specificHeat.set, None, 'Specific heat of material')

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __conductivity.name() : __conductivity,
        __density.name() : __density,
        __permeance.name() : __permeance,
        __porosity.name() : __porosity,
        __specificHeat.name() : __specificHeat
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'OpaqueMaterialType', OpaqueMaterialType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PowerDistributionSystemType with content type ELEMENT_ONLY
class PowerDistributionSystemType (EnergyDistributionSystemType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PowerDistributionSystemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerDistributionSystemType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 911, 2)
    _ElementMap = EnergyDistributionSystemType._ElementMap.copy()
    _AttributeMap = EnergyDistributionSystemType._AttributeMap.copy()
    # Base type is EnergyDistributionSystemType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element distributionPerimeter ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}distributionPerimeter) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDistributionSystemType
    
    # Element storageSystem ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}storageSystem) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDistributionSystemType
    
    # Element energySupply ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}energySupply) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDistributionSystemType
    
    # Element endUseUnit ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}endUseUnit) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDistributionSystemType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}current uses Python identifier current
    __current = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'current'), 'current', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerDistributionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0current', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 915, 10), )

    
    current = property(__current.value, __current.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}voltage uses Python identifier voltage
    __voltage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'voltage'), 'voltage', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerDistributionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0voltage', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 916, 10), )

    
    voltage = property(__voltage.value, __voltage.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __current.name() : __current,
        __voltage.name() : __voltage
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PowerDistributionSystemType', PowerDistributionSystemType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PowerStorageSystemType with content type ELEMENT_ONLY
class PowerStorageSystemType (StorageSystemType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PowerStorageSystemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowerStorageSystemType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 928, 2)
    _ElementMap = StorageSystemType._ElementMap.copy()
    _AttributeMap = StorageSystemType._AttributeMap.copy()
    # Base type is StorageSystemType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}batteryTechnology uses Python identifier batteryTechnology
    __batteryTechnology = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'batteryTechnology'), 'batteryTechnology', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerStorageSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0batteryTechnology', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 932, 10), )

    
    batteryTechnology = property(__batteryTechnology.value, __batteryTechnology.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}powerCapacity uses Python identifier powerCapacity
    __powerCapacity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'powerCapacity'), 'powerCapacity', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PowerStorageSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0powerCapacity', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 933, 10), )

    
    powerCapacity = property(__powerCapacity.value, __powerCapacity.set, None, None)

    
    # Element energyDistribution ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}energyDistribution) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_StorageSystemType
    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __batteryTechnology.name() : __batteryTechnology,
        __powerCapacity.name() : __powerCapacity
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PowerStorageSystemType', PowerStorageSystemType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}RegularTimeSeriesType with content type ELEMENT_ONLY
class RegularTimeSeriesType (TimeSeriesType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}RegularTimeSeriesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RegularTimeSeriesType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 974, 2)
    _ElementMap = TimeSeriesType._ElementMap.copy()
    _AttributeMap = TimeSeriesType._AttributeMap.copy()
    # Base type is TimeSeriesType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}timeInterval uses Python identifier timeInterval
    __timeInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'timeInterval'), 'timeInterval', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_RegularTimeSeriesType_httpwww_sig3d_orgcitygml2_0energy0_5_0timeInterval', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 978, 10), )

    
    timeInterval = property(__timeInterval.value, __timeInterval.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}values uses Python identifier values
    __values = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'values'), 'values', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_RegularTimeSeriesType_httpwww_sig3d_orgcitygml2_0energy0_5_0values', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 979, 10), )

    
    values = property(__values.value, __values.set, None, None)

    
    # Element id ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}id) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_TimeSeriesType
    
    # Element temporalExtent ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}temporalExtent) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_TimeSeriesType
    
    # Element variableProperties ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}variableProperties) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_TimeSeriesType
    _ElementMap.update({
        __timeInterval.name() : __timeInterval,
        __values.name() : __values
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'RegularTimeSeriesType', RegularTimeSeriesType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD0Type with content type ELEMENT_ONLY
class ScheduleLoD0Type (ScheduleType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD0Type with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD0Type')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 990, 2)
    _ElementMap = ScheduleType._ElementMap.copy()
    _AttributeMap = ScheduleType._AttributeMap.copy()
    # Base type is ScheduleType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}averageValue uses Python identifier averageValue
    __averageValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'averageValue'), 'averageValue', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ScheduleLoD0Type_httpwww_sig3d_orgcitygml2_0energy0_5_0averageValue', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 994, 10), )

    
    averageValue = property(__averageValue.value, __averageValue.set, None, None)

    _ElementMap.update({
        __averageValue.name() : __averageValue
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ScheduleLoD0Type', ScheduleLoD0Type)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD1Type with content type ELEMENT_ONLY
class ScheduleLoD1Type (ScheduleType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD1Type with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD1Type')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1005, 2)
    _ElementMap = ScheduleType._ElementMap.copy()
    _AttributeMap = ScheduleType._AttributeMap.copy()
    # Base type is ScheduleType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}dailyUsageEndingTime uses Python identifier dailyUsageEndingTime
    __dailyUsageEndingTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dailyUsageEndingTime'), 'dailyUsageEndingTime', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ScheduleLoD1Type_httpwww_sig3d_orgcitygml2_0energy0_5_0dailyUsageEndingTime', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1009, 10), )

    
    dailyUsageEndingTime = property(__dailyUsageEndingTime.value, __dailyUsageEndingTime.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}dailyUsageStartingTime uses Python identifier dailyUsageStartingTime
    __dailyUsageStartingTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dailyUsageStartingTime'), 'dailyUsageStartingTime', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ScheduleLoD1Type_httpwww_sig3d_orgcitygml2_0energy0_5_0dailyUsageStartingTime', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1010, 10), )

    
    dailyUsageStartingTime = property(__dailyUsageStartingTime.value, __dailyUsageStartingTime.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}idleValue uses Python identifier idleValue
    __idleValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'idleValue'), 'idleValue', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ScheduleLoD1Type_httpwww_sig3d_orgcitygml2_0energy0_5_0idleValue', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1011, 10), )

    
    idleValue = property(__idleValue.value, __idleValue.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}usageDaysPerYear uses Python identifier usageDaysPerYear
    __usageDaysPerYear = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usageDaysPerYear'), 'usageDaysPerYear', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ScheduleLoD1Type_httpwww_sig3d_orgcitygml2_0energy0_5_0usageDaysPerYear', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1012, 10), )

    
    usageDaysPerYear = property(__usageDaysPerYear.value, __usageDaysPerYear.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}usageValue uses Python identifier usageValue
    __usageValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usageValue'), 'usageValue', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ScheduleLoD1Type_httpwww_sig3d_orgcitygml2_0energy0_5_0usageValue', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1013, 10), )

    
    usageValue = property(__usageValue.value, __usageValue.set, None, None)

    _ElementMap.update({
        __dailyUsageEndingTime.name() : __dailyUsageEndingTime,
        __dailyUsageStartingTime.name() : __dailyUsageStartingTime,
        __idleValue.name() : __idleValue,
        __usageDaysPerYear.name() : __usageDaysPerYear,
        __usageValue.name() : __usageValue
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ScheduleLoD1Type', ScheduleLoD1Type)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD2Type with content type ELEMENT_ONLY
class ScheduleLoD2Type (ScheduleType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD2Type with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD2Type')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1024, 2)
    _ElementMap = ScheduleType._ElementMap.copy()
    _AttributeMap = ScheduleType._AttributeMap.copy()
    # Base type is ScheduleType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}dailySchedule uses Python identifier dailySchedule
    __dailySchedule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dailySchedule'), 'dailySchedule', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ScheduleLoD2Type_httpwww_sig3d_orgcitygml2_0energy0_5_0dailySchedule', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1028, 10), )

    
    dailySchedule = property(__dailySchedule.value, __dailySchedule.set, None, None)

    _ElementMap.update({
        __dailySchedule.name() : __dailySchedule
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ScheduleLoD2Type', ScheduleLoD2Type)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD3Type with content type ELEMENT_ONLY
class ScheduleLoD3Type (ScheduleType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ScheduleLoD3Type with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD3Type')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1039, 2)
    _ElementMap = ScheduleType._ElementMap.copy()
    _AttributeMap = ScheduleType._AttributeMap.copy()
    # Base type is ScheduleType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}timeDependingValues uses Python identifier timeDependingValues
    __timeDependingValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'timeDependingValues'), 'timeDependingValues', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ScheduleLoD3Type_httpwww_sig3d_orgcitygml2_0energy0_5_0timeDependingValues', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1043, 10), )

    
    timeDependingValues = property(__timeDependingValues.value, __timeDependingValues.set, None, None)

    _ElementMap.update({
        __timeDependingValues.name() : __timeDependingValues
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ScheduleLoD3Type', ScheduleLoD3Type)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalDistributionSystemType with content type ELEMENT_ONLY
class ThermalDistributionSystemType (EnergyDistributionSystemType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalDistributionSystemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalDistributionSystemType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1173, 2)
    _ElementMap = EnergyDistributionSystemType._ElementMap.copy()
    _AttributeMap = EnergyDistributionSystemType._AttributeMap.copy()
    # Base type is EnergyDistributionSystemType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element distributionPerimeter ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}distributionPerimeter) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDistributionSystemType
    
    # Element storageSystem ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}storageSystem) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDistributionSystemType
    
    # Element energySupply ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}energySupply) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDistributionSystemType
    
    # Element endUseUnit ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}endUseUnit) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyDistributionSystemType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}isCirculation uses Python identifier isCirculation
    __isCirculation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isCirculation'), 'isCirculation', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0isCirculation', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1177, 10), )

    
    isCirculation = property(__isCirculation.value, __isCirculation.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}medium uses Python identifier medium
    __medium = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'medium'), 'medium', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0medium', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1178, 10), )

    
    medium = property(__medium.value, __medium.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}nominalFlow uses Python identifier nominalFlow
    __nominalFlow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nominalFlow'), 'nominalFlow', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0nominalFlow', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1179, 10), )

    
    nominalFlow = property(__nominalFlow.value, __nominalFlow.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}returnTemperature uses Python identifier returnTemperature
    __returnTemperature = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'returnTemperature'), 'returnTemperature', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0returnTemperature', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1180, 10), )

    
    returnTemperature = property(__returnTemperature.value, __returnTemperature.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}supplyTemperature uses Python identifier supplyTemperature
    __supplyTemperature = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'supplyTemperature'), 'supplyTemperature', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0supplyTemperature', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1181, 10), )

    
    supplyTemperature = property(__supplyTemperature.value, __supplyTemperature.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}thermalLossesFactor uses Python identifier thermalLossesFactor
    __thermalLossesFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'thermalLossesFactor'), 'thermalLossesFactor', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalDistributionSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0thermalLossesFactor', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1182, 10), )

    
    thermalLossesFactor = property(__thermalLossesFactor.value, __thermalLossesFactor.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __isCirculation.name() : __isCirculation,
        __medium.name() : __medium,
        __nominalFlow.name() : __nominalFlow,
        __returnTemperature.name() : __returnTemperature,
        __supplyTemperature.name() : __supplyTemperature,
        __thermalLossesFactor.name() : __thermalLossesFactor
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ThermalDistributionSystemType', ThermalDistributionSystemType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalStorageSystemType with content type ELEMENT_ONLY
class ThermalStorageSystemType (StorageSystemType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}ThermalStorageSystemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermalStorageSystemType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1194, 2)
    _ElementMap = StorageSystemType._ElementMap.copy()
    _AttributeMap = StorageSystemType._AttributeMap.copy()
    # Base type is StorageSystemType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}averageTemperature uses Python identifier averageTemperature
    __averageTemperature = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'averageTemperature'), 'averageTemperature', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalStorageSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0averageTemperature', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1198, 10), )

    
    averageTemperature = property(__averageTemperature.value, __averageTemperature.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}medium uses Python identifier medium
    __medium = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'medium'), 'medium', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalStorageSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0medium', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1199, 10), )

    
    medium = property(__medium.value, __medium.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}thermalLossesFactor uses Python identifier thermalLossesFactor
    __thermalLossesFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'thermalLossesFactor'), 'thermalLossesFactor', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalStorageSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0thermalLossesFactor', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1200, 10), )

    
    thermalLossesFactor = property(__thermalLossesFactor.value, __thermalLossesFactor.set, None, 'U*A')

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}volume uses Python identifier volume
    __volume = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'volume'), 'volume', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_ThermalStorageSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0volume', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1205, 10), )

    
    volume = property(__volume.value, __volume.set, None, None)

    
    # Element energyDistribution ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}energyDistribution) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_StorageSystemType
    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __averageTemperature.name() : __averageTemperature,
        __medium.name() : __medium,
        __thermalLossesFactor.name() : __thermalLossesFactor,
        __volume.name() : __volume
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ThermalStorageSystemType', ThermalStorageSystemType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SolarEnergySystemType with content type ELEMENT_ONLY
class SolarEnergySystemType (EnergyConversionSystemType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SolarEnergySystemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, '_SolarEnergySystemType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1417, 2)
    _ElementMap = EnergyConversionSystemType._ElementMap.copy()
    _AttributeMap = EnergyConversionSystemType._AttributeMap.copy()
    # Base type is EnergyConversionSystemType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element efficiencyIndicator ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}efficiencyIndicator) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedNominalPower ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedNominalPower) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element model ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}model) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element nominalEfficiency ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}nominalEfficiency) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element number ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}number) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element productAndInstallationDocument ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}productAndInstallationDocument) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element yearOfManufacture ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}yearOfManufacture) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element has ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}has) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element consumes ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}consumes) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedIn ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedIn) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}collectorSurface uses Python identifier collectorSurface
    __collectorSurface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'collectorSurface'), 'collectorSurface', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarEnergySystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0collectorSurface', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1421, 10), )

    
    collectorSurface = property(__collectorSurface.value, __collectorSurface.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}panelAzimuth uses Python identifier panelAzimuth
    __panelAzimuth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'panelAzimuth'), 'panelAzimuth', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarEnergySystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0panelAzimuth', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1422, 10), )

    
    panelAzimuth = property(__panelAzimuth.value, __panelAzimuth.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}panelInclination uses Python identifier panelInclination
    __panelInclination = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'panelInclination'), 'panelInclination', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarEnergySystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0panelInclination', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1423, 10), )

    
    panelInclination = property(__panelInclination.value, __panelInclination.set, None, None)

    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedOn uses Python identifier installedOn
    __installedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'installedOn'), 'installedOn', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarEnergySystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0installedOn', True, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1424, 10), )

    
    installedOn = property(__installedOn.value, __installedOn.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __collectorSurface.name() : __collectorSurface,
        __panelAzimuth.name() : __panelAzimuth,
        __panelInclination.name() : __panelInclination,
        __installedOn.name() : __installedOn
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', '_SolarEnergySystemType', SolarEnergySystemType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PhotovoltaicSystemType with content type ELEMENT_ONLY
class PhotovoltaicSystemType (SolarEnergySystemType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}PhotovoltaicSystemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PhotovoltaicSystemType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 895, 2)
    _ElementMap = SolarEnergySystemType._ElementMap.copy()
    _AttributeMap = SolarEnergySystemType._AttributeMap.copy()
    # Base type is SolarEnergySystemType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element efficiencyIndicator ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}efficiencyIndicator) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedNominalPower ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedNominalPower) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element model ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}model) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element nominalEfficiency ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}nominalEfficiency) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element number ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}number) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element productAndInstallationDocument ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}productAndInstallationDocument) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element yearOfManufacture ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}yearOfManufacture) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element has ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}has) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element consumes ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}consumes) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedIn ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedIn) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}cellMaterialType uses Python identifier cellMaterialType
    __cellMaterialType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cellMaterialType'), 'cellMaterialType', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_PhotovoltaicSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0cellMaterialType', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 899, 10), )

    
    cellMaterialType = property(__cellMaterialType.value, __cellMaterialType.set, None, None)

    
    # Element collectorSurface ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}collectorSurface) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SolarEnergySystemType
    
    # Element panelAzimuth ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}panelAzimuth) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SolarEnergySystemType
    
    # Element panelInclination ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}panelInclination) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SolarEnergySystemType
    
    # Element installedOn ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedOn) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SolarEnergySystemType
    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __cellMaterialType.name() : __cellMaterialType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PhotovoltaicSystemType', PhotovoltaicSystemType)


# Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}SolarThermalSystemType with content type ELEMENT_ONLY
class SolarThermalSystemType (SolarEnergySystemType):
    """Complex type {http://www.sig3d.org/citygml/2.0/energy/0.5.0}SolarThermalSystemType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SolarThermalSystemType')
    _XSDLocation = pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1071, 2)
    _ElementMap = SolarEnergySystemType._ElementMap.copy()
    _AttributeMap = SolarEnergySystemType._AttributeMap.copy()
    # Base type is SolarEnergySystemType
    
    # Element boundedBy ({http://www.opengis.net/gml}boundedBy) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element location ({http://www.opengis.net/gml}location) inherited from {http://www.opengis.net/gml}AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml}metaDataProperty) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml}name) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml}description) inherited from {http://www.opengis.net/gml}AbstractGMLType
    
    # Element efficiencyIndicator ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}efficiencyIndicator) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedNominalPower ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedNominalPower) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element model ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}model) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element nominalEfficiency ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}nominalEfficiency) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element number ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}number) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element productAndInstallationDocument ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}productAndInstallationDocument) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element yearOfManufacture ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}yearOfManufacture) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element has ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}has) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element consumes ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}consumes) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element installedIn ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedIn) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}EnergyConversionSystemType
    
    # Element {http://www.sig3d.org/citygml/2.0/energy/0.5.0}technologyType uses Python identifier technologyType
    __technologyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'technologyType'), 'technologyType', '__httpwww_sig3d_orgcitygml2_0energy0_5_0_SolarThermalSystemType_httpwww_sig3d_orgcitygml2_0energy0_5_0technologyType', False, pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1075, 10), )

    
    technologyType = property(__technologyType.value, __technologyType.set, None, None)

    
    # Element collectorSurface ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}collectorSurface) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SolarEnergySystemType
    
    # Element panelAzimuth ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}panelAzimuth) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SolarEnergySystemType
    
    # Element panelInclination ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}panelInclination) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SolarEnergySystemType
    
    # Element installedOn ({http://www.sig3d.org/citygml/2.0/energy/0.5.0}installedOn) inherited from {http://www.sig3d.org/citygml/2.0/energy/0.5.0}_SolarEnergySystemType
    
    # Attribute id inherited from {http://www.opengis.net/gml}AbstractGMLType
    _ElementMap.update({
        __technologyType.name() : __technologyType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SolarThermalSystemType', SolarThermalSystemType)


averageStoreyHeight = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'averageStoreyHeight'), teaser.Data.SchemaBindings.opengis.raw.gml.LengthType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1370, 2))
Namespace.addCategoryObject('elementBinding', averageStoreyHeight.name().localName(), averageStoreyHeight)

basementCeilingHeightAboveGroundSurface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'basementCeilingHeightAboveGroundSurface'), teaser.Data.SchemaBindings.opengis.raw.gml.LengthType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1371, 2))
Namespace.addCategoryObject('elementBinding', basementCeilingHeightAboveGroundSurface.name().localName(), basementCeilingHeightAboveGroundSurface)

buildingType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'buildingType'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1373, 2))
Namespace.addCategoryObject('elementBinding', buildingType.name().localName(), buildingType)

constructionStyle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'constructionStyle'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1374, 2))
Namespace.addCategoryObject('elementBinding', constructionStyle.name().localName(), constructionStyle)

eavesHeight = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eavesHeight'), teaser.Data.SchemaBindings.opengis.raw.gml.LengthType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1375, 2))
Namespace.addCategoryObject('elementBinding', eavesHeight.name().localName(), eavesHeight)

energyPerformanceCertification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'energyPerformanceCertification'), pyxb.binding.datatypes.anyURI, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1376, 2))
Namespace.addCategoryObject('elementBinding', energyPerformanceCertification.name().localName(), energyPerformanceCertification)

grossVolume = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'grossVolume'), teaser.Data.SchemaBindings.opengis.raw.gml.VolumeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1377, 2))
Namespace.addCategoryObject('elementBinding', grossVolume.name().localName(), grossVolume)

landmarked = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'landmarked'), pyxb.binding.datatypes.boolean, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1378, 2))
Namespace.addCategoryObject('elementBinding', landmarked.name().localName(), landmarked)

referenceGeoCoordinates = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'referenceGeoCoordinates'), teaser.Data.SchemaBindings.opengis.raw.gml.PointPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1379, 2))
Namespace.addCategoryObject('elementBinding', referenceGeoCoordinates.name().localName(), referenceGeoCoordinates)

referenceHeatedFloorArea = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'referenceHeatedFloorArea'), teaser.Data.SchemaBindings.opengis.raw.gml.AreaType, documentation='Floor area [m\xb2] considered for the normalization of the standard energy demands.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1380, 2))
Namespace.addCategoryObject('elementBinding', referenceHeatedFloorArea.name().localName(), referenceHeatedFloorArea)

refurbishmentClass = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refurbishmentClass'), pyxb.binding.datatypes.string, documentation='to defined better....', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1385, 2))
Namespace.addCategoryObject('elementBinding', refurbishmentClass.name().localName(), refurbishmentClass)

ridgeHeight = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ridgeHeight'), teaser.Data.SchemaBindings.opengis.raw.gml.LengthType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1390, 2))
Namespace.addCategoryObject('elementBinding', ridgeHeight.name().localName(), ridgeHeight)

yearOfRefurbishment = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'yearOfRefurbishment'), pyxb.binding.datatypes.gYear, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1391, 2))
Namespace.addCategoryObject('elementBinding', yearOfRefurbishment.name().localName(), yearOfRefurbishment)

openableRatio = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'openableRatio'), teaser.Data.SchemaBindings.opengis.raw.gml.ScaleType, documentation='Fraction of the opening area which can be opened.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1401, 2))
Namespace.addCategoryObject('elementBinding', openableRatio.name().localName(), openableRatio)

Absorptance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Absorptance'), AbsorptanceType, documentation='Percentaged  energy absorptance in different wavelength ranges', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 6, 2))
Namespace.addCategoryObject('elementBinding', Absorptance.name().localName(), Absorptance)

AbstractMaterial = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractMaterial'), AbstractMaterialType, abstract=pyxb.binding.datatypes.boolean(1), documentation='Abstract superclass for all Material classes. A Material is a homogeneous substance that can be used to form elements.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 31, 2))
Namespace.addCategoryObject('elementBinding', AbstractMaterial.name().localName(), AbstractMaterial)

BuildingUnit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BuildingUnit'), BuildingUnitType, documentation='A building unit is a part of usage zone, such as dwelling or workplace, which is related to a single occupant entity.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 76, 2))
Namespace.addCategoryObject('elementBinding', BuildingUnit.name().localName(), BuildingUnit)

Construction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Construction'), ConstructionType, documentation='A Construction is a combination of layers, such as a wall or a roof.\n<p> <img src="../png/Construction-Layer-Illustration.png"></p>', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 124, 2))
Namespace.addCategoryObject('elementBinding', Construction.name().localName(), Construction)

ConstructionOrientation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConstructionOrientation'), ConstructionOrientationType, documentation='Determines the usage of Construction in terms of the Layer order.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 169, 2))
Namespace.addCategoryObject('elementBinding', ConstructionOrientation.name().localName(), ConstructionOrientation)

ControlType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ControlType'), ControlTypeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 198, 2))
Namespace.addCategoryObject('elementBinding', ControlType.name().localName(), ControlType)

DailySchedule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DailySchedule'), DailyScheduleType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 233, 2))
Namespace.addCategoryObject('elementBinding', DailySchedule.name().localName(), DailySchedule)

Emittance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Emittance'), EmittanceType, documentation='Percentaged infra-red emissivity', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 298, 2))
Namespace.addCategoryObject('elementBinding', Emittance.name().localName(), Emittance)

EndUseUnit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndUseUnit'), EndUseUnitType, documentation='Final device(s) which deliver the required end-use to the end-user in his end-use place (e.g. radiators or convectors for heating etc.)', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 315, 2))
Namespace.addCategoryObject('elementBinding', EndUseUnit.name().localName(), EndUseUnit)

EnergyCarrier = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnergyCarrier'), EnergyCarrierType, documentation='Energy form containing the energy (e.g. fuel, renewable energy etc.)', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 337, 2))
Namespace.addCategoryObject('elementBinding', EnergyCarrier.name().localName(), EnergyCarrier)

EnergyConversionSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnergyConversionSystem'), EnergyConversionSystemType, documentation='Energy conversion system is a system producing the energy necessary to satisfy the end-use (or to feed the networks) from an energy source.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 355, 2))
Namespace.addCategoryObject('elementBinding', EnergyConversionSystem.name().localName(), EnergyConversionSystem)

EnergyCoverage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnergyCoverage'), EnergyCoverageType, documentation='Determine the level of energy coverage (may be time depending) by a given operation mode of an energy conversion system.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 392, 2))
Namespace.addCategoryObject('elementBinding', EnergyCoverage.name().localName(), EnergyCoverage)

EnergyDemand = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnergyDemand'), EnergyDemandType, documentation='Energy demand is the useful energy required to satisfy a specific end-use, such as heating, cooling, domestic hot water etc.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 413, 2))
Namespace.addCategoryObject('elementBinding', EnergyDemand.name().localName(), EnergyDemand)

EnergyDistributionSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnergyDistributionSystem'), EnergyDistributionSystemType, documentation='Energy distribution system is a system in charge of delivering the energy inside the building, from the place of energy production to the place of end-use. It consists then in the storage (including battery/tank and pipe volumes), the circulation pumps, the distribution pipes and the end use units (radiators, fan coils etc.).', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 435, 2))
Namespace.addCategoryObject('elementBinding', EnergyDistributionSystem.name().localName(), EnergyDistributionSystem)

EnergySource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnergySource'), EnergySourceType, documentation='Energy Source is the final energy consumed by the energy conversion system.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 458, 2))
Namespace.addCategoryObject('elementBinding', EnergySource.name().localName(), EnergySource)

EnergySupply = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnergySupply'), EnergySupplyType, documentation='Energy supply is the part of the energy produced by the energy conversion systems which is used to satisfy the end-use demand of a city object.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 480, 2))
Namespace.addCategoryObject('elementBinding', EnergySupply.name().localName(), EnergySupply)

Facilities = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Facilities'), FacilitiesType, documentation='Facilities and Appliances inside the usage zone or building unit, which consumes and dissipate energy.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 504, 2))
Namespace.addCategoryObject('elementBinding', Facilities.name().localName(), Facilities)

HeatExchangeType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HeatExchangeType'), HeatExchangeTypeType, documentation='Contributions of the different types of heat or cool exchange (convective, radiant and latent)', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 608, 2))
Namespace.addCategoryObject('elementBinding', HeatExchangeType.name().localName(), HeatExchangeType)

Household = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Household'), HouseholdType, documentation='Household is a group of persons living in the same dwelling, in the case where occupant type is residents.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 643, 2))
Namespace.addCategoryObject('elementBinding', Household.name().localName(), Household)

ImageTexture = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ImageTexture'), ImageTextureType, documentation='This is an X3D element to map a texture to this material. From X3D specification: The ImageTexture node defines a texture map by specifying an image file and general parameters for mapping to geometry. Texture maps are defined in a 2D coordinate system (s, t) that ranges from [0.0, 1.0] in both directions. The bottom edge of the image corresponds to the S-axis of the texture map, and left edge of the image corresponds to the T-axis of the texture map. The lower-left pixel of the image corresponds to s=0, t=0, and the top-right pixel of the image corresponds to s=1, t=1. <!--When fixed: add type="x3d:ImageTexture"-->', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 664, 2))
Namespace.addCategoryObject('elementBinding', ImageTexture.name().localName(), ImageTexture)

Layer = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Layer'), LayerType, documentation='A Layer is a combination of one of more materials, references via a LayerComponent.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 718, 2))
Namespace.addCategoryObject('elementBinding', Layer.name().localName(), Layer)

LayerComponent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LayerComponent'), LayerComponentType, documentation='<p> <img src="../png/LayerComponent-Illustration.png"></p>', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 738, 2))
Namespace.addCategoryObject('elementBinding', LayerComponent.name().localName(), LayerComponent)

MeasurementPoint = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPoint'), MeasurementPointType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 772, 2))
Namespace.addCategoryObject('elementBinding', MeasurementPoint.name().localName(), MeasurementPoint)

Occupancy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Occupancy'), OccupancyType, documentation='Occupancy is an aggregated group of occupants of a usage zone or building unit, which can be residents, workers, visitors etc.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 801, 2))
Namespace.addCategoryObject('elementBinding', Occupancy.name().localName(), Occupancy)

OperationMode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OperationMode'), OperationModeType, documentation='Operation mode details the operation of the energy conversion system for a specific end-use and operation time.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 869, 2))
Namespace.addCategoryObject('elementBinding', OperationMode.name().localName(), OperationMode)

Reflectance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Reflectance'), ReflectanceType, documentation='Percentaged  energy reflectance in different wavelength ranges', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 944, 2))
Namespace.addCategoryObject('elementBinding', Reflectance.name().localName(), Reflectance)

ShadingType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ShadingType'), ShadingTypeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1053, 2))
Namespace.addCategoryObject('elementBinding', ShadingType.name().localName(), ShadingType)

SurfaceComponent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SurfaceComponent'), SurfaceComponentType, documentation='Part of the thermal boundary surface corresponding to an homogeneous construction component (e.g. windows, wall, insulated part of a wall etc.)', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1086, 2))
Namespace.addCategoryObject('elementBinding', SurfaceComponent.name().localName(), SurfaceComponent)

ThermalBoundarySurface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ThermalBoundarySurface'), ThermalBoundarySurfaceType, documentation='Thermal boundary surfaces are quasi-coplanar surfaces bounding the thermal zone. They may be linked to the gml:BoundarySurface when possible, but not necessary (e.g. cellar ceiling or top storey ceiling in the case of LOD1-3)', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1120, 2))
Namespace.addCategoryObject('elementBinding', ThermalBoundarySurface.name().localName(), ThermalBoundarySurface)

ThermalZone = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ThermalZone'), ThermalZoneType, documentation='A thermal zone is a zone of a building which serves as unit for the building heating and cooling simulation. For the simulation, a thermal zone is considered as isothermal.\nIt is a semantic object, which may be or not related to a geometric entity.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1216, 2))
Namespace.addCategoryObject('elementBinding', ThermalZone.name().localName(), ThermalZone)

TimeValuesProperties = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeValuesProperties'), TimeValuesPropertiesType, documentation='Information and properties of a given variable.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1268, 2))
Namespace.addCategoryObject('elementBinding', TimeValuesProperties.name().localName(), TimeValuesProperties)

Transmittance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Transmittance'), TransmittanceType, documentation='Percentaged  energy transmittance in different wavelength ranges', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1293, 2))
Namespace.addCategoryObject('elementBinding', Transmittance.name().localName(), Transmittance)

UsageZone = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UsageZone'), UsageZoneType, documentation='A usage zone is a zone of a building with homogeneous usage type.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1309, 2))
Namespace.addCategoryObject('elementBinding', UsageZone.name().localName(), UsageZone)

atticType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atticType'), ConditioningTypeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1369, 2))
Namespace.addCategoryObject('elementBinding', atticType.name().localName(), atticType)

basementType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'basementType'), ConditioningTypeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1372, 2))
Namespace.addCategoryObject('elementBinding', basementType.name().localName(), basementType)

has = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'has'), EnergyConversionSystemPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1392, 2))
Namespace.addCategoryObject('elementBinding', has.name().localName(), has)

thermalZones = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'thermalZones'), ThermalZonePropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1393, 2))
Namespace.addCategoryObject('elementBinding', thermalZones.name().localName(), thermalZones)

usageZones = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usageZones'), UsageZonePropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1394, 2))
Namespace.addCategoryObject('elementBinding', usageZones.name().localName(), usageZones)

equippedWith = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'equippedWith'), SolarEnergySystemPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1395, 2))
Namespace.addCategoryObject('elementBinding', equippedWith.name().localName(), equippedWith)

correspondsTo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'correspondsTo'), ThermalBoundarySurfacePropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1396, 2))
Namespace.addCategoryObject('elementBinding', correspondsTo.name().localName(), correspondsTo)

construction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'construction'), ConstructionPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1397, 2))
Namespace.addCategoryObject('elementBinding', construction.name().localName(), construction)

constructionOrientation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'constructionOrientation'), ConstructionOrientationPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1398, 2))
Namespace.addCategoryObject('elementBinding', constructionOrientation.name().localName(), constructionOrientation)

energyDemands = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'energyDemands'), EnergyDemandPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1399, 2))
Namespace.addCategoryObject('elementBinding', energyDemands.name().localName(), energyDemands)

indoorShading = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'indoorShading'), ShadingTypePropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1400, 2))
Namespace.addCategoryObject('elementBinding', indoorShading.name().localName(), indoorShading)

outdoorShading = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'outdoorShading'), ShadingTypePropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1406, 2))
Namespace.addCategoryObject('elementBinding', outdoorShading.name().localName(), outdoorShading)

Schedule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, '_Schedule'), ScheduleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1407, 2))
Namespace.addCategoryObject('elementBinding', Schedule.name().localName(), Schedule)

StorageSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, '_StorageSystem'), StorageSystemType, abstract=pyxb.binding.datatypes.boolean(1), documentation='System storing energy. A same storage may store the energy of different end-users and different end-use.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1435, 2))
Namespace.addCategoryObject('elementBinding', StorageSystem.name().localName(), StorageSystem)

TimeSeries = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, '_TimeSeries'), TimeSeriesType, abstract=pyxb.binding.datatypes.boolean(1), documentation='Consistent series of time-depending values.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1455, 2))
Namespace.addCategoryObject('elementBinding', TimeSeries.name().localName(), TimeSeries)

Boiler = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Boiler'), BoilerType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 60, 2))
Namespace.addCategoryObject('elementBinding', Boiler.name().localName(), Boiler)

CombinedHeatPower = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CombinedHeatPower'), CombinedHeatPowerType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 101, 2))
Namespace.addCategoryObject('elementBinding', CombinedHeatPower.name().localName(), CombinedHeatPower)

DHWFacilities = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DHWFacilities'), DHWFacilitiesType, documentation='Facilities for domestic hot water usage.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 210, 2))
Namespace.addCategoryObject('elementBinding', DHWFacilities.name().localName(), DHWFacilities)

DistrictNetworkSubstation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DistrictNetworkSubstation'), DistrictNetworkSubstationType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 245, 2))
Namespace.addCategoryObject('elementBinding', DistrictNetworkSubstation.name().localName(), DistrictNetworkSubstation)

ElectricalAppliances = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElectricalAppliances'), ElectricalAppliancesType, documentation='Electrical appliances inside the building unit or building zone.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 262, 2))
Namespace.addCategoryObject('elementBinding', ElectricalAppliances.name().localName(), ElectricalAppliances)

ElectricalResistance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElectricalResistance'), ElectricalResistanceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 284, 2))
Namespace.addCategoryObject('elementBinding', ElectricalResistance.name().localName(), ElectricalResistance)

Gas = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Gas'), GasType, documentation='Gaseous material', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 524, 2))
Namespace.addCategoryObject('elementBinding', Gas.name().localName(), Gas)

Glazing = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Glazing'), GlazingType, documentation='Transparent material', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 554, 2))
Namespace.addCategoryObject('elementBinding', Glazing.name().localName(), Glazing)

HeatPump = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HeatPump'), HeatPumpType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 626, 2))
Namespace.addCategoryObject('elementBinding', HeatPump.name().localName(), HeatPump)

IrregularTimeSeries = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IrregularTimeSeries'), IrregularTimeSeriesType, documentation='Irregular time series is the opposite of a regular time series. The data in the time series follows a temporal sequence, but the measurements might not happen at a regular time interval.\nhttp://www-01.ibm.com/support/knowledgecenter/SSCRJU_3.0.0/com.ibm.swg.im.infosphere.streams.timeseries-toolkit.doc/doc/timeseries-regular.html', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 698, 2))
Namespace.addCategoryObject('elementBinding', IrregularTimeSeries.name().localName(), IrregularTimeSeries)

MechanicalVentilation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MechanicalVentilation'), MechanicalVentilationType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 784, 2))
Namespace.addCategoryObject('elementBinding', MechanicalVentilation.name().localName(), MechanicalVentilation)

OpaqueMaterial = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OpaqueMaterial'), OpaqueMaterialType, documentation='Opaque material.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 825, 2))
Namespace.addCategoryObject('elementBinding', OpaqueMaterial.name().localName(), OpaqueMaterial)

PowerDistributionSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PowerDistributionSystem'), PowerDistributionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 910, 2))
Namespace.addCategoryObject('elementBinding', PowerDistributionSystem.name().localName(), PowerDistributionSystem)

PowerStorageSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PowerStorageSystem'), PowerStorageSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 927, 2))
Namespace.addCategoryObject('elementBinding', PowerStorageSystem.name().localName(), PowerStorageSystem)

RegularTimeSeries = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegularTimeSeries'), RegularTimeSeriesType, documentation='regular time series contain values generated at regularly spaced interval of time', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 969, 2))
Namespace.addCategoryObject('elementBinding', RegularTimeSeries.name().localName(), RegularTimeSeries)

ScheduleLoD0 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD0'), ScheduleLoD0Type, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 989, 2))
Namespace.addCategoryObject('elementBinding', ScheduleLoD0.name().localName(), ScheduleLoD0)

ScheduleLoD1 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD1'), ScheduleLoD1Type, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1004, 2))
Namespace.addCategoryObject('elementBinding', ScheduleLoD1.name().localName(), ScheduleLoD1)

ScheduleLoD2 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD2'), ScheduleLoD2Type, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1023, 2))
Namespace.addCategoryObject('elementBinding', ScheduleLoD2.name().localName(), ScheduleLoD2)

ScheduleLoD3 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD3'), ScheduleLoD3Type, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1038, 2))
Namespace.addCategoryObject('elementBinding', ScheduleLoD3.name().localName(), ScheduleLoD3)

ThermalDistributionSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ThermalDistributionSystem'), ThermalDistributionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1172, 2))
Namespace.addCategoryObject('elementBinding', ThermalDistributionSystem.name().localName(), ThermalDistributionSystem)

ThermalStorageSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ThermalStorageSystem'), ThermalStorageSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1193, 2))
Namespace.addCategoryObject('elementBinding', ThermalStorageSystem.name().localName(), ThermalStorageSystem)

SolarEnergySystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, '_SolarEnergySystem'), SolarEnergySystemType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1416, 2))
Namespace.addCategoryObject('elementBinding', SolarEnergySystem.name().localName(), SolarEnergySystem)

PhotovoltaicSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhotovoltaicSystem'), PhotovoltaicSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 894, 2))
Namespace.addCategoryObject('elementBinding', PhotovoltaicSystem.name().localName(), PhotovoltaicSystem)

SolarThermalSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SolarThermalSystem'), SolarThermalSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1070, 2))
Namespace.addCategoryObject('elementBinding', SolarThermalSystem.name().localName(), SolarThermalSystem)



AbsorptanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'percentage'), pyxb.binding.datatypes.double, scope=AbsorptanceType, documentation='Percentage of energy absorptance', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 13, 6)))

AbsorptanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surface'), SurfaceSideType, scope=AbsorptanceType, documentation='Wavelength range', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 18, 6)))

AbsorptanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wavelengthRange'), WavelengthRangeTypeType, scope=AbsorptanceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 23, 6)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbsorptanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'percentage')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 13, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbsorptanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surface')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbsorptanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wavelengthRange')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 23, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbsorptanceType._Automaton = _BuildAutomaton()




AbsorptancePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Absorptance'), AbsorptanceType, scope=AbsorptancePropertyType, documentation='Percentaged  energy absorptance in different wavelength ranges', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 6, 2)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbsorptancePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Absorptance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 28, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbsorptancePropertyType._Automaton = _BuildAutomaton_()




AbstractMaterialType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'referenceURI'), pyxb.binding.datatypes.anyURI, scope=AbstractMaterialType, documentation='Reference to internal or external information sources.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 40, 10)))

AbstractMaterialType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'imageTexture'), ImageTexturePropertyType, scope=AbstractMaterialType, documentation='Reference to a texture file', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 45, 10)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 40, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 45, 10))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'creationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'terminationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'externalReference')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'generalizesTo')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, '_GenericApplicationPropertyOfCityObject')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMaterialType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenceURI')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 40, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMaterialType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'imageTexture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 45, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractMaterialType._Automaton = _BuildAutomaton_2()




AbstractMaterialPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractMaterial'), AbstractMaterialType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractMaterialPropertyType, documentation='Abstract superclass for all Material classes. A Material is a homogeneous substance that can be used to form elements.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 31, 2)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 55, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMaterialPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractMaterial')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 56, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractMaterialPropertyType._Automaton = _BuildAutomaton_3()




BoilerPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Boiler'), BoilerType, scope=BoilerPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 60, 2)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 71, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BoilerPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Boiler')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 72, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BoilerPropertyType._Automaton = _BuildAutomaton_4()




BuildingUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numberOfRooms'), pyxb.binding.datatypes.integer, scope=BuildingUnitType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 85, 10)))

BuildingUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ownerName'), pyxb.binding.datatypes.string, scope=BuildingUnitType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 86, 10)))

BuildingUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ownershipType'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=BuildingUnitType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 87, 10)))

BuildingUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usedArea'), teaser.Data.SchemaBindings.opengis.raw.gml.AreaType, scope=BuildingUnitType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 88, 10)))

BuildingUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'occupiedBy'), OccupancyPropertyType, scope=BuildingUnitType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 89, 10)))

BuildingUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'has'), FacilitiesPropertyType, scope=BuildingUnitType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 90, 10)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 85, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 86, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 87, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 88, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 89, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 90, 10))
    counters.add(cc_15)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'creationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'terminationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'externalReference')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'generalizesTo')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, '_GenericApplicationPropertyOfCityObject')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numberOfRooms')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 85, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ownerName')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 86, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ownershipType')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 87, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usedArea')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 88, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'occupiedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 89, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'has')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 90, 10))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BuildingUnitType._Automaton = _BuildAutomaton_5()




BuildingUnitPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BuildingUnit'), BuildingUnitType, scope=BuildingUnitPropertyType, documentation='A building unit is a part of usage zone, such as dwelling or workplace, which is related to a single occupant entity.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 76, 2)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 96, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BuildingUnitPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BuildingUnit')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 97, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BuildingUnitPropertyType._Automaton = _BuildAutomaton_6()




CombinedHeatPowerPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CombinedHeatPower'), CombinedHeatPowerType, scope=CombinedHeatPowerPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 101, 2)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 112, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CombinedHeatPower')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 113, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CombinedHeatPowerPropertyType._Automaton = _BuildAutomaton_7()




ConstructionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'absorptance'), AbsorptancePropertyType, scope=ConstructionType, documentation='Energy absorptance', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 134, 10)))

ConstructionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'reflectance'), ReflectancePropertyType, scope=ConstructionType, documentation='Percentage energy reflectance', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 139, 10)))

ConstructionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transmittance'), TransmittancePropertyType, scope=ConstructionType, documentation='Percentaged transmittance of shading surface', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 144, 10)))

ConstructionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'uValue'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=ConstructionType, documentation='U-Value - Overall conductance', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 149, 10)))

ConstructionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'layer'), LayerPropertyType, scope=ConstructionType, documentation="Reference to layers that comprise this construction. Multiple LayerId's order is important and specifies the layering of the layer's referenced materials. The first Surface/AdjacentSpaceId entered will determine how the referenced construction layers are ordered with the first construction layer being in contact with the outside or 2nd Surface/AdjacentSpaceId listed and the last layer in contact with the first Surface/AdjacentSpaceId listed", location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 154, 10)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 134, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 139, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 144, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 149, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 154, 10))
    counters.add(cc_14)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'creationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'terminationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'externalReference')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'generalizesTo')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, '_GenericApplicationPropertyOfCityObject')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'absorptance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 134, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'reflectance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 139, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transmittance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 144, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'uValue')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 149, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'layer')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 154, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ConstructionType._Automaton = _BuildAutomaton_8()




ConstructionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Construction'), ConstructionType, scope=ConstructionPropertyType, documentation='A Construction is a combination of layers, such as a wall or a roof.\n<p> <img src="../png/Construction-Layer-Illustration.png"></p>', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 124, 2)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 164, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Construction')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 165, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ConstructionPropertyType._Automaton = _BuildAutomaton_9()




ConstructionOrientationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orientation'), pyxb.binding.datatypes.boolean, scope=ConstructionOrientationType, documentation='If <i>orientation == true</i> the layers are used in the specified order (see  Construction), otherwise in reverse order.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 178, 10)))

ConstructionOrientationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baseConstruction'), ConstructionPropertyType, scope=ConstructionOrientationType, documentation='Reference to the Construction being used.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 183, 10)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConstructionOrientationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConstructionOrientationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConstructionOrientationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConstructionOrientationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConstructionOrientationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConstructionOrientationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'creationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConstructionOrientationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'terminationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConstructionOrientationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'externalReference')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConstructionOrientationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'generalizesTo')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConstructionOrientationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, '_GenericApplicationPropertyOfCityObject')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConstructionOrientationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orientation')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 178, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstructionOrientationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'baseConstruction')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 183, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConstructionOrientationType._Automaton = _BuildAutomaton_10()




ConstructionOrientationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConstructionOrientation'), ConstructionOrientationType, scope=ConstructionOrientationPropertyType, documentation='Determines the usage of Construction in terms of the Layer order.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 169, 2)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 193, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConstructionOrientationPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ConstructionOrientation')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 194, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ConstructionOrientationPropertyType._Automaton = _BuildAutomaton_11()




ControlTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'controlledVariable'), pyxb.binding.datatypes.string, scope=ControlTypeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 201, 6)))

ControlTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'setPoint'), SchedulePropertyType, scope=ControlTypeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 202, 6)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ControlTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'controlledVariable')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 201, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ControlTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'setPoint')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 202, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ControlTypeType._Automaton = _BuildAutomaton_12()




ControlTypePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ControlType'), ControlTypeType, scope=ControlTypePropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 198, 2)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ControlTypePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ControlType')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 207, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ControlTypePropertyType._Automaton = _BuildAutomaton_13()




DHWFacilitiesPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DHWFacilities'), DHWFacilitiesType, scope=DHWFacilitiesPropertyType, documentation='Facilities for domestic hot water usage.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 210, 2)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 228, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DHWFacilitiesPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DHWFacilities')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 229, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DHWFacilitiesPropertyType._Automaton = _BuildAutomaton_14()




DailyScheduleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dayType'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=DailyScheduleType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 236, 6)))

DailyScheduleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schedule'), TimeSeriesPropertyType, scope=DailyScheduleType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 237, 6)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DailyScheduleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dayType')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 236, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DailyScheduleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schedule')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 237, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DailyScheduleType._Automaton = _BuildAutomaton_15()




DailySchedulePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DailySchedule'), DailyScheduleType, scope=DailySchedulePropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 233, 2)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DailySchedulePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DailySchedule')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 242, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DailySchedulePropertyType._Automaton = _BuildAutomaton_16()




DistrictNetworkSubstationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DistrictNetworkSubstation'), DistrictNetworkSubstationType, scope=DistrictNetworkSubstationPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 245, 2)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 257, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DistrictNetworkSubstation')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 258, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DistrictNetworkSubstationPropertyType._Automaton = _BuildAutomaton_17()




ElectricalAppliancesPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElectricalAppliances'), ElectricalAppliancesType, scope=ElectricalAppliancesPropertyType, documentation='Electrical appliances inside the building unit or building zone.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 262, 2)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 279, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ElectricalAppliancesPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElectricalAppliances')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 280, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ElectricalAppliancesPropertyType._Automaton = _BuildAutomaton_18()




ElectricalResistancePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElectricalResistance'), ElectricalResistanceType, scope=ElectricalResistancePropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 284, 2)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 293, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ElectricalResistancePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElectricalResistance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 294, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ElectricalResistancePropertyType._Automaton = _BuildAutomaton_19()




EmittanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'percentage'), pyxb.binding.datatypes.double, scope=EmittanceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 305, 6)))

EmittanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surface'), SurfaceSideType, scope=EmittanceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 306, 6)))

EmittanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wavelengthRange'), WavelengthRangeTypeType, scope=EmittanceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 307, 6)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EmittanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'percentage')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 305, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EmittanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surface')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 306, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EmittanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wavelengthRange')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 307, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EmittanceType._Automaton = _BuildAutomaton_20()




EmittancePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Emittance'), EmittanceType, scope=EmittancePropertyType, documentation='Percentaged infra-red emissivity', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 298, 2)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EmittancePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Emittance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 312, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EmittancePropertyType._Automaton = _BuildAutomaton_21()




EndUseUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower'), HeatExchangeTypePropertyType, scope=EndUseUnitType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 324, 10)))

EndUseUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), pyxb.binding.datatypes.integer, scope=EndUseUnitType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 325, 10)))

EndUseUnitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=EndUseUnitType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 326, 10)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 324, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 325, 10))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EndUseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EndUseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EndUseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EndUseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EndUseUnitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EndUseUnitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 324, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EndUseUnitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 325, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EndUseUnitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 326, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EndUseUnitType._Automaton = _BuildAutomaton_22()




EndUseUnitPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndUseUnit'), EndUseUnitType, scope=EndUseUnitPropertyType, documentation='Final device(s) which deliver the required end-use to the end-user in his end-use place (e.g. radiators or convectors for heating etc.)', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 315, 2)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 332, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EndUseUnitPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndUseUnit')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 333, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EndUseUnitPropertyType._Automaton = _BuildAutomaton_23()




EnergyCarrierType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'co2EmissionFactor'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=EnergyCarrierType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 344, 6)))

EnergyCarrierType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'energyDensity'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=EnergyCarrierType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 345, 6)))

EnergyCarrierType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'primaryEnergyFactor'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=EnergyCarrierType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 346, 6)))

EnergyCarrierType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=EnergyCarrierType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 347, 6)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 345, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyCarrierType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'co2EmissionFactor')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 344, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyCarrierType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'energyDensity')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 345, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyCarrierType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'primaryEnergyFactor')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 346, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EnergyCarrierType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 347, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EnergyCarrierType._Automaton = _BuildAutomaton_24()




EnergyCarrierPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnergyCarrier'), EnergyCarrierType, scope=EnergyCarrierPropertyType, documentation='Energy form containing the energy (e.g. fuel, renewable energy etc.)', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 337, 2)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EnergyCarrierPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EnergyCarrier')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 352, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EnergyCarrierPropertyType._Automaton = _BuildAutomaton_25()




EnergyConversionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'efficiencyIndicator'), pyxb.binding.datatypes.string, scope=EnergyConversionSystemType, documentation='COP, EER, W/(m3/h) etc.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10)))

EnergyConversionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=EnergyConversionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10)))

EnergyConversionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'model'), pyxb.binding.datatypes.string, scope=EnergyConversionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10)))

EnergyConversionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nominalEfficiency'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=EnergyConversionSystemType, documentation='give also Efficiency Unit (COP, EEF, W/cfm, %, other)', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10)))

EnergyConversionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), pyxb.binding.datatypes.integer, scope=EnergyConversionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10)))

EnergyConversionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'productAndInstallationDocument'), teaser.Data.SchemaBindings.opengis.citygml.raw.base.ExternalReferenceType, scope=EnergyConversionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10)))

EnergyConversionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'yearOfManufacture'), pyxb.binding.datatypes.gYear, scope=EnergyConversionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10)))

EnergyConversionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'has'), OperationModePropertyType, scope=EnergyConversionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10)))

EnergyConversionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'consumes'), EnergySourcePropertyType, scope=EnergyConversionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 380, 10)))

EnergyConversionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'installedIn'), teaser.Data.SchemaBindings.opengis.raw.gml.ReferenceType, scope=EnergyConversionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'efficiencyIndicator')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'model')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nominalEfficiency')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'productAndInstallationDocument')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearOfManufacture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'has')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'consumes')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 380, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedIn')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EnergyConversionSystemType._Automaton = _BuildAutomaton_26()




EnergyConversionSystemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnergyConversionSystem'), EnergyConversionSystemType, scope=EnergyConversionSystemPropertyType, documentation='Energy conversion system is a system producing the energy necessary to satisfy the end-use (or to feed the networks) from an energy source.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 355, 2)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 387, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EnergyConversionSystemPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EnergyConversionSystem')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 388, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EnergyConversionSystemPropertyType._Automaton = _BuildAutomaton_27()




EnergyCoverageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coverageRatio'), TimeSeriesPropertyType, scope=EnergyCoverageType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 401, 10)))

EnergyCoverageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coveredBy'), OperationModePropertyType, scope=EnergyCoverageType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 402, 10)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 402, 10))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyCoverageType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EnergyCoverageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'coverageRatio')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 401, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(EnergyCoverageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'coveredBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 402, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EnergyCoverageType._Automaton = _BuildAutomaton_28()




EnergyCoveragePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnergyCoverage'), EnergyCoverageType, scope=EnergyCoveragePropertyType, documentation='Determine the level of energy coverage (may be time depending) by a given operation mode of an energy conversion system.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 392, 2)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 408, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EnergyCoveragePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EnergyCoverage')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 409, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EnergyCoveragePropertyType._Automaton = _BuildAutomaton_29()




EnergyDemandType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endUse'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=EnergyDemandType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 422, 10)))

EnergyDemandType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'energyAmount'), TimeSeriesPropertyType, scope=EnergyDemandType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 423, 10)))

EnergyDemandType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'energyDistribution'), EnergyDistributionSystemPropertyType, scope=EnergyDemandType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 424, 10)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 423, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 424, 10))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyDemandType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyDemandType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyDemandType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyDemandType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergyDemandType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EnergyDemandType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endUse')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 422, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(EnergyDemandType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'energyAmount')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 423, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(EnergyDemandType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'energyDistribution')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 424, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EnergyDemandType._Automaton = _BuildAutomaton_30()




EnergyDemandPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnergyDemand'), EnergyDemandType, scope=EnergyDemandPropertyType, documentation='Energy demand is the useful energy required to satisfy a specific end-use, such as heating, cooling, domestic hot water etc.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 413, 2)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 430, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EnergyDemandPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EnergyDemand')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 431, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EnergyDemandPropertyType._Automaton = _BuildAutomaton_31()




EnergyDistributionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'distributionPerimeter'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=EnergyDistributionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 444, 10)))

EnergyDistributionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'storageSystem'), StorageSystemPropertyType, scope=EnergyDistributionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 445, 10)))

EnergyDistributionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'energySupply'), EnergySupplyPropertyType, scope=EnergyDistributionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 446, 10)))

EnergyDistributionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endUseUnit'), EndUseUnitPropertyType, scope=EnergyDistributionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 447, 10)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 444, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 445, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 446, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 447, 10))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EnergyDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EnergyDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(EnergyDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(EnergyDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(EnergyDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(EnergyDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'distributionPerimeter')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 444, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(EnergyDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'storageSystem')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 445, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(EnergyDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'energySupply')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 446, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(EnergyDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endUseUnit')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 447, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EnergyDistributionSystemType._Automaton = _BuildAutomaton_32()




EnergyDistributionSystemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnergyDistributionSystem'), EnergyDistributionSystemType, scope=EnergyDistributionSystemPropertyType, documentation='Energy distribution system is a system in charge of delivering the energy inside the building, from the place of energy production to the place of end-use. It consists then in the storage (including battery/tank and pipe volumes), the circulation pumps, the distribution pipes and the end use units (radiators, fan coils etc.).', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 435, 2)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 453, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EnergyDistributionSystemPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EnergyDistributionSystem')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 454, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EnergyDistributionSystemPropertyType._Automaton = _BuildAutomaton_33()




EnergySourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'energyAmount'), TimeSeriesPropertyType, scope=EnergySourceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 467, 10)))

EnergySourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'energyCarrier'), EnergyCarrierPropertyType, scope=EnergySourceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 468, 10)))

EnergySourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coverage'), EnergyCoveragePropertyType, scope=EnergySourceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 469, 10)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 467, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 469, 10))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergySourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergySourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergySourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergySourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergySourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergySourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'energyAmount')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 467, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EnergySourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'energyCarrier')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 468, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(EnergySourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'coverage')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 469, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EnergySourceType._Automaton = _BuildAutomaton_34()




EnergySourcePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnergySource'), EnergySourceType, scope=EnergySourcePropertyType, documentation='Energy Source is the final energy consumed by the energy conversion system.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 458, 2)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 475, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EnergySourcePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EnergySource')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 476, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EnergySourcePropertyType._Automaton = _BuildAutomaton_35()




EnergySupplyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endUse'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=EnergySupplyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 489, 10)))

EnergySupplyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'energyAmount'), TimeSeriesPropertyType, scope=EnergySupplyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 490, 10)))

EnergySupplyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'medium'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=EnergySupplyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 491, 10)))

EnergySupplyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'producedBy'), OperationModePropertyType, scope=EnergySupplyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 492, 10)))

EnergySupplyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coverage'), EnergyCoveragePropertyType, scope=EnergySupplyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 493, 10)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 489, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 490, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 491, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 493, 10))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergySupplyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergySupplyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergySupplyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergySupplyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergySupplyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergySupplyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endUse')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 489, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergySupplyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'energyAmount')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 490, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EnergySupplyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'medium')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 491, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EnergySupplyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'producedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 492, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(EnergySupplyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'coverage')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 493, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EnergySupplyType._Automaton = _BuildAutomaton_36()




EnergySupplyPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnergySupply'), EnergySupplyType, scope=EnergySupplyPropertyType, documentation='Energy supply is the part of the energy produced by the energy conversion systems which is used to satisfy the end-use demand of a city object.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 480, 2)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 499, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EnergySupplyPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EnergySupply')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 500, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EnergySupplyPropertyType._Automaton = _BuildAutomaton_37()




FacilitiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'operationSchedules'), SchedulePropertyType, scope=FacilitiesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 513, 10)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 513, 10))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FacilitiesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FacilitiesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FacilitiesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FacilitiesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FacilitiesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(FacilitiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operationSchedules')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 513, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
FacilitiesType._Automaton = _BuildAutomaton_38()




FacilitiesPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Facilities'), FacilitiesType, scope=FacilitiesPropertyType, documentation='Facilities and Appliances inside the usage zone or building unit, which consumes and dissipate energy.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 504, 2)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 519, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FacilitiesPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Facilities')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 520, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
FacilitiesPropertyType._Automaton = _BuildAutomaton_39()




GasPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Gas'), GasType, scope=GasPropertyType, documentation='Gaseous material', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 524, 2)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 549, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GasPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Gas')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 550, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
GasPropertyType._Automaton = _BuildAutomaton_40()




GlazingPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Glazing'), GlazingType, scope=GlazingPropertyType, documentation='Transparent material', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 554, 2)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 603, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GlazingPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Glazing')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 604, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
GlazingPropertyType._Automaton = _BuildAutomaton_41()




HeatExchangeTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'convectiveFraction'), teaser.Data.SchemaBindings.opengis.raw.gml.ScaleType, scope=HeatExchangeTypeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 615, 6)))

HeatExchangeTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'latentFraction'), teaser.Data.SchemaBindings.opengis.raw.gml.ScaleType, scope=HeatExchangeTypeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 616, 6)))

HeatExchangeTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'radiantFraction'), teaser.Data.SchemaBindings.opengis.raw.gml.ScaleType, scope=HeatExchangeTypeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 617, 6)))

HeatExchangeTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'totalValue'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=HeatExchangeTypeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 618, 6)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 615, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 616, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 617, 6))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatExchangeTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'convectiveFraction')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 615, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatExchangeTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'latentFraction')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 616, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatExchangeTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'radiantFraction')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 617, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HeatExchangeTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'totalValue')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 618, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
HeatExchangeTypeType._Automaton = _BuildAutomaton_42()




HeatExchangeTypePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HeatExchangeType'), HeatExchangeTypeType, scope=HeatExchangeTypePropertyType, documentation='Contributions of the different types of heat or cool exchange (convective, radiant and latent)', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 608, 2)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HeatExchangeTypePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HeatExchangeType')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 623, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
HeatExchangeTypePropertyType._Automaton = _BuildAutomaton_43()




HeatPumpPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HeatPump'), HeatPumpType, scope=HeatPumpPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 626, 2)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 638, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(HeatPumpPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HeatPump')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 639, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
HeatPumpPropertyType._Automaton = _BuildAutomaton_44()




HouseholdType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'residenceType'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=HouseholdType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 652, 10)))

HouseholdType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=HouseholdType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 653, 10)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 652, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 653, 10))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(HouseholdType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(HouseholdType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(HouseholdType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(HouseholdType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(HouseholdType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(HouseholdType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'residenceType')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 652, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(HouseholdType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 653, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
HouseholdType._Automaton = _BuildAutomaton_45()




HouseholdPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Household'), HouseholdType, scope=HouseholdPropertyType, documentation='Household is a group of persons living in the same dwelling, in the case where occupant type is residents.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 643, 2)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 659, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(HouseholdPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Household')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 660, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
HouseholdPropertyType._Automaton = _BuildAutomaton_46()




ImageTextureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'url'), pyxb.binding.datatypes.anyURI, scope=ImageTextureType, documentation='Specifies location of the image. From X3D specification: The texture is read from the URL specified by the url field. When the url field contains no values, texturing is disabled. Browsers shall support the JPEG and PNG image file formats. In addition, browsers may support other image formats (e.g. CGM) which can be rendered into a 2D image. Support for the GIF format is also recommended (including transparency).', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 673, 10)))

ImageTextureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'repeatS'), pyxb.binding.datatypes.boolean, scope=ImageTextureType, documentation='From X3D specification: If repeatS is TRUE, the texture map is repeated outside the [0.0, 1.0] texture coordinate range in the S direction so that it fills the shape. If repeatS is FALSE, the texture coordinates are clamped in the S direction to lie within the [0.0, 1.0] range.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 678, 10)))

ImageTextureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'repeatT'), pyxb.binding.datatypes.boolean, scope=ImageTextureType, documentation='From X3D specification: If repeatT is TRUE, the texture map is repeated outside the [0.0, 1.0] texture coordinate range in the T direction so that it fills the shape. If repeatT is FALSE, the texture coordinates are clamped in the T direction to lie within the [0.0, 1.0] range.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 683, 10)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ImageTextureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ImageTextureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ImageTextureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ImageTextureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ImageTextureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ImageTextureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'url')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 673, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ImageTextureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'repeatS')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 678, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ImageTextureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'repeatT')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 683, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ImageTextureType._Automaton = _BuildAutomaton_47()




ImageTexturePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ImageTexture'), ImageTextureType, scope=ImageTexturePropertyType, documentation='This is an X3D element to map a texture to this material. From X3D specification: The ImageTexture node defines a texture map by specifying an image file and general parameters for mapping to geometry. Texture maps are defined in a 2D coordinate system (s, t) that ranges from [0.0, 1.0] in both directions. The bottom edge of the image corresponds to the S-axis of the texture map, and left edge of the image corresponds to the T-axis of the texture map. The lower-left pixel of the image corresponds to s=0, t=0, and the top-right pixel of the image corresponds to s=1, t=1. <!--When fixed: add type="x3d:ImageTexture"-->', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 664, 2)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 693, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ImageTexturePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ImageTexture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 694, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ImageTexturePropertyType._Automaton = _BuildAutomaton_48()




IrregularTimeSeriesPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IrregularTimeSeries'), IrregularTimeSeriesType, scope=IrregularTimeSeriesPropertyType, documentation='Irregular time series is the opposite of a regular time series. The data in the time series follows a temporal sequence, but the measurements might not happen at a regular time interval.\nhttp://www-01.ibm.com/support/knowledgecenter/SSCRJU_3.0.0/com.ibm.swg.im.infosphere.streams.timeseries-toolkit.doc/doc/timeseries-regular.html', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 698, 2)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IrregularTimeSeriesPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IrregularTimeSeries')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 715, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IrregularTimeSeriesPropertyType._Automaton = _BuildAutomaton_49()




LayerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'layerComponent'), LayerComponentPropertyType, scope=LayerType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 727, 10)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'creationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'terminationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'externalReference')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'generalizesTo')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, '_GenericApplicationPropertyOfCityObject')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LayerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'layerComponent')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 727, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LayerType._Automaton = _BuildAutomaton_50()




LayerPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Layer'), LayerType, scope=LayerPropertyType, documentation='A Layer is a combination of one of more materials, references via a LayerComponent.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 718, 2)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 733, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LayerPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Layer')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 734, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LayerPropertyType._Automaton = _BuildAutomaton_51()




LayerComponentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'areaFraction'), teaser.Data.SchemaBindings.opengis.raw.gml.ScaleType, scope=LayerComponentType, documentation='Percentage (1 - 100%) of the layer area that the referenced Material is made from.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 747, 10), unicode_default='100.0'))

LayerComponentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'thickness'), teaser.Data.SchemaBindings.opengis.raw.gml.LengthType, scope=LayerComponentType, documentation='Thickness of a layer component.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 752, 10)))

LayerComponentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'material'), AbstractMaterialPropertyType, scope=LayerComponentType, documentation='Reference to the correspondinf Material', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 757, 10)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 747, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 752, 10))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerComponentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'areaFraction')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 747, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LayerComponentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'thickness')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 752, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LayerComponentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'material')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 757, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LayerComponentType._Automaton = _BuildAutomaton_52()




LayerComponentPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LayerComponent'), LayerComponentType, scope=LayerComponentPropertyType, documentation='<p> <img src="../png/LayerComponent-Illustration.png"></p>', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 738, 2)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 767, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LayerComponentPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LayerComponent')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 768, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LayerComponentPropertyType._Automaton = _BuildAutomaton_53()




MeasurementPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'time'), teaser.Data.SchemaBindings.opengis.raw.gml.TimePositionType, scope=MeasurementPointType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 775, 6)))

MeasurementPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), pyxb.binding.datatypes.double, scope=MeasurementPointType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 776, 6)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'time')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 775, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 776, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MeasurementPointType._Automaton = _BuildAutomaton_54()




MeasurementPointPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPoint'), MeasurementPointType, scope=MeasurementPointPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 772, 2)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MeasurementPointPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPoint')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 781, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MeasurementPointPropertyType._Automaton = _BuildAutomaton_55()




MechanicalVentilationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MechanicalVentilation'), MechanicalVentilationType, scope=MechanicalVentilationPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 784, 2)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 796, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MechanicalVentilation')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 797, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MechanicalVentilationPropertyType._Automaton = _BuildAutomaton_56()




OccupancyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'internGains'), HeatExchangeTypePropertyType, scope=OccupancyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 810, 10)))

OccupancyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numberOfOccupants'), pyxb.binding.datatypes.integer, scope=OccupancyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 811, 10)))

OccupancyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'occupancyRate'), SchedulePropertyType, scope=OccupancyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 812, 10)))

OccupancyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'occupantType'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=OccupancyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 813, 10)))

OccupancyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'consiststOf'), HouseholdPropertyType, scope=OccupancyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 814, 10)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 810, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 811, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 812, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 813, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 814, 10))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OccupancyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OccupancyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(OccupancyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(OccupancyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(OccupancyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(OccupancyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'internGains')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 810, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(OccupancyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numberOfOccupants')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 811, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(OccupancyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'occupancyRate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 812, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(OccupancyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'occupantType')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 813, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(OccupancyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'consiststOf')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 814, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
OccupancyType._Automaton = _BuildAutomaton_57()




OccupancyPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Occupancy'), OccupancyType, scope=OccupancyPropertyType, documentation='Occupancy is an aggregated group of occupants of a usage zone or building unit, which can be residents, workers, visitors etc.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 801, 2)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 820, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OccupancyPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Occupancy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 821, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
OccupancyPropertyType._Automaton = _BuildAutomaton_58()




OpaqueMaterialPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OpaqueMaterial'), OpaqueMaterialType, scope=OpaqueMaterialPropertyType, documentation='Opaque material.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 825, 2)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 864, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OpaqueMaterial')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 865, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
OpaqueMaterialPropertyType._Automaton = _BuildAutomaton_59()




OperationModeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'controls'), ControlTypePropertyType, scope=OperationModeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 878, 10)))

OperationModeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endUse'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=OperationModeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 879, 10)))

OperationModeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'operationTime'), SchedulePropertyType, scope=OperationModeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 880, 10)))

OperationModeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'yearlyGlobalEfficiency'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=OperationModeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 881, 10)))

OperationModeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'belongs'), EnergyConversionSystemPropertyType, scope=OperationModeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 882, 10)))

OperationModeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'produced'), EnergySupplyPropertyType, scope=OperationModeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 883, 10)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 878, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 880, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 881, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 882, 10))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OperationModeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OperationModeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OperationModeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OperationModeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OperationModeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OperationModeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'controls')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 878, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OperationModeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endUse')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 879, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OperationModeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operationTime')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 880, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OperationModeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearlyGlobalEfficiency')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 881, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OperationModeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'belongs')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 882, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OperationModeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'produced')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 883, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OperationModeType._Automaton = _BuildAutomaton_60()




OperationModePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OperationMode'), OperationModeType, scope=OperationModePropertyType, documentation='Operation mode details the operation of the energy conversion system for a specific end-use and operation time.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 869, 2)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 889, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OperationModePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OperationMode')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 890, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
OperationModePropertyType._Automaton = _BuildAutomaton_61()




PhotovoltaicSystemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhotovoltaicSystem'), PhotovoltaicSystemType, scope=PhotovoltaicSystemPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 894, 2)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 905, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PhotovoltaicSystem')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 906, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PhotovoltaicSystemPropertyType._Automaton = _BuildAutomaton_62()




PowerDistributionSystemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PowerDistributionSystem'), PowerDistributionSystemType, scope=PowerDistributionSystemPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 910, 2)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 922, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PowerDistributionSystemPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PowerDistributionSystem')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 923, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PowerDistributionSystemPropertyType._Automaton = _BuildAutomaton_63()




PowerStorageSystemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PowerStorageSystem'), PowerStorageSystemType, scope=PowerStorageSystemPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 927, 2)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 939, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PowerStorageSystemPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PowerStorageSystem')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 940, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PowerStorageSystemPropertyType._Automaton = _BuildAutomaton_64()




ReflectanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'percentage'), pyxb.binding.datatypes.double, scope=ReflectanceType, documentation='Percentage of energy reflectance', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 951, 6)))

ReflectanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surface'), SurfaceSideType, scope=ReflectanceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 956, 6)))

ReflectanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wavelengthRange'), WavelengthRangeTypeType, scope=ReflectanceType, documentation='Wavelength range', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 957, 6)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReflectanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'percentage')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 951, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReflectanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surface')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 956, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReflectanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wavelengthRange')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 957, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ReflectanceType._Automaton = _BuildAutomaton_65()




ReflectancePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Reflectance'), ReflectanceType, scope=ReflectancePropertyType, documentation='Percentaged  energy reflectance in different wavelength ranges', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 944, 2)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReflectancePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Reflectance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 966, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ReflectancePropertyType._Automaton = _BuildAutomaton_66()




RegularTimeSeriesPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegularTimeSeries'), RegularTimeSeriesType, scope=RegularTimeSeriesPropertyType, documentation='regular time series contain values generated at regularly spaced interval of time', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 969, 2)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RegularTimeSeriesPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegularTimeSeries')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 986, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RegularTimeSeriesPropertyType._Automaton = _BuildAutomaton_67()




ScheduleLoD0PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD0'), ScheduleLoD0Type, scope=ScheduleLoD0PropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 989, 2)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ScheduleLoD0PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD0')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1001, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ScheduleLoD0PropertyType._Automaton = _BuildAutomaton_68()




ScheduleLoD1PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD1'), ScheduleLoD1Type, scope=ScheduleLoD1PropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1004, 2)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ScheduleLoD1PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD1')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1020, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ScheduleLoD1PropertyType._Automaton = _BuildAutomaton_69()




ScheduleLoD2PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD2'), ScheduleLoD2Type, scope=ScheduleLoD2PropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1023, 2)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ScheduleLoD2PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD2')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1035, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ScheduleLoD2PropertyType._Automaton = _BuildAutomaton_70()




ScheduleLoD3PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD3'), ScheduleLoD3Type, scope=ScheduleLoD3PropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1038, 2)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ScheduleLoD3PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScheduleLoD3')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1050, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ScheduleLoD3PropertyType._Automaton = _BuildAutomaton_71()




ShadingTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maximumCoverRatio'), teaser.Data.SchemaBindings.opengis.raw.gml.ScaleType, scope=ShadingTypeType, documentation='Maximum fraction of the related opening which can be covered with the shading device.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1056, 6)))

ShadingTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.string, scope=ShadingTypeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1061, 6)))

ShadingTypeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transmittance'), TransmittancePropertyType, scope=ShadingTypeType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1062, 6)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ShadingTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maximumCoverRatio')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1056, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ShadingTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1061, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ShadingTypeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transmittance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1062, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ShadingTypeType._Automaton = _BuildAutomaton_72()




ShadingTypePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ShadingType'), ShadingTypeType, scope=ShadingTypePropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1053, 2)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ShadingTypePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ShadingType')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1067, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ShadingTypePropertyType._Automaton = _BuildAutomaton_73()




SolarThermalSystemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SolarThermalSystem'), SolarThermalSystemType, scope=SolarThermalSystemPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1070, 2)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1081, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SolarThermalSystem')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1082, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SolarThermalSystemPropertyType._Automaton = _BuildAutomaton_74()




SurfaceComponentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'area'), teaser.Data.SchemaBindings.opengis.raw.gml.AreaType, scope=SurfaceComponentType, documentation='Area of the surface [m\xb2], portion of the related thermal boundary surface.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1095, 10)))

SurfaceComponentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isGroundCoupled'), pyxb.binding.datatypes.boolean, scope=SurfaceComponentType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1100, 10)))

SurfaceComponentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isSunExposed'), pyxb.binding.datatypes.boolean, scope=SurfaceComponentType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1101, 10)))

SurfaceComponentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'relates'), teaser.Data.SchemaBindings.opengis.raw.gml.ReferenceType, scope=SurfaceComponentType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1102, 10)))

SurfaceComponentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adjacentTo'), ThermalZonePropertyType, scope=SurfaceComponentType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1103, 10)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1102, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1103, 10))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'creationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'terminationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'externalReference')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'generalizesTo')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, '_GenericApplicationPropertyOfCityObject')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'area')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1095, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isGroundCoupled')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1100, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isSunExposed')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1101, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'relates')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1102, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'adjacentTo')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1103, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SurfaceComponentType._Automaton = _BuildAutomaton_75()




SurfaceComponentPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SurfaceComponent'), SurfaceComponentType, scope=SurfaceComponentPropertyType, documentation='Part of the thermal boundary surface corresponding to an homogeneous construction component (e.g. windows, wall, insulated part of a wall etc.)', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1086, 2)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1109, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SurfaceComponentPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SurfaceComponent')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1110, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SurfaceComponentPropertyType._Automaton = _BuildAutomaton_76()




ThermalBoundarySurfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'azimuth'), teaser.Data.SchemaBindings.opengis.raw.gml.AngleType, scope=ThermalBoundarySurfaceType, documentation='Azimuth angle of the normal surface vector.\nBy convention:\n- azimuth = 0 for north orientation.\n- Horizontal surface have a azimuth = 0.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1129, 10)))

ThermalBoundarySurfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'inclination'), teaser.Data.SchemaBindings.opengis.raw.gml.AngleType, scope=ThermalBoundarySurfaceType, documentation='Inclination angle of the normal surface vector.\nBy convention, inclination = 0 for horizontal plane.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1137, 10)))

ThermalBoundarySurfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), ThermalBoundarySurfaceTypeTypeType, scope=ThermalBoundarySurfaceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1143, 10)))

ThermalBoundarySurfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'composedOf'), SurfaceComponentPropertyType, scope=ThermalBoundarySurfaceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1144, 10)))

ThermalBoundarySurfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'partOf'), ThermalZonePropertyType, scope=ThermalBoundarySurfaceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1145, 10)))

ThermalBoundarySurfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'correspondsTo'), teaser.Data.SchemaBindings.opengis.raw.gml.ReferenceType, scope=ThermalBoundarySurfaceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1146, 10)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1129, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1137, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1145, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1146, 10))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'creationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'terminationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'externalReference')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'generalizesTo')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, '_GenericApplicationPropertyOfCityObject')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'azimuth')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1129, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inclination')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1137, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1143, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'composedOf')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1144, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'partOf')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1145, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'correspondsTo')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1146, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ThermalBoundarySurfaceType._Automaton = _BuildAutomaton_77()




ThermalBoundarySurfacePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ThermalBoundarySurface'), ThermalBoundarySurfaceType, scope=ThermalBoundarySurfacePropertyType, documentation='Thermal boundary surfaces are quasi-coplanar surfaces bounding the thermal zone. They may be linked to the gml:BoundarySurface when possible, but not necessary (e.g. cellar ceiling or top storey ceiling in the case of LOD1-3)', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1120, 2)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1152, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ThermalBoundarySurfacePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ThermalBoundarySurface')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1153, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ThermalBoundarySurfacePropertyType._Automaton = _BuildAutomaton_78()




ThermalDistributionSystemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ThermalDistributionSystem'), ThermalDistributionSystemType, scope=ThermalDistributionSystemPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1172, 2)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1188, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ThermalDistributionSystem')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1189, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ThermalDistributionSystemPropertyType._Automaton = _BuildAutomaton_79()




ThermalStorageSystemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ThermalStorageSystem'), ThermalStorageSystemType, scope=ThermalStorageSystemPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1193, 2)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1211, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ThermalStorageSystemPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ThermalStorageSystem')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1212, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ThermalStorageSystemPropertyType._Automaton = _BuildAutomaton_80()




ThermalZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'additionalThermalBridgeUValue'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=ThermalZoneType, documentation='Transmission heat loss contribution [W/m\xb2.K] of the thermal bridges of the thermal zone shell to the overall UValue.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1226, 10)))

ThermalZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cooledFloorArea'), teaser.Data.SchemaBindings.opengis.raw.gml.AreaType, scope=ThermalZoneType, documentation='Actively cooled floor area [m\xb2]', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1231, 10)))

ThermalZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'effectiveThermalCapacity'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=ThermalZoneType, documentation='Thermal capacity [Wh/K] of the zone including the contributing construction layers and zone fournitures.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1236, 10)))

ThermalZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heatedFloorArea'), teaser.Data.SchemaBindings.opengis.raw.gml.AreaType, scope=ThermalZoneType, documentation='Actively heated floor area [m\xb2]', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1241, 10)))

ThermalZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'indirectlyHeatedAreaRatio'), teaser.Data.SchemaBindings.opengis.raw.gml.ScaleType, scope=ThermalZoneType, documentation='[find precise definition]', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1246, 10)))

ThermalZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'infiltrationRate'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=ThermalZoneType, documentation='Air change rate [1/h] due to air leakage of the zone shell.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1251, 10)))

ThermalZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'boundedBy'), ThermalBoundarySurfacePropertyType, scope=ThermalZoneType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1256, 10)))

ThermalZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'relates'), UsageZonePropertyType, scope=ThermalZoneType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1257, 10)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1226, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1231, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1236, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1241, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1246, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1251, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1257, 10))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'creationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'terminationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'externalReference')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'generalizesTo')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, '_GenericApplicationPropertyOfCityObject')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'additionalThermalBridgeUValue')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1226, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cooledFloorArea')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1231, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'effectiveThermalCapacity')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1236, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heatedFloorArea')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1241, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'indirectlyHeatedAreaRatio')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1246, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'infiltrationRate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1251, 10))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1256, 10))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ThermalZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'relates')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1257, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ThermalZoneType._Automaton = _BuildAutomaton_81()




ThermalZonePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ThermalZone'), ThermalZoneType, scope=ThermalZonePropertyType, documentation='A thermal zone is a zone of a building which serves as unit for the building heating and cooling simulation. For the simulation, a thermal zone is considered as isothermal.\nIt is a semantic object, which may be or not related to a geometric entity.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1216, 2)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1263, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ThermalZonePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ThermalZone')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1264, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ThermalZonePropertyType._Automaton = _BuildAutomaton_82()




TimeValuesPropertiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'acquisitionMethod'), pyxb.binding.datatypes.string, scope=TimeValuesPropertiesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1275, 6)))

TimeValuesPropertiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interpolationType'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=TimeValuesPropertiesType, documentation='InterpolcationType defined in WaterML:\nhttp://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/waterml/2.0/interpolationType/', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1276, 6)))

TimeValuesPropertiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'qualityDescription'), pyxb.binding.datatypes.string, scope=TimeValuesPropertiesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1282, 6)))

TimeValuesPropertiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'source'), pyxb.binding.datatypes.string, scope=TimeValuesPropertiesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1283, 6)))

TimeValuesPropertiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'uom'), teaser.Data.SchemaBindings.opengis.raw.gml.UnitOfMeasureType, scope=TimeValuesPropertiesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1284, 6)))

TimeValuesPropertiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'variableLabel'), pyxb.binding.datatypes.string, scope=TimeValuesPropertiesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1285, 6)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1275, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1276, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1284, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1285, 6))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeValuesPropertiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'acquisitionMethod')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1275, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeValuesPropertiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'interpolationType')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1276, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeValuesPropertiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'qualityDescription')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1282, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TimeValuesPropertiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1283, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TimeValuesPropertiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'uom')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1284, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TimeValuesPropertiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'variableLabel')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1285, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TimeValuesPropertiesType._Automaton = _BuildAutomaton_83()




TimeValuesPropertiesPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeValuesProperties'), TimeValuesPropertiesType, scope=TimeValuesPropertiesPropertyType, documentation='Information and properties of a given variable.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1268, 2)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TimeValuesPropertiesPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeValuesProperties')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1290, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TimeValuesPropertiesPropertyType._Automaton = _BuildAutomaton_84()




TransmittanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'percentage'), pyxb.binding.datatypes.double, scope=TransmittanceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1300, 6)))

TransmittanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'wavelengthRange'), WavelengthRangeTypeType, scope=TransmittanceType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1301, 6)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransmittanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'percentage')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1300, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TransmittanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'wavelengthRange')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1301, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TransmittanceType._Automaton = _BuildAutomaton_85()




TransmittancePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Transmittance'), TransmittanceType, scope=TransmittancePropertyType, documentation='Percentaged  energy transmittance in different wavelength ranges', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1293, 2)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TransmittancePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Transmittance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1306, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TransmittancePropertyType._Automaton = _BuildAutomaton_86()




UsageZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coolingSchedule'), SchedulePropertyType, scope=UsageZoneType, documentation='Temperature schedule [\xb0C] of the active cooling inside the usage zone.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1318, 10)))

UsageZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heatingSchedule'), SchedulePropertyType, scope=UsageZoneType, documentation='Temperature schedule [\xb0C] of the active heating inside the usage zone.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1323, 10)))

UsageZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usageZoneClass'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=UsageZoneType, documentation='Usage class of the zone.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1328, 10)))

UsageZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usedArea'), teaser.Data.SchemaBindings.opengis.raw.gml.AreaType, scope=UsageZoneType, documentation='Used floor area [m\xb2].', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1333, 10)))

UsageZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usedFloorNumbers'), pyxb.binding.datatypes.integer, scope=UsageZoneType, documentation='List of the number of floors part of the usage zone (0 = ground level).', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1338, 10)))

UsageZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ventilationSchedule'), SchedulePropertyType, scope=UsageZoneType, documentation='Air change rate [1/h] schedule of the ventilation system inside the usage zone.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1343, 10)))

UsageZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'contains'), BuildingUnitPropertyType, scope=UsageZoneType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1348, 10)))

UsageZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'occupiedBy'), OccupancyPropertyType, scope=UsageZoneType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1349, 10)))

UsageZoneType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'has'), FacilitiesPropertyType, scope=UsageZoneType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1350, 10)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1318, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1323, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1338, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1343, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1348, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1349, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1350, 10))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'creationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'terminationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'externalReference')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'generalizesTo')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, '_GenericApplicationPropertyOfCityObject')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'coolingSchedule')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1318, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heatingSchedule')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1323, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usageZoneClass')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1328, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usedArea')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1333, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usedFloorNumbers')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1338, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ventilationSchedule')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1343, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'contains')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1348, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'occupiedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1349, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(UsageZoneType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'has')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1350, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UsageZoneType._Automaton = _BuildAutomaton_87()




UsageZonePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UsageZone'), UsageZoneType, scope=UsageZonePropertyType, documentation='A usage zone is a zone of a building with homogeneous usage type.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1309, 2)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1356, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UsageZonePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UsageZone')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1357, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UsageZonePropertyType._Automaton = _BuildAutomaton_88()




SchedulePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, '_Schedule'), ScheduleType, abstract=pyxb.binding.datatypes.boolean(1), scope=SchedulePropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1407, 2)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SchedulePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, '_Schedule')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1413, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SchedulePropertyType._Automaton = _BuildAutomaton_89()




SolarEnergySystemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, '_SolarEnergySystem'), SolarEnergySystemType, abstract=pyxb.binding.datatypes.boolean(1), scope=SolarEnergySystemPropertyType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1416, 2)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1430, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, '_SolarEnergySystem')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1431, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SolarEnergySystemPropertyType._Automaton = _BuildAutomaton_90()




StorageSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'energyDistribution'), EnergyDistributionSystemPropertyType, scope=StorageSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1444, 10)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StorageSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'energyDistribution')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1444, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StorageSystemType._Automaton = _BuildAutomaton_91()




StorageSystemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, '_StorageSystem'), StorageSystemType, abstract=pyxb.binding.datatypes.boolean(1), scope=StorageSystemPropertyType, documentation='System storing energy. A same storage may store the energy of different end-users and different end-use.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1435, 2)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1450, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StorageSystemPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, '_StorageSystem')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1451, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
StorageSystemPropertyType._Automaton = _BuildAutomaton_92()




TimeSeriesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'id'), pyxb.binding.datatypes.string, scope=TimeSeriesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1462, 6)))

TimeSeriesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'temporalExtent'), teaser.Data.SchemaBindings.opengis.raw.gml.TimePeriodPropertyType, scope=TimeSeriesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1463, 6)))

TimeSeriesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'variableProperties'), TimeValuesPropertiesPropertyType, scope=TimeSeriesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1464, 6)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1464, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'id')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1462, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'temporalExtent')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1463, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'variableProperties')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1464, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TimeSeriesType._Automaton = _BuildAutomaton_93()




TimeSeriesPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, '_TimeSeries'), TimeSeriesType, abstract=pyxb.binding.datatypes.boolean(1), scope=TimeSeriesPropertyType, documentation='Consistent series of time-depending values.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1455, 2)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TimeSeriesPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, '_TimeSeries')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1469, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TimeSeriesPropertyType._Automaton = _BuildAutomaton_94()




BoilerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'condensation'), pyxb.binding.datatypes.boolean, scope=BoilerType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 65, 10)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'efficiencyIndicator')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'model')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nominalEfficiency')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'productAndInstallationDocument')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearOfManufacture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'has')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'consumes')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 380, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedIn')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BoilerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'condensation')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 65, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BoilerType._Automaton = _BuildAutomaton_95()




CombinedHeatPowerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'technologyType'), pyxb.binding.datatypes.string, scope=CombinedHeatPowerType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 106, 10)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'efficiencyIndicator')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'model')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nominalEfficiency')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'productAndInstallationDocument')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearOfManufacture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'has')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'consumes')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 380, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedIn')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CombinedHeatPowerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'technologyType')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 106, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CombinedHeatPowerType._Automaton = _BuildAutomaton_96()




DHWFacilitiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numberOfBath'), pyxb.binding.datatypes.integer, scope=DHWFacilitiesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 219, 10)))

DHWFacilitiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numberOfShower'), pyxb.binding.datatypes.integer, scope=DHWFacilitiesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 220, 10)))

DHWFacilitiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numberOfWashBasin'), pyxb.binding.datatypes.integer, scope=DHWFacilitiesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 221, 10)))

DHWFacilitiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'waterStorageVolume'), teaser.Data.SchemaBindings.opengis.raw.gml.VolumeType, scope=DHWFacilitiesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 222, 10)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 513, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 219, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 220, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 221, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 222, 10))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DHWFacilitiesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DHWFacilitiesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DHWFacilitiesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DHWFacilitiesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DHWFacilitiesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DHWFacilitiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operationSchedules')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 513, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DHWFacilitiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numberOfBath')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 219, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DHWFacilitiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numberOfShower')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 220, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DHWFacilitiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numberOfWashBasin')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 221, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DHWFacilitiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'waterStorageVolume')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 222, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DHWFacilitiesType._Automaton = _BuildAutomaton_97()




DistrictNetworkSubstationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'networkId'), pyxb.binding.datatypes.string, scope=DistrictNetworkSubstationType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 250, 10)))

DistrictNetworkSubstationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'networkNodeId'), pyxb.binding.datatypes.string, scope=DistrictNetworkSubstationType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 251, 10)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'efficiencyIndicator')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'model')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nominalEfficiency')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'productAndInstallationDocument')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearOfManufacture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'has')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'consumes')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 380, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedIn')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'networkId')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 250, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DistrictNetworkSubstationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'networkNodeId')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 251, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DistrictNetworkSubstationType._Automaton = _BuildAutomaton_98()




ElectricalAppliancesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'electricalPower'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=ElectricalAppliancesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 271, 10)))

ElectricalAppliancesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heatLosses'), HeatExchangeTypePropertyType, scope=ElectricalAppliancesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 272, 10)))

ElectricalAppliancesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.string, scope=ElectricalAppliancesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 273, 10)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 513, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 271, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 272, 10))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalAppliancesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalAppliancesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalAppliancesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalAppliancesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalAppliancesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalAppliancesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operationSchedules')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 513, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalAppliancesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'electricalPower')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 271, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalAppliancesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heatLosses')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 272, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ElectricalAppliancesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 273, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ElectricalAppliancesType._Automaton = _BuildAutomaton_99()




def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'efficiencyIndicator')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'model')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nominalEfficiency')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'productAndInstallationDocument')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearOfManufacture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'has')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'consumes')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 380, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ElectricalResistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedIn')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ElectricalResistanceType._Automaton = _BuildAutomaton_100()




GasType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isVentilated'), pyxb.binding.datatypes.boolean, scope=GasType, documentation='Indicates whether a gas-layer is ventilated', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 533, 10), unicode_default='false'))

GasType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rValue'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=GasType, documentation='Resistance of material', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 538, 10)))

GasType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'thickness'), teaser.Data.SchemaBindings.opengis.raw.gml.LengthType, scope=GasType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 543, 10)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 40, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 45, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 533, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 538, 10))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'creationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'terminationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'externalReference')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'generalizesTo')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, '_GenericApplicationPropertyOfCityObject')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenceURI')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 40, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'imageTexture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 45, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isVentilated')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 533, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'rValue')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 538, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GasType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'thickness')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 543, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GasType._Automaton = _BuildAutomaton_101()




GlazingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hemisphericalEmittance'), EmittancePropertyType, scope=GlazingType, documentation='Hemispherical emittance', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 563, 10)))

GlazingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hemisphericalReflectance'), ReflectancePropertyType, scope=GlazingType, documentation='Hemispherical reflectance', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 568, 10)))

GlazingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hemisphericalTransmittance'), TransmittancePropertyType, scope=GlazingType, documentation='Heminpherical transmittance', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 573, 10)))

GlazingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'normalIncidenceEmittance'), EmittancePropertyType, scope=GlazingType, documentation='Emittance in surface normal direction', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 578, 10)))

GlazingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'normalIncidenceReflectance'), ReflectancePropertyType, scope=GlazingType, documentation='Reflectance in surface normal direction', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 583, 10)))

GlazingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'normalIncidenceTransmittance'), TransmittancePropertyType, scope=GlazingType, documentation='Transmittance in surface normal direction', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 588, 10)))

GlazingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numberOfPanes'), pyxb.binding.datatypes.integer, scope=GlazingType, documentation='Number of glazing panes', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 593, 10)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 40, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 45, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 563, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 568, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 573, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 578, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 583, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 588, 10))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 593, 10))
    counters.add(cc_18)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'creationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'terminationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'externalReference')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'generalizesTo')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, '_GenericApplicationPropertyOfCityObject')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenceURI')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 40, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'imageTexture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 45, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hemisphericalEmittance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 563, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hemisphericalReflectance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 568, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hemisphericalTransmittance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 573, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'normalIncidenceEmittance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 578, 10))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'normalIncidenceReflectance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 583, 10))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'normalIncidenceTransmittance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 588, 10))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(GlazingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numberOfPanes')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 593, 10))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
GlazingType._Automaton = _BuildAutomaton_102()




HeatPumpType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'carnotEfficiency'), pyxb.binding.datatypes.double, scope=HeatPumpType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 631, 10)))

HeatPumpType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heatSource'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=HeatPumpType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 632, 10)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 631, 10))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'efficiencyIndicator')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'model')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nominalEfficiency')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'productAndInstallationDocument')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearOfManufacture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'has')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'consumes')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 380, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedIn')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'carnotEfficiency')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 631, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HeatPumpType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heatSource')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 632, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
HeatPumpType._Automaton = _BuildAutomaton_103()




IrregularTimeSeriesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'contains'), MeasurementPointPropertyType, scope=IrregularTimeSeriesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 708, 10)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1464, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 708, 10))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IrregularTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'id')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1462, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IrregularTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'temporalExtent')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1463, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(IrregularTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'variableProperties')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1464, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(IrregularTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'contains')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 708, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IrregularTimeSeriesType._Automaton = _BuildAutomaton_104()




MechanicalVentilationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heatRecovery'), pyxb.binding.datatypes.boolean, scope=MechanicalVentilationType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 789, 10)))

MechanicalVentilationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recuperationFactor'), teaser.Data.SchemaBindings.opengis.raw.gml.ScaleType, scope=MechanicalVentilationType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 790, 10)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'efficiencyIndicator')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'model')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nominalEfficiency')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'productAndInstallationDocument')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearOfManufacture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'has')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'consumes')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 380, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedIn')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heatRecovery')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 789, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MechanicalVentilationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recuperationFactor')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 790, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MechanicalVentilationType._Automaton = _BuildAutomaton_105()




OpaqueMaterialType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'conductivity'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=OpaqueMaterialType, documentation='Conductivity of material', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 834, 10)))

OpaqueMaterialType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'density'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=OpaqueMaterialType, documentation='Density of material', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 839, 10)))

OpaqueMaterialType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'permeance'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=OpaqueMaterialType, documentation='The rate water vapor is allowed through a surface', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 844, 10)))

OpaqueMaterialType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'porosity'), teaser.Data.SchemaBindings.opengis.raw.gml.ScaleType, scope=OpaqueMaterialType, documentation='The ratio of the total amount of void space in a material (due to poses, small channels, and so on) to the bulk volume occupied by the material.', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 849, 10)))

OpaqueMaterialType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'specificHeat'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=OpaqueMaterialType, documentation='Specific heat of material', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 854, 10)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 40, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 45, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 834, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 839, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 844, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 849, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 854, 10))
    counters.add(cc_16)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'creationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 54, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'terminationDate')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 55, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'externalReference')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 56, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, 'generalizesTo')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 57, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, '_GenericApplicationPropertyOfCityObject')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/1.0/cityGMLBase.xsd', 58, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenceURI')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 40, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'imageTexture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 45, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'conductivity')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 834, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'density')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 839, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'permeance')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 844, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'porosity')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 849, 10))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueMaterialType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'specificHeat')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 854, 10))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
OpaqueMaterialType._Automaton = _BuildAutomaton_106()




PowerDistributionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'current'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=PowerDistributionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 915, 10)))

PowerDistributionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'voltage'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=PowerDistributionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 916, 10)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 444, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 445, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 446, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 447, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 915, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 916, 10))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PowerDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PowerDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PowerDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PowerDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PowerDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PowerDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'distributionPerimeter')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 444, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PowerDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'storageSystem')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 445, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PowerDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'energySupply')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 446, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PowerDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endUseUnit')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 447, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PowerDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'current')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 915, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PowerDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'voltage')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 916, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PowerDistributionSystemType._Automaton = _BuildAutomaton_107()




PowerStorageSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'batteryTechnology'), pyxb.binding.datatypes.string, scope=PowerStorageSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 932, 10)))

PowerStorageSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'powerCapacity'), pyxb.binding.datatypes.integer, scope=PowerStorageSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 933, 10)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 932, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 933, 10))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PowerStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PowerStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PowerStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PowerStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PowerStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PowerStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'energyDistribution')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1444, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PowerStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'batteryTechnology')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 932, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PowerStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'powerCapacity')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 933, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PowerStorageSystemType._Automaton = _BuildAutomaton_108()




RegularTimeSeriesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'timeInterval'), teaser.Data.SchemaBindings.opengis.raw.gml.TimeIntervalLengthType, scope=RegularTimeSeriesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 978, 10)))

RegularTimeSeriesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'values'), pyxb.binding.datatypes.double, scope=RegularTimeSeriesType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 979, 10)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1464, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 979, 10))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RegularTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'id')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1462, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RegularTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'temporalExtent')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1463, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RegularTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'variableProperties')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1464, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RegularTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'timeInterval')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 978, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RegularTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'values')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 979, 10))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RegularTimeSeriesType._Automaton = _BuildAutomaton_109()




ScheduleLoD0Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'averageValue'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=ScheduleLoD0Type, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 994, 10)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ScheduleLoD0Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'averageValue')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 994, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ScheduleLoD0Type._Automaton = _BuildAutomaton_110()




ScheduleLoD1Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dailyUsageEndingTime'), pyxb.binding.datatypes.time, scope=ScheduleLoD1Type, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1009, 10)))

ScheduleLoD1Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dailyUsageStartingTime'), pyxb.binding.datatypes.time, scope=ScheduleLoD1Type, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1010, 10)))

ScheduleLoD1Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'idleValue'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=ScheduleLoD1Type, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1011, 10)))

ScheduleLoD1Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usageDaysPerYear'), pyxb.binding.datatypes.double, scope=ScheduleLoD1Type, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1012, 10)))

ScheduleLoD1Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usageValue'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=ScheduleLoD1Type, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1013, 10)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ScheduleLoD1Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dailyUsageEndingTime')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1009, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ScheduleLoD1Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dailyUsageStartingTime')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1010, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ScheduleLoD1Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'idleValue')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1011, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ScheduleLoD1Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usageDaysPerYear')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1012, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ScheduleLoD1Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usageValue')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1013, 10))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ScheduleLoD1Type._Automaton = _BuildAutomaton_111()




ScheduleLoD2Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dailySchedule'), DailySchedulePropertyType, scope=ScheduleLoD2Type, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1028, 10)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ScheduleLoD2Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dailySchedule')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1028, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ScheduleLoD2Type._Automaton = _BuildAutomaton_112()




ScheduleLoD3Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'timeDependingValues'), TimeSeriesPropertyType, scope=ScheduleLoD3Type, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1043, 10)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ScheduleLoD3Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'timeDependingValues')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1043, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ScheduleLoD3Type._Automaton = _BuildAutomaton_113()




ThermalDistributionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isCirculation'), pyxb.binding.datatypes.boolean, scope=ThermalDistributionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1177, 10)))

ThermalDistributionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'medium'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=ThermalDistributionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1178, 10)))

ThermalDistributionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nominalFlow'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=ThermalDistributionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1179, 10)))

ThermalDistributionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'returnTemperature'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=ThermalDistributionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1180, 10)))

ThermalDistributionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'supplyTemperature'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=ThermalDistributionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1181, 10)))

ThermalDistributionSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'thermalLossesFactor'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=ThermalDistributionSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1182, 10)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 444, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 445, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 446, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 447, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1177, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1178, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1179, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1180, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1181, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1182, 10))
    counters.add(cc_14)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'distributionPerimeter')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 444, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'storageSystem')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 445, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'energySupply')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 446, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endUseUnit')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 447, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isCirculation')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1177, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'medium')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1178, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nominalFlow')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1179, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'returnTemperature')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1180, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'supplyTemperature')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1181, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ThermalDistributionSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'thermalLossesFactor')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1182, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ThermalDistributionSystemType._Automaton = _BuildAutomaton_114()




ThermalStorageSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'averageTemperature'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=ThermalStorageSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1198, 10)))

ThermalStorageSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'medium'), teaser.Data.SchemaBindings.opengis.raw.gml.CodeType, scope=ThermalStorageSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1199, 10)))

ThermalStorageSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'thermalLossesFactor'), teaser.Data.SchemaBindings.opengis.raw.gml.MeasureType, scope=ThermalStorageSystemType, documentation='U*A', location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1200, 10)))

ThermalStorageSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volume'), teaser.Data.SchemaBindings.opengis.raw.gml.VolumeType, scope=ThermalStorageSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1205, 10)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1198, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1199, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1200, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1205, 10))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ThermalStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ThermalStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'energyDistribution')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1444, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ThermalStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'averageTemperature')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1198, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ThermalStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'medium')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1199, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ThermalStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'thermalLossesFactor')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1200, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ThermalStorageSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'volume')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1205, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ThermalStorageSystemType._Automaton = _BuildAutomaton_115()




SolarEnergySystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'collectorSurface'), teaser.Data.SchemaBindings.opengis.raw.gml.AreaType, scope=SolarEnergySystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1421, 10)))

SolarEnergySystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'panelAzimuth'), teaser.Data.SchemaBindings.opengis.raw.gml.AngleType, scope=SolarEnergySystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1422, 10)))

SolarEnergySystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'panelInclination'), teaser.Data.SchemaBindings.opengis.raw.gml.AngleType, scope=SolarEnergySystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1423, 10)))

SolarEnergySystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'installedOn'), teaser.Data.SchemaBindings.opengis.raw.gml.ReferenceType, scope=SolarEnergySystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1424, 10)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1424, 10))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'efficiencyIndicator')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'model')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nominalEfficiency')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'productAndInstallationDocument')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearOfManufacture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'has')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'consumes')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 380, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedIn')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'collectorSurface')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1421, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'panelAzimuth')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1422, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'panelInclination')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1423, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SolarEnergySystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedOn')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1424, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SolarEnergySystemType._Automaton = _BuildAutomaton_116()




PhotovoltaicSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cellMaterialType'), pyxb.binding.datatypes.string, scope=PhotovoltaicSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 899, 10)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1424, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 899, 10))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'efficiencyIndicator')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'model')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nominalEfficiency')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'productAndInstallationDocument')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearOfManufacture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'has')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'consumes')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 380, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedIn')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'collectorSurface')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1421, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'panelAzimuth')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1422, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'panelInclination')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1423, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedOn')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1424, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(PhotovoltaicSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cellMaterialType')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 899, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PhotovoltaicSystemType._Automaton = _BuildAutomaton_117()




SolarThermalSystemType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'technologyType'), pyxb.binding.datatypes.string, scope=SolarThermalSystemType, location=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1075, 10)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1424, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1075, 10))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 55, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 56, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/gmlBase.xsd', 57, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 28, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/gml/3.1.1/base/feature.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'efficiencyIndicator')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 364, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedNominalPower')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 369, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'model')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 370, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nominalEfficiency')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 371, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 376, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'productAndInstallationDocument')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 377, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'yearOfManufacture')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 378, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'has')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 379, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'consumes')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 380, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedIn')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 381, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'collectorSurface')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1421, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'panelAzimuth')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1422, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'panelInclination')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1423, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedOn')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1424, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(SolarThermalSystemType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'technologyType')), pyxb.utils.utility.Location('/root/pyxb/PyXB-1.2.4/pyxb/bundles/opengis/schemas/citygml/energy/energy.xsd', 1075, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SolarThermalSystemType._Automaton = _BuildAutomaton_118()


averageStoreyHeight._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

basementCeilingHeightAboveGroundSurface._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

buildingType._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

constructionStyle._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

eavesHeight._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

energyPerformanceCertification._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

grossVolume._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

landmarked._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

referenceGeoCoordinates._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

referenceHeatedFloorArea._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

refurbishmentClass._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

ridgeHeight._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

yearOfRefurbishment._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

openableRatio._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfOpening)

Absorptance._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Object)

AbstractMaterial._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.base.CityObject)

BuildingUnit._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.base.CityObject)

Construction._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.base.CityObject)

ConstructionOrientation._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.base.CityObject)

ControlType._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Object)

DailySchedule._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Object)

Emittance._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Object)

EndUseUnit._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Feature)

EnergyCarrier._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Object)

EnergyConversionSystem._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Feature)

EnergyCoverage._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Feature)

EnergyDemand._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Feature)

EnergyDistributionSystem._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Feature)

EnergySource._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Feature)

EnergySupply._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Feature)

Facilities._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Feature)

HeatExchangeType._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Object)

Household._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Feature)

ImageTexture._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Feature)

Layer._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.base.CityObject)

LayerComponent._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Feature)

MeasurementPoint._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Object)

Occupancy._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Feature)

OperationMode._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Feature)

Reflectance._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Object)

ShadingType._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Object)

SurfaceComponent._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.base.CityObject)

ThermalBoundarySurface._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.base.CityObject)

ThermalZone._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.base.CityObject)

TimeValuesProperties._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Object)

Transmittance._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Object)

UsageZone._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.base.CityObject)

atticType._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

basementType._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

has._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

thermalZones._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

usageZones._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfAbstractBuilding)

equippedWith._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfBoundarySurface)

correspondsTo._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfBoundarySurface)

construction._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.base.GenericApplicationPropertyOfCityObject)

constructionOrientation._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.base.GenericApplicationPropertyOfCityObject)

energyDemands._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.base.GenericApplicationPropertyOfCityObject)

indoorShading._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfOpening)

outdoorShading._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.citygml.raw.building.GenericApplicationPropertyOfOpening)

Schedule._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Object)

StorageSystem._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Feature)

TimeSeries._setSubstitutionGroup(teaser.Data.SchemaBindings.opengis.raw.gml.Object)

Boiler._setSubstitutionGroup(EnergyConversionSystem)

CombinedHeatPower._setSubstitutionGroup(EnergyConversionSystem)

DHWFacilities._setSubstitutionGroup(Facilities)

DistrictNetworkSubstation._setSubstitutionGroup(EnergyConversionSystem)

ElectricalAppliances._setSubstitutionGroup(Facilities)

ElectricalResistance._setSubstitutionGroup(EnergyConversionSystem)

Gas._setSubstitutionGroup(AbstractMaterial)

Glazing._setSubstitutionGroup(AbstractMaterial)

HeatPump._setSubstitutionGroup(EnergyConversionSystem)

IrregularTimeSeries._setSubstitutionGroup(TimeSeries)

MechanicalVentilation._setSubstitutionGroup(EnergyConversionSystem)

OpaqueMaterial._setSubstitutionGroup(AbstractMaterial)

PowerDistributionSystem._setSubstitutionGroup(EnergyDistributionSystem)

PowerStorageSystem._setSubstitutionGroup(StorageSystem)

RegularTimeSeries._setSubstitutionGroup(TimeSeries)

ScheduleLoD0._setSubstitutionGroup(Schedule)

ScheduleLoD1._setSubstitutionGroup(Schedule)

ScheduleLoD2._setSubstitutionGroup(Schedule)

ScheduleLoD3._setSubstitutionGroup(Schedule)

ThermalDistributionSystem._setSubstitutionGroup(EnergyDistributionSystem)

ThermalStorageSystem._setSubstitutionGroup(StorageSystem)

SolarEnergySystem._setSubstitutionGroup(EnergyConversionSystem)

PhotovoltaicSystem._setSubstitutionGroup(SolarEnergySystem)

SolarThermalSystem._setSubstitutionGroup(SolarEnergySystem)
